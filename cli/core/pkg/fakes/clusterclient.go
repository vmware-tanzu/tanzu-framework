// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/vmware-tanzu/tanzu-framework/apis/cli/v1alpha1"
	"github.com/vmware-tanzu/tanzu-framework/cli/core/pkg/cluster"
)

type ClusterClient struct {
	GetCLIPluginImageRepositoryOverrideStub        func() (map[string]string, error)
	getCLIPluginImageRepositoryOverrideMutex       sync.RWMutex
	getCLIPluginImageRepositoryOverrideArgsForCall []struct {
	}
	getCLIPluginImageRepositoryOverrideReturns struct {
		result1 map[string]string
		result2 error
	}
	getCLIPluginImageRepositoryOverrideReturnsOnCall map[int]struct {
		result1 map[string]string
		result2 error
	}
	ListCLIPluginResourcesStub        func() ([]v1alpha1.CLIPlugin, error)
	listCLIPluginResourcesMutex       sync.RWMutex
	listCLIPluginResourcesArgsForCall []struct {
	}
	listCLIPluginResourcesReturns struct {
		result1 []v1alpha1.CLIPlugin
		result2 error
	}
	listCLIPluginResourcesReturnsOnCall map[int]struct {
		result1 []v1alpha1.CLIPlugin
		result2 error
	}
	VerifyCLIPluginCRDStub        func() (bool, error)
	verifyCLIPluginCRDMutex       sync.RWMutex
	verifyCLIPluginCRDArgsForCall []struct {
	}
	verifyCLIPluginCRDReturns struct {
		result1 bool
		result2 error
	}
	verifyCLIPluginCRDReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ClusterClient) GetCLIPluginImageRepositoryOverride() (map[string]string, error) {
	fake.getCLIPluginImageRepositoryOverrideMutex.Lock()
	ret, specificReturn := fake.getCLIPluginImageRepositoryOverrideReturnsOnCall[len(fake.getCLIPluginImageRepositoryOverrideArgsForCall)]
	fake.getCLIPluginImageRepositoryOverrideArgsForCall = append(fake.getCLIPluginImageRepositoryOverrideArgsForCall, struct {
	}{})
	stub := fake.GetCLIPluginImageRepositoryOverrideStub
	fakeReturns := fake.getCLIPluginImageRepositoryOverrideReturns
	fake.recordInvocation("GetCLIPluginImageRepositoryOverride", []interface{}{})
	fake.getCLIPluginImageRepositoryOverrideMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ClusterClient) GetCLIPluginImageRepositoryOverrideCallCount() int {
	fake.getCLIPluginImageRepositoryOverrideMutex.RLock()
	defer fake.getCLIPluginImageRepositoryOverrideMutex.RUnlock()
	return len(fake.getCLIPluginImageRepositoryOverrideArgsForCall)
}

func (fake *ClusterClient) GetCLIPluginImageRepositoryOverrideCalls(stub func() (map[string]string, error)) {
	fake.getCLIPluginImageRepositoryOverrideMutex.Lock()
	defer fake.getCLIPluginImageRepositoryOverrideMutex.Unlock()
	fake.GetCLIPluginImageRepositoryOverrideStub = stub
}

func (fake *ClusterClient) GetCLIPluginImageRepositoryOverrideReturns(result1 map[string]string, result2 error) {
	fake.getCLIPluginImageRepositoryOverrideMutex.Lock()
	defer fake.getCLIPluginImageRepositoryOverrideMutex.Unlock()
	fake.GetCLIPluginImageRepositoryOverrideStub = nil
	fake.getCLIPluginImageRepositoryOverrideReturns = struct {
		result1 map[string]string
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetCLIPluginImageRepositoryOverrideReturnsOnCall(i int, result1 map[string]string, result2 error) {
	fake.getCLIPluginImageRepositoryOverrideMutex.Lock()
	defer fake.getCLIPluginImageRepositoryOverrideMutex.Unlock()
	fake.GetCLIPluginImageRepositoryOverrideStub = nil
	if fake.getCLIPluginImageRepositoryOverrideReturnsOnCall == nil {
		fake.getCLIPluginImageRepositoryOverrideReturnsOnCall = make(map[int]struct {
			result1 map[string]string
			result2 error
		})
	}
	fake.getCLIPluginImageRepositoryOverrideReturnsOnCall[i] = struct {
		result1 map[string]string
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) ListCLIPluginResources() ([]v1alpha1.CLIPlugin, error) {
	fake.listCLIPluginResourcesMutex.Lock()
	ret, specificReturn := fake.listCLIPluginResourcesReturnsOnCall[len(fake.listCLIPluginResourcesArgsForCall)]
	fake.listCLIPluginResourcesArgsForCall = append(fake.listCLIPluginResourcesArgsForCall, struct {
	}{})
	stub := fake.ListCLIPluginResourcesStub
	fakeReturns := fake.listCLIPluginResourcesReturns
	fake.recordInvocation("ListCLIPluginResources", []interface{}{})
	fake.listCLIPluginResourcesMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ClusterClient) ListCLIPluginResourcesCallCount() int {
	fake.listCLIPluginResourcesMutex.RLock()
	defer fake.listCLIPluginResourcesMutex.RUnlock()
	return len(fake.listCLIPluginResourcesArgsForCall)
}

func (fake *ClusterClient) ListCLIPluginResourcesCalls(stub func() ([]v1alpha1.CLIPlugin, error)) {
	fake.listCLIPluginResourcesMutex.Lock()
	defer fake.listCLIPluginResourcesMutex.Unlock()
	fake.ListCLIPluginResourcesStub = stub
}

func (fake *ClusterClient) ListCLIPluginResourcesReturns(result1 []v1alpha1.CLIPlugin, result2 error) {
	fake.listCLIPluginResourcesMutex.Lock()
	defer fake.listCLIPluginResourcesMutex.Unlock()
	fake.ListCLIPluginResourcesStub = nil
	fake.listCLIPluginResourcesReturns = struct {
		result1 []v1alpha1.CLIPlugin
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) ListCLIPluginResourcesReturnsOnCall(i int, result1 []v1alpha1.CLIPlugin, result2 error) {
	fake.listCLIPluginResourcesMutex.Lock()
	defer fake.listCLIPluginResourcesMutex.Unlock()
	fake.ListCLIPluginResourcesStub = nil
	if fake.listCLIPluginResourcesReturnsOnCall == nil {
		fake.listCLIPluginResourcesReturnsOnCall = make(map[int]struct {
			result1 []v1alpha1.CLIPlugin
			result2 error
		})
	}
	fake.listCLIPluginResourcesReturnsOnCall[i] = struct {
		result1 []v1alpha1.CLIPlugin
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) VerifyCLIPluginCRD() (bool, error) {
	fake.verifyCLIPluginCRDMutex.Lock()
	ret, specificReturn := fake.verifyCLIPluginCRDReturnsOnCall[len(fake.verifyCLIPluginCRDArgsForCall)]
	fake.verifyCLIPluginCRDArgsForCall = append(fake.verifyCLIPluginCRDArgsForCall, struct {
	}{})
	stub := fake.VerifyCLIPluginCRDStub
	fakeReturns := fake.verifyCLIPluginCRDReturns
	fake.recordInvocation("VerifyCLIPluginCRD", []interface{}{})
	fake.verifyCLIPluginCRDMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ClusterClient) VerifyCLIPluginCRDCallCount() int {
	fake.verifyCLIPluginCRDMutex.RLock()
	defer fake.verifyCLIPluginCRDMutex.RUnlock()
	return len(fake.verifyCLIPluginCRDArgsForCall)
}

func (fake *ClusterClient) VerifyCLIPluginCRDCalls(stub func() (bool, error)) {
	fake.verifyCLIPluginCRDMutex.Lock()
	defer fake.verifyCLIPluginCRDMutex.Unlock()
	fake.VerifyCLIPluginCRDStub = stub
}

func (fake *ClusterClient) VerifyCLIPluginCRDReturns(result1 bool, result2 error) {
	fake.verifyCLIPluginCRDMutex.Lock()
	defer fake.verifyCLIPluginCRDMutex.Unlock()
	fake.VerifyCLIPluginCRDStub = nil
	fake.verifyCLIPluginCRDReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) VerifyCLIPluginCRDReturnsOnCall(i int, result1 bool, result2 error) {
	fake.verifyCLIPluginCRDMutex.Lock()
	defer fake.verifyCLIPluginCRDMutex.Unlock()
	fake.VerifyCLIPluginCRDStub = nil
	if fake.verifyCLIPluginCRDReturnsOnCall == nil {
		fake.verifyCLIPluginCRDReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.verifyCLIPluginCRDReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getCLIPluginImageRepositoryOverrideMutex.RLock()
	defer fake.getCLIPluginImageRepositoryOverrideMutex.RUnlock()
	fake.listCLIPluginResourcesMutex.RLock()
	defer fake.listCLIPluginResourcesMutex.RUnlock()
	fake.verifyCLIPluginCRDMutex.RLock()
	defer fake.verifyCLIPluginCRDMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *ClusterClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cluster.Client = new(ClusterClient)
