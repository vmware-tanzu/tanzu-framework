// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	"k8s.io/client-go/rest"
	"sigs.k8s.io/controller-runtime/pkg/client"

	"github.com/vmware-tanzu/tanzu-framework/cli/core/pkg/cluster"
)

type CrtClientFake struct {
	ListObjectsStub        func(context.Context, client.ObjectList, *client.ListOptions) error
	listObjectsMutex       sync.RWMutex
	listObjectsArgsForCall []struct {
		arg1 context.Context
		arg2 client.ObjectList
		arg3 *client.ListOptions
	}
	listObjectsReturns struct {
		result1 error
	}
	listObjectsReturnsOnCall map[int]struct {
		result1 error
	}
	NewClientStub        func(*rest.Config, client.Options) (client.Client, error)
	newClientMutex       sync.RWMutex
	newClientArgsForCall []struct {
		arg1 *rest.Config
		arg2 client.Options
	}
	newClientReturns struct {
		result1 client.Client
		result2 error
	}
	newClientReturnsOnCall map[int]struct {
		result1 client.Client
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *CrtClientFake) ListObjects(arg1 context.Context, arg2 client.ObjectList, arg3 *client.ListOptions) error {
	fake.listObjectsMutex.Lock()
	ret, specificReturn := fake.listObjectsReturnsOnCall[len(fake.listObjectsArgsForCall)]
	fake.listObjectsArgsForCall = append(fake.listObjectsArgsForCall, struct {
		arg1 context.Context
		arg2 client.ObjectList
		arg3 *client.ListOptions
	}{arg1, arg2, arg3})
	stub := fake.ListObjectsStub
	fakeReturns := fake.listObjectsReturns
	fake.recordInvocation("ListObjects", []interface{}{arg1, arg2, arg3})
	fake.listObjectsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *CrtClientFake) ListObjectsCallCount() int {
	fake.listObjectsMutex.RLock()
	defer fake.listObjectsMutex.RUnlock()
	return len(fake.listObjectsArgsForCall)
}

func (fake *CrtClientFake) ListObjectsCalls(stub func(context.Context, client.ObjectList, *client.ListOptions) error) {
	fake.listObjectsMutex.Lock()
	defer fake.listObjectsMutex.Unlock()
	fake.ListObjectsStub = stub
}

func (fake *CrtClientFake) ListObjectsArgsForCall(i int) (context.Context, client.ObjectList, *client.ListOptions) {
	fake.listObjectsMutex.RLock()
	defer fake.listObjectsMutex.RUnlock()
	argsForCall := fake.listObjectsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *CrtClientFake) ListObjectsReturns(result1 error) {
	fake.listObjectsMutex.Lock()
	defer fake.listObjectsMutex.Unlock()
	fake.ListObjectsStub = nil
	fake.listObjectsReturns = struct {
		result1 error
	}{result1}
}

func (fake *CrtClientFake) ListObjectsReturnsOnCall(i int, result1 error) {
	fake.listObjectsMutex.Lock()
	defer fake.listObjectsMutex.Unlock()
	fake.ListObjectsStub = nil
	if fake.listObjectsReturnsOnCall == nil {
		fake.listObjectsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listObjectsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *CrtClientFake) NewClient(arg1 *rest.Config, arg2 client.Options) (client.Client, error) {
	fake.newClientMutex.Lock()
	ret, specificReturn := fake.newClientReturnsOnCall[len(fake.newClientArgsForCall)]
	fake.newClientArgsForCall = append(fake.newClientArgsForCall, struct {
		arg1 *rest.Config
		arg2 client.Options
	}{arg1, arg2})
	stub := fake.NewClientStub
	fakeReturns := fake.newClientReturns
	fake.recordInvocation("NewClient", []interface{}{arg1, arg2})
	fake.newClientMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *CrtClientFake) NewClientCallCount() int {
	fake.newClientMutex.RLock()
	defer fake.newClientMutex.RUnlock()
	return len(fake.newClientArgsForCall)
}

func (fake *CrtClientFake) NewClientCalls(stub func(*rest.Config, client.Options) (client.Client, error)) {
	fake.newClientMutex.Lock()
	defer fake.newClientMutex.Unlock()
	fake.NewClientStub = stub
}

func (fake *CrtClientFake) NewClientArgsForCall(i int) (*rest.Config, client.Options) {
	fake.newClientMutex.RLock()
	defer fake.newClientMutex.RUnlock()
	argsForCall := fake.newClientArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *CrtClientFake) NewClientReturns(result1 client.Client, result2 error) {
	fake.newClientMutex.Lock()
	defer fake.newClientMutex.Unlock()
	fake.NewClientStub = nil
	fake.newClientReturns = struct {
		result1 client.Client
		result2 error
	}{result1, result2}
}

func (fake *CrtClientFake) NewClientReturnsOnCall(i int, result1 client.Client, result2 error) {
	fake.newClientMutex.Lock()
	defer fake.newClientMutex.Unlock()
	fake.NewClientStub = nil
	if fake.newClientReturnsOnCall == nil {
		fake.newClientReturnsOnCall = make(map[int]struct {
			result1 client.Client
			result2 error
		})
	}
	fake.newClientReturnsOnCall[i] = struct {
		result1 client.Client
		result2 error
	}{result1, result2}
}

func (fake *CrtClientFake) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.listObjectsMutex.RLock()
	defer fake.listObjectsMutex.RUnlock()
	fake.newClientMutex.RLock()
	defer fake.newClientMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *CrtClientFake) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ cluster.CrtClient = new(CrtClientFake)
