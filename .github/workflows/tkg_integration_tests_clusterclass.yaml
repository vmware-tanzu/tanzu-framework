name: TKG Integration Tests ClusterClass

on:
  pull_request:
    branches: [ main, release-* ]
    paths:
      - 'tkg/**'
      - 'pkg/v1/tkr/**'
      - 'tkr/**'
      - 'featuregates/**'
      - 'capabilities/**'
      - 'object-propagation/**'
      - 'addons/**'
      - 'packages/**'
      - '!packageclients/**'
      - '!cmd/cli/plugin/package/test/**'
      - 'providers/**'
      - '.github/workflows/tkg_integration_tests*.yaml'

  push:
    branches: [ main, release-* ]
    paths:
    - 'tkg/**'
    - 'pkg/v1/tkr/**'
    - 'tkr/**'
    - 'featuregates/**'
    - 'capabilities/**'
    - 'object-propagation/**'
    - 'addons/**'
    - 'packages/**'
    - '!packageclients/**'
    - '!cmd/cli/plugin/package/test/**'
    - 'providers/**'
    - '.github/workflows/tkg_integration_tests*.yaml'

concurrency:
  group: ${{ format('integration-tests-clusterclass-{0}', github.head_ref) }}
  cancel-in-progress: true

jobs:
  build-and-publish-packages:
    name: Build and Publish Carvel Packages
    runs-on: tkg
    env:
      gcp_bucket_sa: ${{ secrets.GCP_BUCKET_SA }}
    outputs:
      bompath: ${{ steps.extract_bom.outputs.bompath }}
      registry: ${{ steps.set_registry.outputs.registry }}
      regdir: ${{ steps.extract_reg_dir.outputs.regdir }}
    steps:
    - name: Free disk space and clean up installed plugins on runner
      run: |
        df -h
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf /usr/local/share/boost
        sudo rm -rf /usr/lib/jvm
        sudo rm -rf /usr/lib/firefox
        sudo rm -rf /opt/microsoft/powershell
        sudo rm -rf /opt/hostedtoolcache
        sudo rm -rf /home/tanzu/.cache
        sudo rm -rf /home/tanzu/.kube
        sudo rm -rf /home/tanzu/.local/share/tanzu-cli/*
        sudo sh -c 'find /tmp -type d -name "go-build*" -mtime +3 | xargs rm -rf'
        echo "free space after cleanup:"
        df -h

    - name: show environment
      uses: hmarr/debug-action@v2

    - name: Extract PR Number
      uses: Dovyski/payload-info-action@master
      id: get_pr_num
      with:
        # when event is a pull request, obtaining the PR number is obvious
        filter_pull_request: '.number'
        # when event is a push (merge of PR), since we require linear history,
        # we are not even generating a merge commit that can help identify the
        # PR number, so don't even try. Instead we just hard-code to a dummy
        # value.
        filter_push: 1009

    - name: Determine registry directory
      uses: Dovyski/payload-info-action@master
      id: get_registry_dir
      with:
        # when event is a pull request, use the PR number as the registry dir
        filter_pull_request: '.number'
        # when event is a push, use branch name instead
        filter_push: '.ref | sub("^refs/heads/"; "")'

    - name: Extract registry directory
      shell: bash
      run: |
        export REGDIR=$(echo ${{ steps.get_registry_dir.outputs.value }} | tr -d '"')
        echo "##[set-output name=regdir;]$(echo $REGDIR)"
      id: extract_reg_dir

    - name: Set registry
      id: set_registry
      shell: bash
      run: |
        if [ -z "${gcp_bucket_sa}" ]; then
          echo "##[set-output name=registry;]localhost:5001"
        else
          echo "##[set-output name=registry;]gcr.io/eminent-nation-87317"
        fi

    - name: Find Comment
      uses: peter-evans/find-comment@v1
      id: findcomment
      with:
        issue-number: ${{ steps.get_pr_num.outputs.value }}
        body-includes: //usebom
        direction: last

    - name: Extract Alternate BOM
      shell: bash
      run: |
        export BOMCOMMENT=$(echo -e "${{ steps.findcomment.outputs.comment-body }}" | tr -d "[:space:]")
        echo "##[set-output name=bompath;]$(echo "$BOMCOMMENT" | awk -F : '{print $2}')"
      id: extract_bom

    - name: Free disk space and clean up installed plugins on runner
      run: |
        df -h
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /opt/ghc
        sudo rm -rf /usr/local/share/boost
        sudo rm -rf /usr/lib/jvm
        sudo rm -rf /usr/lib/firefox
        sudo rm -rf /opt/microsoft/powershell
        sudo rm -rf /opt/hostedtoolcache
        sudo rm -rf /home/tanzu/.cache
        sudo rm -rf /home/tanzu/.kube
        sudo rm -rf /home/tanzu/.local/share/tanzu-cli/*
        sudo sh -c 'find /tmp -type d -name "go-build*" -mtime +3 | xargs rm -rf'
        echo "free space after cleanup:"
        df -h

    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: 1.18
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v1

    - name: go cache
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Build Tools
      run: make tools

    - name: Login to GCR
      if: ${{ env.gcp_bucket_sa != '' }}
      uses: docker/login-action@v2
      with:
        registry: gcr.io
        username: _json_key
        password: ${{ secrets.GCP_BUCKET_SA }}

    - name: Build and Publish none-management images
      env:
        NUM: ${{ github.run_id }}
        IMAGE_REPO: ${{ steps.set_registry.outputs.registry }}/tanzu_framework/github-actions/${{ steps.extract_reg_dir.outputs.regdir }}
        PROVIDER_TEMPLATE_IMG_TAG: "v0.21.0"
      run: |
        make -C providers build-provider-template-image
        make -C providers push-provider-template-image

    - name: Build management packages
      env:
        NUM: ${{ github.run_id }}
        OCI_REGISTRY: ${{ steps.set_registry.outputs.registry }}/tanzu_framework/github-actions/${{ steps.extract_reg_dir.outputs.regdir }}
        COMPONENTS: "tkr/controller/tkr-source tkr/controller/tkr-status featuregates addons capabilities tkr/webhook/tkr-conversion tkr/webhook/cluster/tkr-resolver tkg/vsphere-template-resolver pinniped-components/tanzu-auth-controller-manager object-propagation"
        BUILD_VERSION: "v0.21.0"
        IMG_VERSION_OVERRIDE: latest
      run: |
        make local-registry
        make docker-build

    - name: Publish management packages
      env:
        NUM: ${{ github.run_number }}
        OCI_REGISTRY: ${{ steps.set_registry.outputs.registry }}/tanzu_framework/github-actions/${{ steps.extract_reg_dir.outputs.regdir }}
        COMPONENTS: "tkr/controller/tkr-source tkr/controller/tkr-status featuregates addons capabilities tkr/webhook/tkr-conversion tkr/webhook/cluster/tkr-resolver tkg/vsphere-template-resolver pinniped-components/tanzu-auth-controller-manager object-propagation"
        BUILD_VERSION: "v0.21.0"
        IMG_VERSION_OVERRIDE: latest
      run: |
        make docker-publish
        cp tkg/test/config/packages/core-management-plugins/kbld-config_test.yaml packages/core-management-plugins/kbld-config.yaml
        make kbld-image-replace
        make package-push-bundles-repo PACKAGE_REPOSITORY=management
        make clean-registry

  integ-tests-docker-cc:
    if: false
    name: TKG Integration Tests CAPD (ClusterClass)
    runs-on: tkg
    needs: build-and-publish-packages
    env:
      gcp_bucket_sa: ${{ secrets.GCP_BUCKET_SA }}
    steps:
      - name: show environment
        uses: hmarr/debug-action@v2

      - name: Extract Alternate BOM
        shell: bash
        run: |
          export BOMCOMMENT=$(echo -e "${{ needs.build-and-publish-packages.steps.findcomment.outputs.comment-body }}" | tr -d "[:space:]")
          echo "##[set-output name=bompath;]$(echo "$BOMCOMMENT" | awk -F : '{print $2}')"
        id: extract_bom

      - name: Free disk space and clean up installed plugins on runner
        run: |
          df -h
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/local/share/boost
          sudo rm -rf /usr/lib/jvm
          sudo rm -rf /usr/lib/firefox
          sudo rm -rf /opt/microsoft/powershell
          sudo rm -rf /opt/hostedtoolcache
          sudo rm -rf /home/tanzu/.cache
          sudo rm -rf /home/tanzu/.kube
          sudo rm -rf /home/tanzu/.local/share/tanzu-cli/*
          sudo sh -c 'find /tmp -type d -name "go-build*" -mtime +3 | xargs rm -rf'
          echo "free space after cleanup:"
          df -h

      - name: Set up Go 1.x
        uses: actions/setup-go@v3
        with:
          go-version: 1.18
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v1

      - name: go cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Build Tools
        run: make tools

      - name: Login to GCR
        if: ${{ env.gcp_bucket_sa != '' }}
        uses: docker/login-action@v2
        with:
          registry: gcr.io
          username: _json_key
          password: ${{ secrets.GCP_BUCKET_SA }}

      - name: Cleanup
        run: rm -rf ~/.tanzu ~/.tkg ~/.config; docker kill $(docker ps -q) | true; docker system prune -a --volumes -f

      - name: Run TKG integration tests
        if: ${{ env.gcp_bucket_sa != '' }}
        run: |
          if [[ ! -z "${{ needs.build-and-publish-packages.outputs.bompath }}" ]]; then
            export TKG_DEFAULT_COMPATIBILITY_IMAGE_PATH=${{ needs.build-and-publish-packages.outputs.bompath }}
          fi
          make configure-bom
          make generate-embedproviders
          pushd tkg
          E2E_CONFIG=$PWD/test/config/cc/docker/docker.yaml ../hack/tools/bin/ginkgo -nodes=3 -v -trace -tags embedproviders test/tkgctl/docker_cc
          popd
        env:
          _MANAGEMENT_PACKAGE_REPO_IMAGE: ${{ needs.build-and-publish-packages.outputs.registry }}/tanzu_framework/github-actions/${{ needs.build-and-publish-packages.outputs.regdir }}/management:v0.21.0
          _MANAGEMENT_PACKAGE_VERSION: "0.21.0"
          TKG_CUSTOM_IMAGE_REPOSITORY: "projects-stg.registry.vmware.com/tkg"
          _PROVIDER_TEMPLATE_IMAGE: ${{ needs.build-and-publish-packages.outputs.registry }}/tanzu_framework/github-actions/${{ needs.build-and-publish-packages.outputs.regdir }}/provider-templates:v0.21.0
          _PROVIDER_TEMPLATE_TAG: "0.21.0"
          SKIP_PROVIDER_IMAGE_OVERWRITE: true


  integ-tests-aws-cc:
    name: TKG Integration Tests CAPA (ClusterClass)
    runs-on: ubuntu-latest
    needs: build-and-publish-packages
    env:
      aws_client_id: ${{secrets.AWS_ACCESS_KEY_ID}}
      gcp_bucket_sa: ${{ secrets.GCP_BUCKET_SA }}
    steps:
      - name: show environment
        uses: hmarr/debug-action@v2

      - name: Free disk space and clean up installed plugins on runner
        run: |
          df -h
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/local/share/boost
          sudo rm -rf /usr/lib/jvm
          sudo rm -rf /usr/lib/firefox
          sudo rm -rf /opt/microsoft/powershell
          sudo rm -rf /opt/hostedtoolcache
          sudo rm -rf /home/tanzu/.cache
          sudo rm -rf /home/tanzu/.kube
          sudo rm -rf /home/tanzu/.local/share/tanzu-cli/*
          sudo sh -c 'find /tmp -type d -name "go-build*" -mtime +3 | xargs rm -rf'
          echo "free space after cleanup:"
          df -h

      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: 1.18
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v1

      - name: go cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Build Tools
        run: make tools

      - name: Cleanup
        run: rm -rf ~/.tanzu ~/.tkg ~/.config; docker kill $(docker ps -q) | true; docker system prune -a --volumes -f

      - name: Build CLI
        run: |
          make install-cli

      - name: Generate cluster prefix
        if: ${{ env.aws_client_id != '' }}
        env:
          NUM: ${{ github.run_number }}
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true
        run: |
          echo ::set-env name=CLUSTER_PREFIX::"github-$NUM-"

      - uses: microsoft/variable-substitution@v1
        if: ${{ env.aws_client_id != '' }}
        with:
          files: 'tkg/test/config/aws.yaml'
        env:
          tkg_config_variables.AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          tkg_config_variables.AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          tkg_config_variables.AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          cluster_prefix: ${{ env.CLUSTER_PREFIX }}
      - run: |
          cat tkg/test/config/aws.yaml

      - name: Run TKG integration tests
        if: ${{ env.aws_client_id != '' }}
        run: |
          if [[ ! -z "${{ needs.build-and-publish-packages.outputs.bompath }}" ]]; then
            export TKG_DEFAULT_COMPATIBILITY_IMAGE_PATH=${{ needs.build-and-publish-packages.outputs.bompath }}
          fi
          make configure-bom
          make generate-embedproviders
          pushd tkg
          E2E_CONFIG=$PWD/test/config/aws.yaml ../hack/tools/bin/ginkgo -nodes=3 -v -trace -tags embedproviders test/tkgctl/aws_cc
          popd
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          AWS_REGION: "us-west-2"
          _MANAGEMENT_PACKAGE_REPO_IMAGE: ${{ needs.build-and-publish-packages.outputs.registry }}/tanzu_framework/github-actions/${{ needs.build-and-publish-packages.outputs.regdir }}/management:v0.21.0
          _MANAGEMENT_PACKAGE_VERSION: "0.21.0"
          TKG_CUSTOM_IMAGE_REPOSITORY: "projects-stg.registry.vmware.com/tkg"

      - name: Cleanup AWS resources
        if: ${{ always() }}
        run: |
          tkg/test/scripts/aws_cleanup.sh ${{ secrets.AWS_ACCESS_KEY_ID }} ${{ secrets.AWS_SECRET_ACCESS_KEY }} "" "us-west-2" ${{ env.CLUSTER_PREFIX }}
        env:
          cluster_prefix: ${{ env.CLUSTER_PREFIX }}

