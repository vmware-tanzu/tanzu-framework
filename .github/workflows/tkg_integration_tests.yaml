name: TKG Integration Tests

on:
  pull_request:
    branches: [ main, release-*, package-based-lcm ]
    paths:
    - 'pkg/v1/tkg/**'
    - '!pkg/v1/tkg/tkgpackage*/*'
    - '!pkg/v1/tkg/kappclient/*'
    - '!pkg/v1/tkg/test/tkgpackageclient/**'
    - 'pkg/v1/providers/**'
    - '.github/workflows/tkg_integration_tests.yaml'

concurrency:
  group: ${{ format('integration-tests-{0}', github.head_ref) }}
  cancel-in-progress: true

jobs:
  integ-tests-docker:
    name: TKG Integration Tests CAPD
    runs-on: tkg
    steps:
    - name: Free disk space and clean up installed plugins on runner
      run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /home/tanzu/.cache
          sudo rm -rf /home/tanzu/.kube
          sudo rm -rf /home/tanzu/.local/share/tanzu-cli/*

    - name: Set up Go 1.x
      uses: actions/setup-go@v3
      with:
        go-version: '1.17'
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v1

    - name: Get dependencies
      run: |
        go get -v -t -d ./...
        if [ -f Gopkg.toml ]; then
            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
            dep ensure
        fi

    - name: Build Tools
      run: make tools

    - name: Extract PR Number
      uses: Dovyski/payload-info-action@master
      id: get_pr_num
      with:
        # when event is a pull request, obtaining the PR number is obvious
        filter_pull_request: '.number'
        # when event is a push (merge of PR), obtains original PR number from the merge commit message
        filter_push: '.head_commit.message | capture("Merge pull request #(?<pr>[[:digit:]]+)").pr | tonumber'

    - name: Find Comment
      uses: peter-evans/find-comment@v1
      id: findcomment
      with:
        issue-number: ${{ steps.get_pr_num.outputs.value }}
        body-includes: //usebom
        direction: last

    - name: Extract Alternate BOM
      shell: bash
      run: |
        export BOMCOMMENT=$(echo -e "${{ steps.findcomment.outputs.comment-body }}" | tr -d "[:space:]")
        echo "##[set-output name=bompath;]$(echo "$BOMCOMMENT" | awk -F : '{print $2}')"
      id: extract_bom

    - name: Cleanup
      run: rm -rf ~/.tanzu ~/.tkg ~/.config; docker kill $(docker ps -q) | true; docker system prune -a --volumes -f

    - name: Run TKG integration tests
      run: |
        if [[ ! -z "${{ steps.extract_bom.outputs.bompath }}" ]]; then
          export TKG_DEFAULT_COMPATIBILITY_IMAGE_PATH=${{ steps.extract_bom.outputs.bompath }}
        fi
        make configure-bom
        make generate-embedproviders
        E2E_CONFIG=$PWD/pkg/v1/tkg/test/config/docker.yaml hack/tools/bin/ginkgo -nodes=3 -v -trace -tags embedproviders pkg/v1/tkg/test/tkgctl/docker

  integ-tests-azure:
    name: TKG Integration Tests CAPZ
    runs-on: ubuntu-latest
    env:
      azure_client_id: ${{secrets.AZURE_CLIENT_ID_SAIB}}
    steps:
    - name: Free disk space and clean up installed plugins on runner
      run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /home/tanzu/.cache
          sudo rm -rf /home/tanzu/.kube
          sudo rm -rf /home/tanzu/.local/share/tanzu-cli/*

    - name: Set up Go 1.x
      uses: actions/setup-go@v3
      with:
        go-version: '1.17'
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v1

    - name: Get dependencies
      run: |
        go get -v -t -d ./...
        if [ -f Gopkg.toml ]; then
            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
            dep ensure
        fi
    - name: Build Tools
      run: make tools

    - name: Extract PR Number
      uses: Dovyski/payload-info-action@master
      id: get_pr_num
      with:
        # when event is a pull request, obtaining the PR number is obvious
        filter_pull_request: '.number'
        # when event is a push (merge of PR), obtains original PR number from the merge commit message
        filter_push: '.head_commit.message | capture("Merge pull request #(?<pr>[[:digit:]]+)").pr | tonumber'

    - name: Find Comment
      uses: peter-evans/find-comment@v1
      id: findcomment
      with:
        issue-number: ${{ steps.get_pr_num.outputs.value }}
        body-includes: //usebom
        direction: last

    - name: Extract Alternate BOM
      shell: bash
      run: |
        export BOMCOMMENT=$(echo -e "${{ steps.findcomment.outputs.comment-body }}" | tr -d "[:space:]")
        echo "##[set-output name=bompath;]$(echo "$BOMCOMMENT" | awk -F : '{print $2}')"
      id: extract_bom

    - name: Cleanup
      run: rm -rf ~/.tanzu ~/.tkg ~/.config; docker kill $(docker ps -q) | true; docker system prune -a --volumes -f

    - name: Generate cluster prefix
      if: ${{ env.azure_client_id != '' }}
      env:
        NUM: ${{ github.run_number }}
        ACTIONS_ALLOW_UNSECURE_COMMANDS: true
      run: |
        echo ::set-env name=CLUSTER_PREFIX::"github-$NUM-"
    - uses: microsoft/variable-substitution@v1
      if: ${{ env.azure_client_id != '' }}
      with:
        files: 'pkg/v1/tkg/test/config/azure.yaml'
      env:
        tkg_config_variables.AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID_SAIB }}
        tkg_config_variables.AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID_SAIB }}
        tkg_config_variables.AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID_SAIB }}
        tkg_config_variables.AZURE_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET_SAIB }}
        cluster_prefix: ${{ env.CLUSTER_PREFIX }}
    - run: |
        cat pkg/v1/tkg/test/config/azure.yaml
    - name: Run TKG integration tests
      if: ${{ env.azure_client_id != '' }}
      run: |
        if [[ ! -z "${{ steps.extract_bom.outputs.bompath }}" ]]; then
          export TKG_DEFAULT_COMPATIBILITY_IMAGE_PATH=${{ steps.extract_bom.outputs.bompath }}
        fi
        make configure-bom
        make generate-embedproviders
        E2E_CONFIG=$PWD/pkg/v1/tkg/test/config/azure.yaml hack/tools/bin/ginkgo -nodes=3 -v -trace -tags embedproviders pkg/v1/tkg/test/tkgctl/azure

    - uses: Azure/login@v1.1
      if: ${{ always() && env.azure_client_id != '' }}
      with:
        creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID_SAIB }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET_SAIB }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID_SAIB }}","tenantId":"${{ secrets.AZURE_TENANT_ID_SAIB }}"}'

    - name: Cleanup Azure resources
      if: ${{ always() }}
      run: |
        for rgname in `az group list --query "[? contains(name,'${cluster_prefix}')][].{name:name}" -o tsv`; do
        echo Deleting ${rgname}
        az group delete -n ${rgname} --yes --no-wait
        done
      env:
        cluster_prefix: ${{ env.CLUSTER_PREFIX }}
  integ-tests-aws-cc:
    name: TKG Integration Tests CAPA (ClusterClass)
    runs-on: ubuntu-latest
    env:
      aws_client_id: ${{secrets.AWS_ACCESS_KEY_ID}}
    steps:
      - name: Free disk space and clean up installed plugins on runner
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /home/tanzu/.local/share/tanzu-cli/*

      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: '1.17'
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v1

      - name: Get dependencies
        run: |
          go get -v -t -d ./...
          if [ -f Gopkg.toml ]; then
              curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
              dep ensure
          fi
      - name: Build Tools
        run: make tools

      - name: Extract PR Number
        uses: Dovyski/payload-info-action@master
        id: get_pr_num
        with:
          # when event is a pull request, obtaining the PR number is obvious
          filter_pull_request: '.number'
          # when event is a push (merge of PR), obtains original PR number from the merge commit message
          filter_push: '.head_commit.message | capture("Merge pull request #(?<pr>[[:digit:]]+)").pr | tonumber'

      - name: Find Comment
        uses: peter-evans/find-comment@v1
        id: findcomment
        with:
          issue-number: ${{ steps.get_pr_num.outputs.value }}
          body-includes: //usebom
          direction: last

      - name: Extract Alternate BOM
        shell: bash
        run: |
          export BOMCOMMENT=$(echo -e "${{ steps.findcomment.outputs.comment-body }}" | tr -d "[:space:]")
          echo "##[set-output name=bompath;]$(echo "$BOMCOMMENT" | awk -F : '{print $2}')"
        id: extract_bom

      # Using `ENABLE_CONTEXT_AWARE_PLUGIN_DISCOVERY=false` to build and install cli and plugins because
      # currently, context-aware-plugin-discovery does not support test plugins
      # Issue: https://github.com/vmware-tanzu/tanzu-framework/issues/1164
      # above issue need to be addressed and as part of the change we can use context-aware way of plugin
      # tests as part of this test workflow.
      - name: Build
        run: |
          if [[ ! -z "${{ steps.extract_bom.outputs.bompath }}" ]]; then
            export TKG_DEFAULT_COMPATIBILITY_IMAGE_PATH=${{ steps.extract_bom.outputs.bompath }}
          fi
          env | sort
          make configure-bom
          make build-install-cli-local ENABLE_CONTEXT_AWARE_PLUGIN_DISCOVERY=false

      - name: Cleanup
        run: rm -rf ~/.tanzu ~/.tkg ~/.config; docker kill $(docker ps -q) | true; docker system prune -a --volumes -f

      - name: Download BOM
        run: |
          tanzu management-cluster create -i aws -p dev || true
      - name: Edit BOM (Update tanzu-framework-management-packages component)
        run: |
          pkg/v1/tkg/test/scripts/hack_bom.sh
      - run: |
          cat $HOME/.config/tanzu/tkg/bom/tkg-bom-v1.6.0-zshippable.yaml
      - name: Generate cluster prefix
        if: ${{ env.aws_client_id != '' }}
        env:
          NUM: ${{ github.run_number }}
          ACTIONS_ALLOW_UNSECURE_COMMANDS: true
        run: |
          echo ::set-env name=CLUSTER_PREFIX::"github-$NUM-"
      - uses: microsoft/variable-substitution@v1
        if: ${{ env.aws_client_id != '' }}
        with:
          files: 'pkg/v1/tkg/test/config/aws.yaml'
        env:
          tkg_config_variables.AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          tkg_config_variables.AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          tkg_config_variables.AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          cluster_prefix: ${{ env.CLUSTER_PREFIX }}
      - run: |
          cat pkg/v1/tkg/test/config/aws.yaml
      - name: Run TKG integration tests
        if: ${{ env.aws_client_id != '' }}
        run: |
          if [[ ! -z "${{ steps.extract_bom.outputs.bompath }}" ]]; then
            export TKG_DEFAULT_COMPATIBILITY_IMAGE_PATH=${{ steps.extract_bom.outputs.bompath }}
          fi
          make configure-bom
          make generate-embedproviders
          E2E_CONFIG=$PWD/pkg/v1/tkg/test/config/aws.yaml hack/tools/bin/ginkgo -nodes=3 -v -trace -tags embedproviders pkg/v1/tkg/test/tkgctl/aws_cc 
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          AWS_REGION: "us-west-2"
      - name: Cleanup AWS resources
        if: ${{ always() }}
        run: |
          pkg/v1/tkg/test/scripts/aws_cleanup.sh ${{ secrets.AWS_ACCESS_KEY_ID }} ${{ secrets.AWS_SECRET_ACCESS_KEY }} "" "us-west-2" ${{ env.CLUSTER_PREFIX }}
        env:
          cluster_prefix: ${{ env.CLUSTER_PREFIX }}
