name: Release Staging

on:
  push:
    branches: [ main ]

jobs:

  build:
    name: Release Staging
    runs-on: ubuntu-latest
    steps:

    - name: Set up Go 1.x
      uses: actions/setup-go@v3
      with:
        go-version: '1.17'
      id: go

    - name: Use Node 16.x
      uses: actions/setup-node@v3
      with:
        node-version: 16.x

    - name: Check out code into the Go module directory
      uses: actions/checkout@v1

    - name: go cache
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/go-build
          ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Get npm cache directory
      id: npm-cache-dir
      run: |
        echo "::set-output name=dir::$(npm config get cache)"
    - name: npm cache
      uses: actions/cache@v3
      id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
      with:
        path: ${{ steps.npm-cache-dir.outputs.dir }}
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Get dependencies
      run: |
        go get -v -t -d ./...
        if [ -f Gopkg.toml ]; then
            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
            dep ensure
        fi

    - name: Build
      run: BUILD_VERSION=dev make all

    - name: Verify
      run: |
        make verify

    - name: Test
      run: make test

    - name: Upload coverage reports to Codecov with GitHub Action
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage1.txt,./coverage2.txt,./coverage3.txt,./addons/coverage.txt,./addons/pinniped/post-deploy/coverage.txt,./addons/pinniped/tanzu-auth-controller-manager/coverage.txt

    - id: upload-cli-artifacts
      # do not upload unsigned/untested artifacts to GCP bucket
      if: ${{ false }}
      uses: google-github-actions/upload-cloud-storage@v0.10.2
      with:
        path: ./artifacts
        destination: tanzu-cli-framework
        credentials: ${{ secrets.GCP_BUCKET_SA }}

    - id: upload-cli-admin-artifacts
      # do not upload unsigned/untested artifacts to GCP bucket
      if: ${{ false }}
      uses: google-github-actions/upload-cloud-storage@main
      with:
        path: ./artifacts-admin
        destination: tanzu-cli-admin-plugins
        credentials: ${{ secrets.GCP_BUCKET_SA }}
