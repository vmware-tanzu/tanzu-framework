/*
Copyright 2021.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package controllers

import (
	"context"

	"github.com/go-logr/logr"
	"k8s.io/apimachinery/pkg/runtime"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"

	"k8s.io/apimachinery/pkg/types"
	"sigs.k8s.io/controller-runtime/pkg/handler"
	"sigs.k8s.io/controller-runtime/pkg/reconcile"
	"sigs.k8s.io/controller-runtime/pkg/source"

	corev1alpha2 "github.com/vmware-tanzu/tanzu-framework/apis/core/v1alpha2"

	gate "github.com/vmware-tanzu/tanzu-framework/pkg/v1/sdk/features/featuregate"
	mygroupv1alpha1 "my.domain/demo-operator/api/v1alpha1"
)

// MegaCacheReconciler reconciles a MegaCache object
type MegaCacheReconciler struct {
	client.Client
	Log    logr.Logger
	Scheme *runtime.Scheme
}

//+kubebuilder:rbac:groups=mygroup.my.domain,resources=megacaches,verbs=get;list;watch;create;update;patch;delete
//+kubebuilder:rbac:groups=mygroup.my.domain,resources=megacaches/status,verbs=get;update;patch
//+kubebuilder:rbac:groups=mygroup.my.domain,resources=megacaches/finalizers,verbs=update

// For more details, check Reconcile and its Result here:
// - https://pkg.go.dev/sigs.k8s.io/controller-runtime@v0.7.2/pkg/reconcile
func (r *MegaCacheReconciler) Reconcile(ctx context.Context, req ctrl.Request) (ctrl.Result, error) {
	log := r.Log.WithValues("megacache", req.NamespacedName)
	log.Info("Starting reconcile")

	ns := req.NamespacedName.Namespace
	// Lets gate our experimental logic. Or, all of our logic. or, none.
	enabled, err := gate.FeatureActivatedInNamespace(ctx, r.Client, ns, "megacache")
	if err != nil {
		return ctrl.Result{}, err
	}
	if !enabled {
		log.Info("feature deactivated")
		return ctrl.Result{}, nil
	}

	return ctrl.Result{}, nil
}

// SetupWithManager sets up the controller with the Manager.
func (r *MegaCacheReconciler) SetupWithManager(mgr ctrl.Manager) error {
	return ctrl.NewControllerManagedBy(mgr).
		For(&mygroupv1alpha1.MegaCache{}).
		Watches(&source.Kind{Type: &corev1alpha2.Feature{}}, eventHandler(mgr.GetClient())).
		Complete(r)
}

func eventHandler(c client.Client) handler.EventHandler {
	return handler.EnqueueRequestsFromMapFunc(func(object client.Object) []reconcile.Request {
		var requests []reconcile.Request

		MegaCacheList := &mygroupv1alpha1.MegaCacheList{}
		if err := c.List(context.Background(), MegaCacheList); err != nil {
			return requests
		}
		for _, item := range MegaCacheList.Items {
			requests = append(requests, reconcile.Request{NamespacedName: types.NamespacedName{
				Name:      item.Name,
				Namespace: item.Namespace,
			}})
		}
		return requests
	})
}
