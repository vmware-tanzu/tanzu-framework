/*
Copyright 2021.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package v1alpha1

import (
        metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// MegaCacheSpec defines the desired state of MegaCache
type MegaCacheSpec struct {}

// MegaCacheStatus defines the observed state of MegaCache
type MegaCacheStatus struct {
        // INSERT ADDITIONAL STATUS FIELD - define observed state of cluster
        // Important: Run "make" to regenerate code after modifying this file
}

//+kubebuilder:object:root=true
//+kubebuilder:subresource:status
//+tanzu:feature:name=megacache,immutable=false,activated=false,discoverable=true,maturity=dev

// MegaCache is the Schema for the megacaches API
type MegaCache struct {
        metav1.TypeMeta   `json:",inline"`
        metav1.ObjectMeta `json:"metadata,omitempty"`

        Spec   MegaCacheSpec   `json:"spec,omitempty"`
        Status MegaCacheStatus `json:"status,omitempty"`
}

//+kubebuilder:object:root=true

// MegaCacheList contains a list of MegaCache
type MegaCacheList struct {
        metav1.TypeMeta `json:",inline"`
        metav1.ListMeta `json:"metadata,omitempty"`
        Items           []MegaCache `json:"items"`
}

func init() {
        SchemeBuilder.Register(&MegaCache{}, &MegaCacheList{})
}
