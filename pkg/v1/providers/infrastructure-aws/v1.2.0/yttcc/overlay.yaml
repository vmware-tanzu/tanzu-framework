#@ load("@ytt:overlay", "overlay")
#@ load("@ytt:data", "data")
#@ load("lib/helpers.star", "get_bom_data_for_tkr_name", "kubeadm_image_repo", "get_az_from_region", "get_default_tkg_bom_data")
#@ load("lib/validate.star", "validate_configuration")
#@ load("/lib/config_variable_association.star", "config_variable_association", "get_cluster_variables")

#@ validate_configuration("aws")

#@ bomDataForK8sVersion = get_bom_data_for_tkr_name()

#@ default_az_0 = get_az_from_region(data.values.AWS_REGION, data.values.AWS_NODE_AZ, "a")
#@ default_az_1 = get_az_from_region(data.values.AWS_REGION, data.values.AWS_NODE_AZ_1, "b")
#@ default_az_2 = get_az_from_region(data.values.AWS_REGION, data.values.AWS_NODE_AZ_2, "c")

#@ def get_k8s_version_from_tkr(tkr_version):
#@ return tkr_version.split('+')[0]
#@ end

#@ bomData = get_default_tkg_bom_data()

#@overlay/match by=overlay.subset({"kind":"Cluster"})
---
apiVersion: cluster.x-k8s.io/v1beta1
kind: Cluster
metadata:
  name: #@ data.values.CLUSTER_NAME
  labels:
    #@overlay/match missing_ok=True
    #@yaml/text-templated-strings
    #@ if data.values.TKG_CLUSTER_ROLE != "workload":
    cluster-role.tkg.tanzu.vmware.com/(@= data.values.TKG_CLUSTER_ROLE @): ""
    #@ end
    tkg.tanzu.vmware.com/cluster-name: #@ data.values.CLUSTER_NAME
spec:
  clusterNetwork:
    #@ if data.values.CLUSTER_API_SERVER_PORT:
    #@overlay/match missing_ok=True
    apiServerPort: #@ data.values.CLUSTER_API_SERVER_PORT
    #@ end
    pods:
      cidrBlocks:
      #@overlay/match by=overlay.index(0)
      - #@ data.values.CLUSTER_CIDR
    services:
      cidrBlocks:
      #@overlay/match by=overlay.index(0)
      - #@ data.values.SERVICE_CIDR
  topology:
    class: #@ data.values.CLUSTER_CLASS
    #! VVV TODO(vui) compute
    version: #@ data.values.KUBERNETES_VERSION
    controlPlane:
      replicas: #@ data.values.CONTROL_PLANE_MACHINE_COUNT
      metadata:
        annotations:
          #! VVV TODO(vui) os-name handling
          run.tanzu.vmware.com/resolve-os-image: #@ "ami-region={},os-name=ubuntu".format(data.values.AWS_REGION)
    workers:
      machineDeployments:
      #@overlay/match by=overlay.index(0)
      - class: tkg-worker
        name: md-0
        replicas: #@ data.values.WORKER_MACHINE_COUNT
        #@overlay/match missing_ok=True
        failureDomain: #@ default_az_0
        metadata:
          annotations:
            #! VVV TODO(vui) os-name handling
            run.tanzu.vmware.com/resolve-os-image: #@ "ami-region={},os-name=ubuntu".format(data.values.AWS_REGION)
      #@ if data.values.CLUSTER_PLAN == "prodcc":
      #@overlay/append
      - class: tkg-worker
        name: md-1
        replicas: #@ data.values.WORKER_MACHINE_COUNT_1
        failureDomain: #@ default_az_1
        #@ if data.values.NODE_MACHINE_TYPE_1:
        variables:
          overrides:
          - name: NODE_MACHINE_TYPE
            value: #@ data.values.NODE_MACHINE_TYPE_1
        #@ end
      #@overlay/append
      - class: tkg-worker
        name: md-2
        replicas: #@ data.values.WORKER_MACHINE_COUNT_2
        failureDomain: #@ default_az_2
        #@ if data.values.NODE_MACHINE_TYPE_2:
        variables:
          overrides:
          - name: NODE_MACHINE_TYPE
            value: #@ data.values.NODE_MACHINE_TYPE_2
        #@ end
      #@ end
    #@overlay/match missing_ok=True
    variables:
    #@ vars = get_cluster_variables()
    #@ for configVariable in vars:
    #@  if vars[configVariable] != None and configVariable in ["AWS_REGION", "AWS_SSH_KEY_NAME", "BASTION_HOST_ENABLED", "AWS_VPC_CIDR", "AWS_VPC_ID", "AWS_NODE_AZ", "AWS_PRIVATE_NODE_CIDR", "AWS_PRIVATE_SUBNET_ID", "AWS_PUBLIC_NODE_CIDR", "AWS_PUBLIC_SUBNET_ID", "CONTROL_PLANE_MACHINE_TYPE", "NODE_MACHINE_TYPE", "CLUSTER_NAME", "AWS_CONTROL_PLANE_OS_DISK_SIZE_GIB", "AWS_NODE_OS_DISK_SIZE_GIB", "AWS_SECURITY_GROUP_BASTION", "AWS_SECURITY_GROUP_CONTROLPLANE", "AWS_SECURITY_GROUP_APISERVER_LB", "AWS_SECURITY_GROUP_NODE", "AWS_SECURITY_GROUP_LB", "AWS_LOAD_BALANCER_SCHEME_INTERNAL", "AWS_IDENTITY_REF_KIND", "AWS_IDENTITY_REF_NAME", "CLUSTER_PLAN", "proxy", "TKG_PROXY_CA_CERT", "TKG_CUSTOM_IMAGE_REPOSITORY", "TKG_CUSTOM_IMAGE_REPOSITORY_SKIP_TLS_VERIFY", "TKG_CUSTOM_IMAGE_REPOSITORY_CA_CERTIFICATE", "ENABLE_AUDIT_LOGGING"]:
    - name: #@ configVariable
      value: #@ vars[configVariable]
    #@ end
    #@ end
    #! TODO: make this data only available while testing.
    #@overlay/append
    - name: TKR_DATA
      value:
        v1.23.5+vmware.1: #! this comes from the clusterclt for testing
          kubernetesSpec:
            version: v1.23.5+vmware.1
            imageRepository: #@ bomDataForK8sVersion.kubeadmConfigSpec.imageRepository
            etcd:
              imageTag: #@ bomDataForK8sVersion.kubeadmConfigSpec.etcd.local.imageTag
            coredns:
              imageTag: #@ bomDataForK8sVersion.kubeadmConfigSpec.dns.imageTag
          labels:
            os-name: ubuntu
            os-type: linux
            os-arch: amd64
          osImageRef:
            id: dummy-ami-id
            region: dummy-region

