#@ load("@ytt:overlay", "overlay")
#@ load("@ytt:data", "data")
#@ load("@ytt:yaml", "yaml")
#@ load("@ytt:struct", "struct")
#@ load("/lib/helpers.star", "ValuesFormatStr")

#@ def removeKappConfigCR():
#@overlay/match by=overlay.subset({"apiVersion":"kapp.k14s.io/v1alpha1","kind":"Config"})
#@overlay/remove
---
#@ end

#! skip generation of CNI for TKGs and on cluster upgrade
#@ if data.values.PROVIDER_TYPE != "tkg-service-vsphere":

#! FILTER_BY_ADDON_TYPE is used to indicate INSTALL or UPGRADE case.
#! FILTER_BY_ADDON_TYPE is empty during INSTALL and set to "kapp-controller, tanzu-addons-manager, tkr-controller" during UPGRADE.
#! The below check ensures this ytt template is run during INSTALL or when "cni/calico" is set in FILTER_BY_ADDON_TYPE.
#! "cni/calico" is never set by tanzu cli code and only set manually if anyone wants to register calico addon.

#@ if data.values.CNI == "calico" and (not data.values.FILTER_BY_ADDON_TYPE or "cni/calico" in data.values.FILTER_BY_ADDON_TYPE):
#@ load("/vendir/cni/cni.lib.yaml", "cni_calico_lib")

#@ load("calico/calico_addon_data.lib.yaml", "calicodatavalues")
#@ load("calico/calico_overlay.lib.yaml", "updatecalicoimage")

#! skip generation of CNI for workload clusters
#@ if data.values.TKG_CLUSTER_ROLE != "workload":
---
apiVersion: addons.cluster.x-k8s.io/v1beta1
kind: ClusterResourceSet
metadata:
  name: #@ "{}-calico".format(data.values.CLUSTER_NAME)
  labels:
    cluster.x-k8s.io/cluster-name: #@ data.values.CLUSTER_NAME
  annotations:
    tkg.tanzu.vmware.com/addon-type: "cni/calico"
spec:
  strategy: "ApplyOnce"
  clusterSelector:
    matchLabels:
      tkg.tanzu.vmware.com/cluster-name: #@ data.values.CLUSTER_NAME
  resources:
    - name: #@ "{}-calico-crs".format(data.values.CLUSTER_NAME)
      kind: Secret
---
apiVersion: v1
kind: Secret
metadata:
  name: #@ "{}-calico-crs".format(data.values.CLUSTER_NAME)
  annotations:
    tkg.tanzu.vmware.com/addon-type: "cni/calico"
type: addons.cluster.x-k8s.io/resource-set
stringData:
  value: #@ yaml.encode(overlay.apply(cni_calico_lib.with_data_values(calicodatavalues()).eval(), updatecalicoimage()))

#@ end

#! Add ingress rules to AWS cluster for Calico ports.
#! Add ingress rules to AWS cluster for kapp controller API port
#@overlay/match missing_ok=True,by=overlay.subset({"kind":"AWSCluster"})
---
kind: AWSCluster
spec:
  network:
    #@overlay/match missing_ok=True
    cni:
      cniIngressRules:
        - description: bgp (calico)
          fromPort: 179
          protocol: tcp
          toPort: 179
        - description: IP-in-IP (calico)
          fromPort: -1
          protocol: "4"
          toPort: 65535
        - description: kapp-controller
          fromPort: 10100
          protocol: tcp
          toPort: 10100

---
apiVersion: v1
kind: Secret
metadata:
  name: #@ "{}-calico-addon".format(data.values.CLUSTER_NAME)
  namespace: #@ data.values.NAMESPACE
  labels:
    tkg.tanzu.vmware.com/addon-name: "calico"
    tkg.tanzu.vmware.com/cluster-name: #@ data.values.CLUSTER_NAME
    clusterctl.cluster.x-k8s.io/move: ""
  annotations:
    tkg.tanzu.vmware.com/addon-type: "cni/calico"
type: tkg.tanzu.vmware.com/addon
stringData:
  values.yaml: #@ ValuesFormatStr.format(yaml.encode(calicodatavalues()))

#@ end

#! FILTER_BY_ADDON_TYPE is used to indicate INSTALL or UPGRADE case.
#! FILTER_BY_ADDON_TYPE is empty during INSTALL and set to "kapp-controller, tanzu-addons-manager, tkr-controller" during UPGRADE.
#! The below check ensures this ytt template is run during INSTALL or when "cni/antrea" is set in FILTER_BY_ADDON_TYPE.
#! "cni/antrea" is never set by tanzu cli code and only set manually if anyone wants to register antrea addon.

#@ if data.values.CNI == "antrea" and (not data.values.FILTER_BY_ADDON_TYPE or "cni/antrea" in data.values.FILTER_BY_ADDON_TYPE):
#@ load("/vendir/cni/cni.lib.yaml", "cni_antrea_lib")
#@ load("antrea/antrea_addon_data.lib.yaml", "antreadatavalues")
#@ load("antrea/antrea_overlay.lib.yaml", "updateantreaimage")

#! skip generation of CNI for workload clusters
#@ if data.values.TKG_CLUSTER_ROLE != "workload":
---
apiVersion: addons.cluster.x-k8s.io/v1beta1
kind: ClusterResourceSet
metadata:
  name: #@ "{}-antrea".format(data.values.CLUSTER_NAME)
  labels:
    cluster.x-k8s.io/cluster-name: #@ data.values.CLUSTER_NAME
  annotations:
    tkg.tanzu.vmware.com/addon-type: "cni/antrea"
spec:
  strategy: "ApplyOnce"
  clusterSelector:
    matchLabels:
      tkg.tanzu.vmware.com/cluster-name: #@ data.values.CLUSTER_NAME
  resources:
    - name: #@ "{}-antrea-crs".format(data.values.CLUSTER_NAME)
      kind: Secret
---
apiVersion: v1
kind: Secret
metadata:
  name: #@ "{}-antrea-crs".format(data.values.CLUSTER_NAME)
  annotations:
    tkg.tanzu.vmware.com/addon-type: "cni/antrea"
type: addons.cluster.x-k8s.io/resource-set
stringData:
  value: #@ yaml.encode(overlay.apply(cni_antrea_lib.with_data_values(antreadatavalues()).eval(), removeKappConfigCR(), updateantreaimage()))
#@ end

#@ end

#@ end
