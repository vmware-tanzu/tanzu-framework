#@ load("@ytt:overlay", "overlay")
#@ load("@ytt:data", "data")
#@ load("@ytt:json", "json")
#@ load("@ytt:base64", "base64")

#@ load("@ytt:yaml", "yaml")
#@ load("@ytt:struct", "struct")
#@ load("/lib/config_variable_association.star", "config_variable_association", "get_cluster_variables")

#@ load("lib/helpers.star", "get_bom_data_for_tkr_name", "kubeadm_image_repo", "get_azure_image", "get_default_tkg_bom_data")
#@ load("lib/validate.star", "validate_configuration")

#@ validate_configuration("azure")

#@ bomDataForK8sVersion = get_bom_data_for_tkr_name()

#@ def get_custom_tags():
#@ tags = {}
#@ custom_tags = data.values.AZURE_CUSTOM_TAGS.split(",") if data.values.AZURE_CUSTOM_TAGS else []
#@ for tag in custom_tags:
#@  tag_entry = tag.split('=', 1)
#@  tags[tag_entry[0].strip()] = tag_entry[1].strip() if len(tag_entry) >= 2 else ""
#@ end
#@ return tags
#@ end

#@ def get_identity_name():
#@ if data.values.TKG_CLUSTER_ROLE == "management":
#@   return data.values.AZURE_IDENTITY_NAME or "{}-identity".format(data.values.CLUSTER_NAME)
#@ end
#@
#@ return data.values.AZURE_IDENTITY_NAME
#@ end

#@ def get_identity_namespace():
#@ if data.values.TKG_CLUSTER_ROLE == "management":
#@   return "tkg-system"
#@ end
#@
#@ return data.values.AZURE_IDENTITY_NAMESPACE
#@ end
#!
#@ def get_k8s_version_from_tkr(tkr_version):
#@ return tkr_version.split('+')[0]
#@ end

#@ bomData = get_default_tkg_bom_data()

#@overlay/match by=overlay.subset({"kind":"Cluster"})
---
apiVersion: cluster.x-k8s.io/v1beta1
kind: Cluster
metadata:
  name: #@ data.values.CLUSTER_NAME
  labels:
    #@overlay/match missing_ok=True
    #@yaml/text-templated-strings
    #@ if data.values.TKG_CLUSTER_ROLE != "workload":
    cluster-role.tkg.tanzu.vmware.com/(@= data.values.TKG_CLUSTER_ROLE @): ""
    #@ end
    tkg.tanzu.vmware.com/cluster-name: #@ data.values.CLUSTER_NAME
    #@overlay/match missing_ok=True
    tanzuKubernetesRelease: #@ data.values.KUBERNETES_RELEASE
spec:
  clusterNetwork:
    #@ if data.values.CLUSTER_API_SERVER_PORT:
    #@overlay/match missing_ok=True
    apiServerPort: #@ data.values.CLUSTER_API_SERVER_PORT
    #@ end
    pods:
      cidrBlocks:
      #@overlay/match by=overlay.index(0)
      - #@ data.values.CLUSTER_CIDR
    services:
      cidrBlocks:
      #@overlay/match by=overlay.index(0)
      - #@ data.values.SERVICE_CIDR
  topology:
    class: #@ data.values.CLUSTER_CLASS
    #! VVV TODO(vui) compute
    version: #@ data.values.KUBERNETES_VERSION
    controlPlane:
      replicas: #@ data.values.CONTROL_PLANE_MACHINE_COUNT
    workers:
      machineDeployments:
      #@overlay/match by=overlay.index(0)
      - class: tkg-worker
        name: md-0
        replicas: #@ data.values.WORKER_MACHINE_COUNT
        #@overlay/match missing_ok=True
        failureDomain: #@ str(data.values.AZURE_NODE_AZ) or "1"
      #@ if data.values.CLUSTER_PLAN == "prodcc":
      #@overlay/append
      - class: tkg-worker
        name: md-1
        replicas: #@ data.values.WORKER_MACHINE_COUNT_1
        failureDomain: #@ str(data.values.AZURE_NODE_AZ_1) or "2"
      #@overlay/append
      - class: tkg-worker
        name: md-2
        replicas: #@ data.values.WORKER_MACHINE_COUNT_2
        failureDomain: #@ str(data.values.AZURE_NODE_AZ_2) or "3"
      #@ end
    #@overlay/match missing_ok=True
    variables:
    #@ vars = get_cluster_variables()
    #@ for configVariable in vars:
      #@  if vars[configVariable] != None and configVariable in ["AZURE_LOCATION", "AZURE_VNET_NAME", "AZURE_VNET_CIDR", "AZURE_CONTROL_PLANE_SUBNET_NAME", "AZURE_CONTROL_PLANE_SUBNET_SECURITY_GROUP", "AZURE_CONTROL_PLANE_SUBNET_CIDR", "AZURE_NODE_SUBNET_NAME", "AZURE_NODE_SUBNET_SECURITY_GROUP", "AZURE_NODE_SUBNET_CIDR", "AZURE_RESOURCE_GROUP", "AZURE_VNET_RESOURCE_GROUP", "AZURE_SUBSCRIPTION_ID", "CLUSTER_NAME", "AZURE_IDENTITY_NAME", "AZURE_IDENTITY_NAMESPACE", "TKG_CLUSTER_ROLE", "AZURE_ENVIRONMENT", "AZURE_SSH_PUBLIC_KEY_B64", "AZURE_CONTROL_PLANE_MACHINE_TYPE", "AZURE_NODE_MACHINE_TYPE", "AZURE_ENABLE_ACCELERATED_NETWORKING", "AZURE_ENABLE_NODE_DATA_DISK", "AZURE_CONTROL_PLANE_OS_DISK_STORAGE_ACCOUNT_TYPE", "AZURE_NODE_OS_DISK_STORAGE_ACCOUNT_TYPE", "AZURE_CONTROL_PLANE_OS_DISK_SIZE_GIB", "AZURE_CONTROL_PLANE_DATA_DISK_SIZE_GIB", "AZURE_NODE_OS_DISK_SIZE_GIB", "AZURE_NODE_DATA_DISK_SIZE_GIB", "AZURE_ENABLE_PRIVATE_CLUSTER", "AZURE_ENABLE_CONTROL_PLANE_OUTBOUND_LB", "AZURE_ENABLE_NODE_OUTBOUND_LB", "AZURE_FRONTEND_PRIVATE_IP", "AZURE_CONTROL_PLANE_OUTBOUND_LB_FRONTEND_IP_COUNT", "AZURE_NODE_OUTBOUND_LB_FRONTEND_IP_COUNT", "proxy", "TKG_PROXY_CA_CERT", "TKG_CUSTOM_IMAGE_REPOSITORY", "TKG_CUSTOM_IMAGE_REPOSITORY_SKIP_TLS_VERIFY", "TKG_CUSTOM_IMAGE_REPOSITORY_CA_CERTIFICATE", "ENABLE_AUDIT_LOGGING", "AZURE_CUSTOM_TAGS", "AZURE_NODE_OUTBOUND_LB_IDLE_TIMEOUT_IN_MINUTES"]:
      - name: #@ configVariable
        value: #@ vars[configVariable]
      #@ end
    #@ end


#@ if data.values.TKG_CLUSTER_ROLE == "management":
---
apiVersion: v1
kind: Secret
metadata:
  name: #@ "{}-identity-secret".format(data.values.CLUSTER_NAME)
  namespace: tkg-system
type: Opaque
data:
  clientSecret: #@ base64.encode(data.values.AZURE_CLIENT_SECRET)
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AzureClusterIdentity
metadata:
  labels:
    clusterctl.cluster.x-k8s.io/move-hierarchy: "true"
  name: #@ data.values.AZURE_IDENTITY_NAME or "{}-identity".format(data.values.CLUSTER_NAME)
  namespace: tkg-system
spec:
  allowedNamespaces: {}
  clientID: #@ data.values.AZURE_CLIENT_ID
  clientSecret:
    name: #@ "{}-identity-secret".format(data.values.CLUSTER_NAME)
    namespace: tkg-system
  tenantID: #@ data.values.AZURE_TENANT_ID
  type: ServicePrincipal
#@ end
