apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: VSphereClusterTemplate
metadata:
  name: 'tkg-vsphere-infrastructure'
  namespace: '${ NAMESPACE }'
spec:
  template:
    spec:
      controlPlaneEndpoint:
        host: '${VSPHERE_CONTROL_PLANE_ENDPOINT}'
        port: 6443
      identityRef:
        kind: Secret
        name: '${ CLUSTER_NAME }'
      server: '${ VSPHERE_SERVER }'
      thumbprint: '${ VSPHERE_TLS_THUMBPRINT }'
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: VSphereMachineTemplate
metadata:
  name: 'tkg-vsphere-control-plane'
  namespace: '${ NAMESPACE }'
spec:
  template:
    spec:
      cloneMode: '${ VSPHERE_CLONE_MODE }'
      datacenter: '${ VSPHERE_DATACENTER }'
      datastore: '${ VSPHERE_DATASTORE }'
      storagePolicyName: '${ VSPHERE_STORAGE_POLICY_ID }'
      diskGiB: ${VSPHERE_CONTROL_PLANE_DISK_GIB}
      folder: '${ VSPHERE_FOLDER }'
      memoryMiB: ${VSPHERE_CONTROL_PLANE_MEM_MIB}
      network:
        devices:
        - dhcp4: true
          networkName: '${ VSPHERE_NETWORK }'
      numCPUs: ${ VSPHERE_CONTROL_PLANE_NUM_CPUS }
      resourcePool: '${ VSPHERE_RESOURCE_POOL }'
      server: '${ VSPHERE_SERVER }'
      template: '${ VSPHERE_TEMPLATE }'
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: VSphereMachineTemplate
metadata:
  name: 'tkg-vsphere-worker'
  namespace: '${ NAMESPACE }'
spec:
  template:
    spec:
      cloneMode: '${ VSPHERE_CLONE_MODE }'
      datacenter: '${ VSPHERE_DATACENTER }'
      datastore: '${ VSPHERE_DATASTORE }'
      storagePolicyName: '${ VSPHERE_STORAGE_POLICY_ID }'
      diskGiB: ${VSPHERE_WORKER_DISK_GIB}
      folder: '${ VSPHERE_FOLDER }'
      memoryMiB: ${VSPHERE_WORKER_MEM_MIB}
      network:
        devices:
        - dhcp4: true
          networkName: '${ VSPHERE_NETWORK }'
      numCPUs: ${ VSPHERE_WORKER_NUM_CPUS }
      resourcePool: '${ VSPHERE_RESOURCE_POOL }'
      server: '${ VSPHERE_SERVER }'
      template: '${ VSPHERE_TEMPLATE }'
---
apiVersion: controlplane.cluster.x-k8s.io/v1beta1
kind: KubeadmControlPlaneTemplate
metadata:
  name: 'tkg-vsphere-kcp'
  namespace: '${ NAMESPACE }'
spec:
  template:
    spec:
      machineTemplate:
        infrastructureRef:
          apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
          kind: VSphereMachineTemplate
          name: 'tkg-vsphere-control-plane'
      kubeadmConfigSpec:
        useExperimentalRetryJoin: true
        clusterConfiguration:
          imageRepository: '${ _TKG_K8S_IMAGE_REPOSITORY }'
          etcd:
            local:
              dataDir: /var/lib/etcd
              imageRepository: '${ _TKG_ETCD_IMAGE_REPOSITORY }'
              imageTag: '${ _TKG_ETCD_IMAGE_TAG }'
              extraArgs:
                cipher-suites: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
          dns:
            imageRepository: '${ _TKG_COREDNS_IMAGE_REPOSITORY }'
            imageTag: '${ _TKG_COREDNS_IMAGE_TAG }'
          apiServer:
            timeoutForControlPlane: "8m0s"
            extraVolumes: []
            extraArgs:
              cloud-provider: external
              tls-cipher-suites: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
          controllerManager:
            extraArgs:
              cloud-provider: external
              tls-cipher-suites: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
          scheduler:
            extraArgs:
              tls-cipher-suites: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
        files: []
        initConfiguration:
          nodeRegistration:
            criSocket: /var/run/containerd/containerd.sock
            kubeletExtraArgs:
              cloud-provider: external
              tls-cipher-suites: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
            name: '{{ ds.meta_data.hostname }}'
        joinConfiguration:
          nodeRegistration:
            criSocket: /var/run/containerd/containerd.sock
            kubeletExtraArgs:
              cloud-provider: external
              tls-cipher-suites: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
            name: '{{ ds.meta_data.hostname }}'
        preKubeadmCommands:
        - hostname "{{ ds.meta_data.hostname }}"
        - echo "::1         ipv6-localhost ipv6-loopback" >/etc/hosts
        - echo "127.0.0.1   localhost" >>/etc/hosts
        - echo "127.0.0.1   {{ ds.meta_data.hostname }}" >>/etc/hosts
        - echo "{{ ds.meta_data.hostname }}" >/etc/hostname
        users:
        - name: capv
          sshAuthorizedKeys:
          - '${ VSPHERE_SSH_AUTHORIZED_KEY }'
          sudo: ALL=(ALL) NOPASSWD:ALL
      replicas: ${ CONTROL_PLANE_MACHINE_COUNT }
      version: '${ KUBERNETES_VERSION }'
---
apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
kind: KubeadmConfigTemplate
metadata:
  name: 'tkg-vsphere-md-0'
  namespace: '${ NAMESPACE }'
spec:
  template:
    spec:
      useExperimentalRetryJoin: true
      joinConfiguration:
        nodeRegistration:
          criSocket: /var/run/containerd/containerd.sock
          kubeletExtraArgs:
            cloud-provider: external
            tls-cipher-suites: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
          name: '{{ ds.meta_data.hostname }}'
      preKubeadmCommands:
      - hostname "{{ ds.meta_data.hostname }}"
      - echo "::1         ipv6-localhost ipv6-loopback" >/etc/hosts
      - echo "127.0.0.1   localhost" >>/etc/hosts
      - echo "127.0.0.1   {{ ds.meta_data.hostname }}" >>/etc/hosts
      - echo "{{ ds.meta_data.hostname }}" >/etc/hostname
      files: []
      users:
      - name: capv
        sshAuthorizedKeys:
        - '${ VSPHERE_SSH_AUTHORIZED_KEY }'
        sudo: ALL=(ALL) NOPASSWD:ALL
---
apiVersion: v1
kind: Secret
metadata:
  name: '${ CLUSTER_NAME }'
  namespace: '${ NAMESPACE }'
stringData:
  username: '${ VSPHERE_USERNAME }'
  password: '${ VSPHERE_PASSWORD }'
---
apiVersion: cluster.x-k8s.io/v1beta1
kind: ClusterClass
metadata:
  name: tkg-vsphere-default
  namespace: '${ NAMESPACE }'
spec:
  controlPlane:
    ref:
      apiVersion: controlplane.cluster.x-k8s.io/v1beta1
      kind: KubeadmControlPlaneTemplate
      name: 'tkg-vsphere-kcp'
    machineInfrastructure:
      ref:
        kind: VSphereMachineTemplate
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        name: 'tkg-vsphere-control-plane'
    machineHealthCheck:
  infrastructure:
    ref:
      apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
      kind: VSphereClusterTemplate
      name: 'tkg-vsphere-infrastructure'
      namespace: '${ NAMESPACE }'
  workers:
    machineDeployments:
      - class: tkg-worker
        machineHealthCheck:
        template:
          bootstrap:
            ref:
              kind: KubeadmConfigTemplate
              apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
              name: 'tkg-vsphere-md-0'
              namespace: '${ NAMESPACE }'
          infrastructure:
            ref:
              kind: VSphereMachineTemplate
              apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
              name: 'tkg-vsphere-worker'
              namespace: '${ NAMESPACE }'
  variables:
  - name: CONTROL_PLANE_MACHINE
    schema:
      openAPIV3Schema:
        type: object
        properties:
          numCPUs:
            type: integer
          diskGiB:
            type: integer
          memoryMiB:
            type: integer
        default:
          numCPUs: 2
          diskGiB: 40
          memoryMiB: 8192
  - name: CONTROL_PLANE_MACHINE_COUNT
    required: true
    schema:
      openAPIV3Schema:
        type: integer
  - name: VSPHERE_CONTROL_PLANE_NUM_CPUS
    schema:
      openAPIV3Schema:
        type: integer
        default: 2
  - name: VSPHERE_CONTROL_PLANE_DISK_GIB
    schema:
      openAPIV3Schema:
        type: integer
        default: 40
  - name: VSPHERE_CONTROL_PLANE_MEM_MIB
    schema:
      openAPIV3Schema:
        type: integer
        default: 8192
  - name: VSPHERE_WORKER_NUM_CPUS
    schema:
      openAPIV3Schema:
        type: integer
        default: 2
  - name: VSPHERE_WORKER_DISK_GIB
    schema:
      openAPIV3Schema:
        type: integer
        default: 40
  - name: VSPHERE_WORKER_MEM_MIB
    schema:
      openAPIV3Schema:
        type: integer
        default: 4096
  - name: VSPHERE_CLONE_MODE
    schema:
      openAPIV3Schema:
        type: string
        default: fullClone
  - name: VSPHERE_NETWORK
    schema:
      openAPIV3Schema:
        type: string
        default: VMNetwork
  - name: VSPHERE_DATACENTER
    required: true
    schema:
      openAPIV3Schema:
        type: string
        default: ""
  - name: VSPHERE_DATASTORE
    required: true
    schema:
      openAPIV3Schema:
        type: string
        default: ""
  - name: VSPHERE_FOLDER
    required: true
    schema:
      openAPIV3Schema:
        type: string
        default: ""
  - name: VSPHERE_RESOURCE_POOL
    required: true
    schema:
      openAPIV3Schema:
        type: string
        default: ""
  - name: VSPHERE_STORAGE_POLICY_ID
    schema:
      openAPIV3Schema:
        type: string
        default: ""
  - name: VSPHERE_SERVER
    required: true
    schema:
      openAPIV3Schema:
        type: string
  - name: VSPHERE_TLS_THUMBPRINT
    schema:
      openAPIV3Schema:
        type: string
        default: ""
  - name: VSPHERE_SSH_AUTHORIZED_KEY
    schema:
      openAPIV3Schema:
        type: string
        default: ""
  - name: VSPHERE_TEMPLATE
    required: true
    schema:
      openAPIV3Schema:
        type: string
        default: ""
  - name: VSPHERE_WINDOWS_TEMPLATE
    schema:
      openAPIV3Schema:
        type: string
        default: ""
  - name: VSPHERE_CONTROL_PLANE_ENDPOINT
    required: true
    schema:
      openAPIV3Schema:
        type: string
        default: ""
  - name: VIP_NETWORK_INTERFACE
    schema:
      openAPIV3Schema:
        type: string
        default: eth0
  - name: proxy
    schema:
      openAPIV3Schema:
        type: object
        properties:
          httpProxy:
            type: string
            default: ""
          httpsProxy:
            type: string
            default: ""
          noProxy:
            type: array
            items:
              type: string
        required:
          - httpProxy
          - httpsProxy
          - noProxy
  - name: TKG_PROXY_CA_CERT
    schema:
      openAPIV3Schema:
        type: string
        default: ""
  - name: TKG_CUSTOM_IMAGE_REPOSITORY
    schema:
      openAPIV3Schema:
        type: string
        default: ""
  - name: TKG_CUSTOM_IMAGE_REPOSITORY_CA_CERTIFICATE
    schema:
      openAPIV3Schema:
        type: string
        default: ""
  - name: TKG_CUSTOM_IMAGE_REPOSITORY_SKIP_TLS_VERIFY
    schema:
      openAPIV3Schema:
        type: boolean
        default: false
  - name: TKG_IP_FAMILY
    schema:
      openAPIV3Schema:
        type: string
        default: ipv4
  - name: AVI_CONTROL_PLANE_HA_PROVIDER
    schema:
      openAPIV3Schema:
        type: boolean
        default: false
  - name: CLUSTER_API_SERVER_PORT
    schema:
      openAPIV3Schema:
        type: integer
  - name: SERVICE_CIDR
    schema:
      openAPIV3Schema:
        type: string
  - name: CLUSTER_CIDR
    schema:
      openAPIV3Schema:
        type: string
  - name: CONTROL_PLANE_NODE_NAMESERVERS
    schema:
      openAPIV3Schema:
        type: string
        default: ""
  - name: WORKER_NODE_NAMESERVERS
    schema:
      openAPIV3Schema:
        type: string
        default: ""
  - name: ENABLE_AUDIT_LOGGING
    schema:
      openAPIV3Schema:
        type: boolean
        default: false
  - name: TKR_KUBERNETES_SPEC
    schema:
      openAPIV3Schema:
        type: object
        properties:
          KubeVIP:
            type: object
            properties:
              ImageRepository:
                type: string
              ImageTag:
                type: string
  - name: CLUSTER_NAME
    required: true
    schema:
      openAPIV3Schema:
        type: string
  patches:
  - name: vsphereClusterTemplate
    definitions:
    - selector:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: VSphereClusterTemplate
        matchResources:
          infrastructureCluster: true
      jsonPatches:
      - op: replace
        path: /spec/template/spec/controlPlaneEndpoint/host
        valueFrom:
          variable: VSPHERE_CONTROL_PLANE_ENDPOINT
      - op: replace
        path: /spec/template/spec/thumbprint
        valueFrom:
          variable: VSPHERE_TLS_THUMBPRINT
      - op: replace
        path: /spec/template/spec/server
        valueFrom:
          variable: VSPHERE_SERVER
      - op: replace
        path: /spec/template/spec/identityRef/name
        valueFrom:
          variable: CLUSTER_NAME
  - name: controlPlaneMachineTemplate
    definitions:
    - selector:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: VSphereMachineTemplate
        matchResources:
          controlPlane: true
      jsonPatches:
      - op: replace
        path: /spec/template/spec/numCPUs
        valueFrom:
          variable: VSPHERE_CONTROL_PLANE_NUM_CPUS
      - op: replace
        path: /spec/template/spec/diskGiB
        valueFrom:
          variable: VSPHERE_CONTROL_PLANE_DISK_GIB
      - op: replace
        path: /spec/template/spec/memoryMiB
        valueFrom:
          variable: VSPHERE_CONTROL_PLANE_MEM_MIB
      - op: replace
        path: /spec/template/spec/cloneMode
        valueFrom:
          variable: VSPHERE_CLONE_MODE
      - op: replace
        path: /spec/template/spec/network
        valueFrom:
          variable: VSPHERE_NETWORK
      - op: replace
        path: /spec/template/spec/template
        valueFrom:
          variable: VSPHERE_TEMPLATE
      - op: replace
        path: /spec/template/spec/datacenter
        valueFrom:
          variable: VSPHERE_DATACENTER
      - op: replace
        path: /spec/template/spec/datastore
        valueFrom:
          variable: VSPHERE_DATASTORE
      - op: replace
        path: /spec/template/spec/folder
        valueFrom:
          variable: VSPHERE_FOLDER
      - op: replace
        path: /spec/template/spec/resourcePool
        valueFrom:
          variable: VSPHERE_RESOURCE_POOL
      - op: replace
        path: /spec/template/spec/storagePolicyName
        valueFrom:
          variable: VSPHERE_STORAGE_POLICY_ID
      - op: replace
        path: /spec/template/spec/server
        valueFrom:
          variable: VSPHERE_SERVER
  - name: workerMachineTemplate
    definitions:
    - selector:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: VSphereMachineTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - tkg-worker
      jsonPatches:
      - op: replace
        path: /spec/template/spec/numCPUs
        valueFrom:
          variable: VSPHERE_WORKER_NUM_CPUS
      - op: replace
        path: /spec/template/spec/diskGiB
        valueFrom:
          variable: VSPHERE_WORKER_DISK_GIB
      - op: replace
        path: /spec/template/spec/memoryMiB
        valueFrom:
          variable: VSPHERE_WORKER_MEM_MIB
      - op: replace
        path: /spec/template/spec/cloneMode
        valueFrom:
          variable: VSPHERE_CLONE_MODE
      - op: replace
        path: /spec/template/spec/network
        valueFrom:
          variable: VSPHERE_NETWORK
      - op: replace
        path: /spec/template/spec/template
        valueFrom:
          variable: VSPHERE_TEMPLATE
      - op: replace
        path: /spec/template/spec/datacenter
        valueFrom:
          variable: VSPHERE_DATACENTER
      - op: replace
        path: /spec/template/spec/datastore
        valueFrom:
          variable: VSPHERE_DATASTORE
      - op: replace
        path: /spec/template/spec/folder
        valueFrom:
          variable: VSPHERE_FOLDER
      - op: replace
        path: /spec/template/spec/resourcePool
        valueFrom:
          variable: VSPHERE_RESOURCE_POOL
      - op: replace
        path: /spec/template/spec/storagePolicyName
        valueFrom:
          variable: VSPHERE_STORAGE_POLICY_ID
      - op: replace
        path: /spec/template/spec/server
        valueFrom:
          variable: VSPHERE_SERVER
  - name: kubeadmControlPlaneTemplate
    definitions:
    - selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
      jsonPatches:
      - op: replace
        path: /spec/template/spec/kubeadmConfigSpec/users
        valueFrom:
          template: |
            - name: capv
              sshAuthorizedKeys:
              - '{{.VSPHERE_SSH_AUTHORIZED_KEY}}'
              sudo: ALL=(ALL) NOPASSWD:ALL
      - op: replace
        path: /spec/template/spec/replicas
        valueFrom:
          variable: CONTROL_PLANE_MACHINE_COUNT
  - name: KubeadmConfigTemplate
    definitions:
    - selector:
        apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
        kind: KubeadmConfigTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - tkg-worker
      jsonPatches:
      - op: replace
        path: /spec/template/spec/users
        valueFrom:
          template: |
            - name: capv
              sshAuthorizedKeys:
              - '{{.VSPHERE_SSH_AUTHORIZED_KEY}}'
              sudo: ALL=(ALL) NOPASSWD:ALL
  - name: kubeVIPPod
    enabledIf: '{{not .AVI_CONTROL_PLANE_HA_PROVIDER}}'
    definitions:
    - selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
      jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/files/-
        valueFrom:
          # TODO fix the image path
          template: |
            owner: root:root
            path: /etc/kubernetes/manifests/kube-vip.yaml
            content: |
              ---
              apiVersion: v1
              kind: Pod
              metadata:
                creationTimestamp: null
                name: kube-vip
                namespace: kube-system
              spec:
                containers:
                - args:
                  - manager
                  env:
                  - name: cp_enable
                    value: "true"
                  - name: vip_arp
                    value: "true"
                  - name: vip_leaderelection
                    value: "true"
                  - name: address
                    value: {{.VSPHERE_CONTROL_PLANE_ENDPOINT}}
                  {{- if and (not .AVI_CONTROL_PLANE_HA_PROVIDER) .CLUSTER_API_SERVER_PORT }}
                  - name: port
                    value: {{.CLUSTER_API_SERVER_PORT}}
                  {{- end }}
                  - name: vip_interface
                    value: {{.VIP_NETWORK_INTERFACE}}
                  - name: vip_leaseduration
                    value: "30"
                  - name: vip_renewdeadline
                    value: "20"
                  - name: vip_retryperiod
                    value: "4"
                  image: {{.TKR_KUBERNETES_SPEC.KubeVIP.ImageRepository}}/kube-vip:{{.TKR_KUBERNETES_SPEC.KubeVIP.ImageTag}}
                  imagePullPolicy: IfNotPresent
                  name: kube-vip
                  resources: {}
                  securityContext:
                    capabilities:
                      add:
                      - NET_ADMIN
                      - NET_RAW
                  volumeMounts:
                  - mountPath: /etc/kubernetes/admin.conf
                    name: kubeconfig
                hostNetwork: true
                hostAliases:
                - hostnames:
                  - kubernetes
                  ip: 127.0.0.1
                volumes:
                - hostPath:
                    path: /etc/kubernetes/admin.conf
                    type: FileOrCreate
                  name: kubeconfig
              status: {}
  - name: networkConfiguration
    definitions:
    - selector:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: VSphereMachineTemplate
        matchResources:
          controlPlane: true
      jsonPatches:
      - op: replace
        path: /spec/template/spec/network
        valueFrom:
          template: |
            devices:
            - networkName: {{.VSPHERE_NETWORK}}
              {{if .CONTROL_PLANE_NODE_NAMESERVERS}}nameservers: {{.CONTROL_PLANE_NODE_NAMESERVERS}}{{end}}
              dhcp4: {{or (eq "ipv4" .TKG_IP_FAMILY) (or (eq "ipv4,ipv6" .TKG_IP_FAMILY) (eq "ipv6,ipv4" .TKG_IP_FAMILY))}}
              dhcp6: {{or (eq "ipv6" .TKG_IP_FAMILY) (or (eq "ipv4,ipv6" .TKG_IP_FAMILY) (eq "ipv6,ipv4" .TKG_IP_FAMILY))}}
    - selector:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: VSphereMachineTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - tkg-worker
      jsonPatches:
      - op: add
        path: /spec/template/spec/network
        valueFrom:
          template: |
            devices:
            - networkName: {{.VSPHERE_NETWORK}}
              {{if .WORKER_NODE_NAMESERVERS}}nameservers: {{.WORKER_NODE_NAMESERVERS}}{{end}}
              dhcp4: {{or (eq "ipv4" .TKG_IP_FAMILY) (or (eq "ipv4,ipv6" .TKG_IP_FAMILY) (eq "ipv6,ipv4" .TKG_IP_FAMILY))}}
              dhcp6: {{or (eq "ipv6" .TKG_IP_FAMILY) (or (eq "ipv4,ipv6" .TKG_IP_FAMILY) (eq "ipv6,ipv4" .TKG_IP_FAMILY))}}
  - name: clusterApiServerPort
    enabledIf: '{{if and .CLUSTER_API_SERVER_PORT}}true{{end}}'
    definitions:
    - selector:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: VSphereClusterTemplate
        matchResources:
          infrastructureCluster: true
      jsonPatches:
      - op: replace
        path: /spec/template/spec/controlPlaneEndpoint/port
        valueFrom:
          variable: CLUSTER_API_SERVER_PORT
  - name: controlPlaneEndpointConfiguration
    enabledIf: '{{and (not .AVI_CONTROL_PLANE_HA_PROVIDER) (ne nil .CLUSTER_API_SERVER_PORT)}}'
    definitions:
    - selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
      jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/initConfiguration/localAPIEndpoint
        valueFrom:
          template: |
            {{if or (eq "ipv6" .TKG_IP_FAMILY) (eq "ipv6,ipv4" .TKG_IP_FAMILY) }}advertiseAddress: '::/0'
            {{- else }}
            advertiseAddress: '0.0.0.0'
            {{- end }}
            bindPort: {{.CLUSTER_API_SERVER_PORT}}
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/joinConfiguration/controlPlane
        valueFrom:
          template: |
            localAPIEndpoint:
              {{if or (eq "ipv6" .TKG_IP_FAMILY) (eq "ipv6,ipv4" .TKG_IP_FAMILY) }}advertiseAddress: '::/0'
              {{- else }}
              advertiseAddress: '0.0.0.0'
              {{- end }}
              bindPort: {{.CLUSTER_API_SERVER_PORT}}
  - name: bindAddressConfiguration
    enabledIf: '{{eq "ipv6,ipv4" .TKG_IP_FAMILY}}'
    definitions:
    - selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
      jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/initConfiguration/nodeRegistration/kubeletExtraArgs
        value:
          node-ip: "::"
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/joinConfiguration/nodeRegistration/kubeletExtraArgs
        value:
          node-ip: "::"
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
        valueFrom:
          template: |
            advertise-address: {{.VSPHERE_CONTROL_PLANE_ENDPOINT}}
            bind-address: "::"
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/controllerManager/extraArgs
        value:
          bind-address: "::"
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguratio/scheduler/extraArgs
        value:
          bind-address: "::"
    - selector:
        apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
        kind: KubeadmConfigTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - tkg-worker
      jsonPatches:
      - op: add
        path: /spec/template/spec/joinConfiguration/nodeRegistration/kubeletExtraArgs
        value:
          node-ip: "::"
  - name: ipv6Hack
    enabledIf: '{{eq "ipv6" .TKG_IP_FAMILY}}'
    definitions:
    - selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
      jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/postKubeadmCommands/-
        value: sed -i '/listen-client-urls/ s/$/,https:\/\/127.0.0.1:2379/' /etc/kubernetes/manifests/etcd.yaml
  - name: httpProxy
    enabledIf: '{{not (not .proxy)}}'
    definitions:
    - selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
      jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/files/-
        valueFrom:
          template: |
            content: |
              [Service]
              Environment="HTTP_PROXY={{.proxy.httpProxy}}"
              Environment="HTTPS_PROXY={{.proxy.httpsProxy}}"
              Environment="NO_PROXY={{- range .proxy.noProxy}}{{.}},{{- end}}{{.SERVICE_CIDR}},{{.CLUSTER_CIDR}},localhost,127.0.0.1
            {{- if or (eq "ipv6" .TKG_IP_FAMILY) (or (eq "ipv4,ipv6" .TKG_IP_FAMILY) (eq "ipv6,ipv4" .TKG__IP_FAMILY))}},::1{{end}},.scv,.svc.cluster.local"
            owner: root:root
            path: /etc/systemd/system/containerd.service.d/http-proxy.conf
            permissions: "0640"
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/files/-
        valueFrom:
          template: |
            content: |
              [Service]
              Environment="HTTP_PROXY={{.proxy.httpProxy}}"
              Environment="HTTPS_PROXY={{.proxy.httpsProxy}}"
              Environment="NO_PROXY={{- range .proxy.noProxy}}{{.}},{{- end}}{{.SERVICE_CIDR}},{{.CLUSTER_CIDR}},localhost,127.0.0.1
            {{- if or (eq "ipv6" .TKG_IP_FAMILY) (or (eq "ipv4,ipv6" .TKG_IP_FAMILY) (eq "ipv6,ipv4" .TKG__IP_FAMILY))}},::1{{end}},.scv,.svc.cluster.local"
            owner: root:root
            path: /usr/lib/systemd/system/kubelet.service.d/http-proxy.conf
            permissions: "0640"
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        value: systemctl daemon-reload
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        value: systemctl stop containerd
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        value: systemctl start containerd
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        valueFrom:
          template: |
            export HTTP_PROXY={{.proxy.httpProxy}}
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        valueFrom:
          template: |
            export HTTPS_PROXY={{.proxy.httpsProxy}}
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        valueFrom:
          template: |
            export NO_PROXY={{- range .proxy.noProxy}}{{.}},{{- end}}{{.SERVICE_CIDR}},{{.CLUSTER_CIDR}},localhost,127.0.0.1
            {{- if or (eq "ipv6" .TKG_IP_FAMILY) (or (eq "ipv4,ipv6" .TKG_IP_FAMILY) (eq "ipv6,ipv4" .TKG__IP_FAMILY))}},::1{{end}},.scv,.svc.cluster.local
    - selector:
        apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
        kind: KubeadmConfigTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - tkg-worker
      jsonPatches:
      - op: add
        path: /spec/template/spec/files/-
        valueFrom:
          template: |
            content: |
              [Service]
              Environment="HTTP_PROXY={{.proxy.httpProxy}}"
              Environment="HTTPS_PROXY={{.proxy.httpsProxy}}"
              Environment="NO_PROXY={{- range .proxy.noProxy}}{{.}},{{- end}}{{.SERVICE_CIDR}},{{.CLUSTER_CIDR}},localhost,127.0.0.1
            {{- if or (eq "ipv6" .TKG_IP_FAMILY) (or (eq "ipv4,ipv6" .TKG_IP_FAMILY) (eq "ipv6,ipv4" .TKG__IP_FAMILY))}},::1{{end}},.scv,.svc.cluster.local"
            owner: root:root
            path: /etc/systemd/system/containerd.service.d/http-proxy.conf
            permissions: "0640"
      - op: add
        path: /spec/template/spec/files/-
        valueFrom:
          template: |
            content: |
              [Service]
              Environment="HTTP_PROXY={{.proxy.httpProxy}}"
              Environment="HTTPS_PROXY={{.proxy.httpsProxy}}"
              Environment="NO_PROXY={{- range .proxy.noProxy}}{{.}},{{- end}}{{.SERVICE_CIDR}},{{.CLUSTER_CIDR}},localhost,127.0.0.1
            {{- if or (eq "ipv6" .TKG_IP_FAMILY) (or (eq "ipv4,ipv6" .TKG_IP_FAMILY) (eq "ipv6,ipv4" .TKG__IP_FAMILY))}},::1{{end}},.scv,.svc.cluster.local"
            owner: root:root
            path: /usr/lib/systemd/system/kubelet.service.d/http-proxy.conf
            permissions: "0640"
      - op: add
        path: /spec/template/spec/preKubeadmCommands/-
        value: systemctl daemon-reload
      - op: add
        path: /spec/template/spec/preKubeadmCommands/-
        value: systemctl restart containerd
      - op: add
        path: /spec/template/spec/preKubeadmCommands/-
        valueFrom:
          template: |
            export HTTP_PROXY={{.proxy.httpProxy}}
      - op: add
        path: /spec/template/spec/preKubeadmCommands/-
        valueFrom:
          template: |
            export HTTPS_PROXY={{.proxy.httpsProxy}}
      - op: add
        path: /spec/template/spec/preKubeadmCommands/-
        valueFrom:
          template: |
            export NO_PROXY={{- range .proxy.noProxy}}{{.}},{{- end}}{{.SERVICE_CIDR}},{{.CLUSTER_CIDR}},localhost,127.0.0.1
            {{- if or (eq "ipv6" .TKG_IP_FAMILY) (or (eq "ipv4,ipv6" .TKG_IP_FAMILY) (eq "ipv6,ipv4" .TKG__IP_FAMILY))}},::1{{end}},.scv,.svc.cluster.local
  - name: auditLogging
    enabledIf: '{{.ENABLE_AUDIT_LOGGING}}'
    definitions:
    - selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
      jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs/-
        value:
          audit-log-path: /var/log/kubernetes/audit.log
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs/-
        value:
          audit-policy-file: /etc/kubernetes/audit-policy.yaml
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs/-
        value:
          audit-log-maxage: "30"
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs/-
        value:
          audit-log-maxbackup: "10"
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs/-
        value:
          audit-log-maxsize: "100"
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes/-
        value:
          name: audit-policy
          hostPath: /etc/kubernetes/audit-policy.yaml
          mountPath: /etc/kubernetes/audit-policy.yaml
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes/-
        value:
          name: audit-logs
          hostPath: /var/log/kubernetes
          mountPath: /var/log/kubernetes
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/files/-
        value:
          path: /etc/kubernetes/audit-policy.yaml
          owner: "root:root"
          permissions: "0600"
          content: |
            ---
            apiVersion: audit.k8s.io/v1beta1
            kind: Policy
            rules:
              #! The following requests were manually identified as high-volume and low-risk,
              #! so drop them.
              - level: None
                users: ["system:serviceaccount:kube-system:kube-proxy"]
                verbs: ["watch"]
                resources:
                  - group: "" #! core
                    resources: ["endpoints", "services", "services/status"]
              - level: None
                userGroups: ["system:nodes"]
                verbs: ["get"]
                resources:
                  - group: "" #! core
                    resources: ["nodes", "nodes/status"]
              - level: None
                users:
                  - system:kube-controller-manager
                  - system:kube-scheduler
                  - system:serviceaccount:kube-system:endpoint-controller
                verbs: ["get", "update"]
                namespaces: ["kube-system"]
                resources:
                  - group: "" #! core
                    resources: ["endpoints"]
              - level: None
                users: ["system:apiserver"]
                verbs: ["get"]
                resources:
                  - group: "" #! core
                    resources: ["namespaces", "namespaces/status", "namespaces/finalize"]
              #! Don't log HPA fetching metrics.
              - level: None
                users:
                  - system:kube-controller-manager
                verbs: ["get", "list"]
                resources:
                  - group: "metrics.k8s.io"
              #! Don't log these read-only URLs.
              - level: None
                nonResourceURLs:
                  - /healthz*
                  - /version
                  - /swagger*
              #! Don't log events requests.
              - level: None
                resources:
                  - group: "" #! core
                    resources: ["events"]
              #! Don't log TMC service account performing read operations because they are high-volume.
              - level: None
                userGroups: ["system:serviceaccounts:vmware-system-tmc"]
                verbs: ["get", "list", "watch"]
              #! Don't log read requests from garbage collector because they are high-volume.
              - level: None
                users: ["system:serviceaccount:kube-system:generic-garbage-collector"]
                verbs: ["get", "list", "watch"]
              #! node and pod status calls from nodes are high-volume and can be large, don't log responses for expected updates from nodes
              - level: Request
                userGroups: ["system:nodes"]
                verbs: ["update","patch"]
                resources:
                  - group: "" #! core
                    resources: ["nodes/status", "pods/status"]
                omitStages:
                  - "RequestReceived"
              #! deletecollection calls can be large, don't log responses for expected namespace deletions
              - level: Request
                users: ["system:serviceaccount:kube-system:namespace-controller"]
                verbs: ["deletecollection"]
                omitStages:
                  - "RequestReceived"
              #! Secrets, ConfigMaps, and TokenReviews can contain sensitive & binary data,
              #! so only log at the Metadata level.
              - level: Metadata
                resources:
                  - group: "" #! core
                    resources: ["secrets", "configmaps"]
                  - group: authentication.k8s.io
                    resources: ["tokenreviews"]
                omitStages:
                  - "RequestReceived"
              #! Get repsonses can be large; skip them.
              - level: Request
                verbs: ["get", "list", "watch"]
                resources:
                  - group: "" #! core
                  - group: "admissionregistration.k8s.io"
                  - group: "apiextensions.k8s.io"
                  - group: "apiregistration.k8s.io"
                  - group: "apps"
                  - group: "authentication.k8s.io"
                  - group: "authorization.k8s.io"
                  - group: "autoscaling"
                  - group: "batch"
                  - group: "certificates.k8s.io"
                  - group: "extensions"
                  - group: "metrics.k8s.io"
                  - group: "networking.k8s.io"
                  - group: "policy"
                  - group: "rbac.authorization.k8s.io"
                  - group: "settings.k8s.io"
                  - group: "storage.k8s.io"
                omitStages:
                  - "RequestReceived"
              #! Default level for known APIs
              - level: RequestResponse
                resources:
                  - group: "" #! core
                  - group: "admissionregistration.k8s.io"
                  - group: "apiextensions.k8s.io"
                  - group: "apiregistration.k8s.io"
                  - group: "apps"
                  - group: "authentication.k8s.io"
                  - group: "authorization.k8s.io"
                  - group: "autoscaling"
                  - group: "batch"
                  - group: "certificates.k8s.io"
                  - group: "extensions"
                  - group: "metrics.k8s.io"
                  - group: "networking.k8s.io"
                  - group: "policy"
                  - group: "rbac.authorization.k8s.io"
                  - group: "settings.k8s.io"
                  - group: "storage.k8s.io"
                omitStages:
                  - "RequestReceived"
              #! Default level for all other requests.
              - level: Metadata
                omitStages:
                  - "RequestReceived"
  - name: registryCACert
    enabledIf: '{{and (ne "" (or .TKG_PROXY_CA_CERT .TKG_CUSTOM_IMAGE_REPOSITORY_CA_CERTIFICATE)) (not (and .TKG_CUSTOM_IMAGE_REPOSITORY_SKIP_TLS_VERIFY (ne "" .TKG_CUSTOM_IMAGE_REPOSITORY))) }}'
    definitions:
    - selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
      jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        valueFrom:
          template: |
            echo '[plugins."io.containerd.grpc.v1.cri".registry.configs."{{(index (splitList "/" .TKG_CUSTOM_IMAGE_REPOSITORY) 0)}}".tls]' >> /etc/containerd/config.toml
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        valueFrom:
          template: |
            echo '  ca_file = "/etc/containerd/{{(index (splitList "/" .TKG_CUSTOM_IMAGE_REPOSITORY) 0)}}.crt"' >> /etc/containerd/config.toml
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        value: systemctl restart containerd
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/files/-
        valueFrom:
          template: |
            path: /etc/containerd/{{(index (splitList "/" .TKG_CUSTOM_IMAGE_REPOSITORY) 0)}}.crt
            content: {{or .TKG_PROXY_CA_CERT .TKG_CUSTOM_IMAGE_REPOSITORY_CA_CERTIFICATE}}
            encoding: base64
            permissions: 0444
    - selector:
        apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
        kind: KubeadmConfigTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - tkg-worker
      jsonPatches:
      - op: add
        path: /spec/template/spec/preKubeadmCommands/-
        valueFrom:
          template: |
            echo '[plugins."io.containerd.grpc.v1.cri".registry.configs."{{(index (splitList "/" .TKG_CUSTOM_IMAGE_REPOSITORY) 0)}}".tls]' >> /etc/containerd/config.toml
      - op: add
        path: /spec/template/spec/preKubeadmCommands/-
        valueFrom:
          template: |
            echo '  ca_file = "/etc/containerd/{{(index (splitList "/" .TKG_CUSTOM_IMAGE_REPOSITORY) 0)}}.crt"' >> /etc/containerd/config.toml
      - op: add
        path: /spec/template/spec/preKubeadmCommands/-
        value: systemctl restart containerd
      - op: add
        path: /spec/template/spec/files/-
        valueFrom:
          template: |
            path: /etc/containerd/{{(index (splitList "/" .TKG_CUSTOM_IMAGE_REPOSITORY) 0)}}.crt
            content: {{or .TKG_PROXY_CA_CERT .TKG_CUSTOM_IMAGE_REPOSITORY_CA_CERTIFICATE}}
            encoding: base64
            permissions: 0444
  - name: registrySkipTLSVerify
    enabledIf: '{{and (ne "" .TKG_CUSTOM_IMAGE_REPOSITORY) .TKG_CUSTOM_IMAGE_REPOSITORY_SKIP_TLS_VERIFY}}'
    definitions:
    - selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
      jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        valueFrom:
          template: |
            echo '[plugins."io.containerd.grpc.v1.cri".registry.configs."{{(index (splitList "/" .TKG_CUSTOM_IMAGE_REPOSITORY) 0)}}".tls]' >> /etc/containerd/config.toml
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        value: echo '  insecure_skip_verify = true' >> /etc/containerd/config.toml
    - selector:
        apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
        kind: KubeadmConfigTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - tkg-worker
      jsonPatches:
      - op: add
        path: /spec/template/spec/preKubeadmCommands/-
        valueFrom:
          template: |
            echo '[plugins."io.containerd.grpc.v1.cri".registry.configs."{{(index (splitList "/" .TKG_CUSTOM_IMAGE_REPOSITORY) 0)}}".tls]' >> /etc/containerd/config.toml
      - op: add
        path: /spec/template/spec/preKubeadmCommands/-
        value: echo '  insecure_skip_verify = true' >> /etc/containerd/config.toml
  - name: customRepository
    enabledIf: '{{ne "" .TKG_CUSTOM_IMAGE_REPOSITORY}}'
    definitions:
    - selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
      jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        valueFrom:
          template: |
            sed -i 's|\".*/pause|\{{.TKG_CUSTOM_IMAGE_REPOSITORY}}/pause|' /etc/containerd/config.toml
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        value: systemctl restart containerd
    - selector:
        apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
        kind: KubeadmConfigTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - tkg-worker
      jsonPatches:
      - op: add
        path: /spec/template/spec/preKubeadmCommands/-
        valueFrom:
          template: |
            sed -i 's|\".*/pause|\{{.TKG_CUSTOM_IMAGE_REPOSITORY}}/pause|' /etc/containerd/config.toml
      - op: add
        path: /spec/template/spec/preKubeadmCommands/-
        value: systemctl restart containerd
