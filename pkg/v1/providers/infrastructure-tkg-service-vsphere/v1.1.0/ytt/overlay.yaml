#@ load("@ytt:overlay", "overlay")
#@ load("@ytt:data", "data")
#@ load("@ytt:assert", "assert")
#@ load("lib/validate.star", "validate_configuration")
#@ load("lib/helpers.star","get_labels_map_from_string")

#@ validate_configuration("tkgs")

#@ def get_taints_list_from_string(taintsString):
#@   for val in taintsString.split(','):
#@     kv = val.split('=')
#@     if len(kv) != 2:
#@       assert.fail("given labels string \""+taintsString+"\" must be in the  \"key1=value1:effect1,key2=value2:effect2\" format ")
#@     end
#@     ve = kv[1].split(":")
#@     if len(ve) != 2:
#@       assert.fail("given labels string \""+taintsString+"\" must be in the  \"key1=value1:effect1,key2=value2:effect2\" format ")
#@     end
- key: #@ kv[0]
  value: #@ ve[0]
  effect: #@ ve[1]
#@ end
#@ end

#@overlay/match by=overlay.subset({"kind":"TanzuKubernetesCluster"})
---
apiVersion: run.tanzu.vmware.com/v1alpha2
kind: TanzuKubernetesCluster
metadata:
  name: #@ data.values.CLUSTER_NAME
  namespace: #@ data.values.NAMESPACE
  labels:
    #@overlay/match missing_ok=True
    #@yaml/text-templated-strings
    #@ if data.values.TKG_CLUSTER_ROLE != "workload":
    cluster-role.tkg.tanzu.vmware.com/(@= data.values.TKG_CLUSTER_ROLE @): ""
    #@ end
    tkg.tanzu.vmware.com/cluster-name: #@ data.values.CLUSTER_NAME
spec:
  settings:
    network:
      cni:
        name: #@ data.values.CNI
      pods:
        cidrBlocks:
        #@overlay/match by=overlay.index(0)
        - #@ data.values.CLUSTER_CIDR
      serviceDomain: #@ data.values.SERVICE_DOMAIN
      services:
        cidrBlocks:
        #@overlay/match by=overlay.index(0)
        - #@ data.values.SERVICE_CIDR
    storage:
#@ if data.values.STORAGE_CLASSES != "" and data.values.STORAGE_CLASSES != None:
      #@overlay/replace
      classes:
#@ storage_classes = data.values.STORAGE_CLASSES.split(',')
#@ for sc in storage_classes:
      - #@ sc
#@ end
#@ end
      defaultClass: #@ data.values.DEFAULT_STORAGE_CLASS
  topology:
    controlPlane:
      vmClass: #@ data.values.CONTROL_PLANE_VM_CLASS
      replicas: #@ data.values.CONTROL_PLANE_MACHINE_COUNT
      storageClass: #@ data.values.CONTROL_PLANE_STORAGE_CLASS
      tkr:
        reference:
          name: #@ data.values.KUBERNETES_RELEASE
    nodePools:
     #@overlay/match by=overlay.index(0)
     - name: #@ data.values.NODE_POOL_0_NAME
#@ if data.values.NODE_POOL_0_LABELS != "" and data.values.NODE_POOL_0_LABELS != None:
       #@overlay/replace
       labels: #@ get_labels_map_from_string(data.values.NODE_POOL_0_LABELS)
#@ end
#@ if data.values.NODE_POOL_0_TAINTS != "" and data.values.NODE_POOL_0_TAINTS != None:
       #@overlay/replace
       taints: #@ get_taints_list_from_string(data.values.NODE_POOL_0_TAINTS)
#@ end
       vmClass: #@ data.values.WORKER_VM_CLASS
       replicas: #@ data.values.WORKER_MACHINE_COUNT
       storageClass: #@ data.values.WORKER_STORAGE_CLASS
       tkr:
        reference:
          name: #@ data.values.KUBERNETES_RELEASE
