#@ load("@ytt:data", "data")
#@ load("@ytt:yaml", "yaml")
#@ load("/lib/helpers.star", "get_bom_data_for_tkr_name", "get_image_repo_for_component", "ValuesFormatStr")

#@ def metrics_server_config():
#@ bomData = get_bom_data_for_tkr_name()
#@ metricsServerImage = bomData.components["metrics-server"][0].images.metricsServerImage
---
metricsServer:
  namespace: kube-system
  config:
    args: [] #! Add any command args here
    probe:
      failureThreshold: 3
      periodSeconds: 10
    apiServiceInsecureTLS: true
#@ if data.values.TKG_CLUSTER_ROLE == "workload": #! For backwards compatibility. i.e. C.1 mgmt cluster creates a C.0 wlc with older addon templates.
#@ if data.values.INFRASTRUCTURE_PROVIDER == "windows-vsphere": #! For Windows we need to allow the metric-server to run on the control plane nodes
    tolerations: 
    - effect: NoSchedule
      key: node-role.kubernetes.io/master
#@ end
  image:
    name: #@ metricsServerImage.imagePath
    tag: #@ metricsServerImage.tag
    repository: #@ get_image_repo_for_component(metricsServerImage)
    pullPolicy: IfNotPresent
#@ end

#@ end

#@ if data.values.PROVIDER_TYPE != "tkg-service-vsphere":
---
apiVersion: v1
kind: Secret
metadata:
  name: #@ "{}-metrics-server-addon".format(data.values.CLUSTER_NAME)
  namespace: #@ data.values.NAMESPACE
  labels:
    tkg.tanzu.vmware.com/addon-name: metrics-server
    tkg.tanzu.vmware.com/cluster-name: #@ data.values.CLUSTER_NAME
    clusterctl.cluster.x-k8s.io/move: ""
  annotations:
    tkg.tanzu.vmware.com/addon-type: "metrics/metrics-server"
type: tkg.tanzu.vmware.com/addon
stringData:
  values.yaml: #@ ValuesFormatStr.format(yaml.encode(metrics_server_config()))
#@ end
