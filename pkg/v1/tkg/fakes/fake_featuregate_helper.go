// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"
	//"github.com/vmware-tanzu/tanzu-framework/pkg/v1/tkg/tkgctl"
)

type FakeFeatureGateHelper struct {
	FeatureActivatedInNamespaceStub        func(context.Context, string, string) (bool, error)
	featureActivatedInNamespaceMutex       sync.RWMutex
	featureActivatedInNamespaceArgsForCall []struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}
	featureActivatedInNamespaceReturns struct {
		result1 bool
		result2 error
	}
	featureActivatedInNamespaceReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFeatureGateHelper) FeatureActivatedInNamespace(arg1 context.Context, arg2 string, arg3 string) (bool, error) {
	fake.featureActivatedInNamespaceMutex.Lock()
	ret, specificReturn := fake.featureActivatedInNamespaceReturnsOnCall[len(fake.featureActivatedInNamespaceArgsForCall)]
	fake.featureActivatedInNamespaceArgsForCall = append(fake.featureActivatedInNamespaceArgsForCall, struct {
		arg1 context.Context
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.FeatureActivatedInNamespaceStub
	fakeReturns := fake.featureActivatedInNamespaceReturns
	fake.recordInvocation("FeatureActivatedInNamespace", []interface{}{arg1, arg2, arg3})
	fake.featureActivatedInNamespaceMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeFeatureGateHelper) FeatureActivatedInNamespaceCallCount() int {
	fake.featureActivatedInNamespaceMutex.RLock()
	defer fake.featureActivatedInNamespaceMutex.RUnlock()
	return len(fake.featureActivatedInNamespaceArgsForCall)
}

func (fake *FakeFeatureGateHelper) FeatureActivatedInNamespaceCalls(stub func(context.Context, string, string) (bool, error)) {
	fake.featureActivatedInNamespaceMutex.Lock()
	defer fake.featureActivatedInNamespaceMutex.Unlock()
	fake.FeatureActivatedInNamespaceStub = stub
}

func (fake *FakeFeatureGateHelper) FeatureActivatedInNamespaceArgsForCall(i int) (context.Context, string, string) {
	fake.featureActivatedInNamespaceMutex.RLock()
	defer fake.featureActivatedInNamespaceMutex.RUnlock()
	argsForCall := fake.featureActivatedInNamespaceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeFeatureGateHelper) FeatureActivatedInNamespaceReturns(result1 bool, result2 error) {
	fake.featureActivatedInNamespaceMutex.Lock()
	defer fake.featureActivatedInNamespaceMutex.Unlock()
	fake.FeatureActivatedInNamespaceStub = nil
	fake.featureActivatedInNamespaceReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeFeatureGateHelper) FeatureActivatedInNamespaceReturnsOnCall(i int, result1 bool, result2 error) {
	fake.featureActivatedInNamespaceMutex.Lock()
	defer fake.featureActivatedInNamespaceMutex.Unlock()
	fake.FeatureActivatedInNamespaceStub = nil
	if fake.featureActivatedInNamespaceReturnsOnCall == nil {
		fake.featureActivatedInNamespaceReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.featureActivatedInNamespaceReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeFeatureGateHelper) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.featureActivatedInNamespaceMutex.RLock()
	defer fake.featureActivatedInNamespaceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeFeatureGateHelper) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

//var _ tkgctl.FeatureGateHelper = new(FakeFeatureGateHelper)
