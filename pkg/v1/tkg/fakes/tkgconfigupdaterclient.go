// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	yaml "gopkg.in/yaml.v3"

	"github.com/vmware-tanzu/tanzu-framework/pkg/v1/tkg/tkgconfigupdater"
)

type TKGConfigUpdaterClient struct {
	CheckBOMsNeedUpdateStub        func() (bool, error)
	checkBOMsNeedUpdateMutex       sync.RWMutex
	checkBOMsNeedUpdateArgsForCall []struct {
	}
	checkBOMsNeedUpdateReturns struct {
		result1 bool
		result2 error
	}
	checkBOMsNeedUpdateReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	CheckInfrastructureVersionStub        func(string) (string, error)
	checkInfrastructureVersionMutex       sync.RWMutex
	checkInfrastructureVersionArgsForCall []struct {
		arg1 string
	}
	checkInfrastructureVersionReturns struct {
		result1 string
		result2 error
	}
	checkInfrastructureVersionReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	CheckProviderTemplatesNeedUpdateStub        func() (bool, error)
	checkProviderTemplatesNeedUpdateMutex       sync.RWMutex
	checkProviderTemplatesNeedUpdateArgsForCall []struct {
	}
	checkProviderTemplatesNeedUpdateReturns struct {
		result1 bool
		result2 error
	}
	checkProviderTemplatesNeedUpdateReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	DecodeCredentialsInViperStub        func() error
	decodeCredentialsInViperMutex       sync.RWMutex
	decodeCredentialsInViperArgsForCall []struct {
	}
	decodeCredentialsInViperReturns struct {
		result1 error
	}
	decodeCredentialsInViperReturnsOnCall map[int]struct {
		result1 error
	}
	EnsureBOMFilesStub        func(bool) error
	ensureBOMFilesMutex       sync.RWMutex
	ensureBOMFilesArgsForCall []struct {
		arg1 bool
	}
	ensureBOMFilesReturns struct {
		result1 error
	}
	ensureBOMFilesReturnsOnCall map[int]struct {
		result1 error
	}
	EnsureConfigImagesStub        func() error
	ensureConfigImagesMutex       sync.RWMutex
	ensureConfigImagesArgsForCall []struct {
	}
	ensureConfigImagesReturns struct {
		result1 error
	}
	ensureConfigImagesReturnsOnCall map[int]struct {
		result1 error
	}
	EnsureCredEncodingStub        func(*yaml.Node)
	ensureCredEncodingMutex       sync.RWMutex
	ensureCredEncodingArgsForCall []struct {
		arg1 *yaml.Node
	}
	EnsureImagesStub        func(bool, *yaml.Node) error
	ensureImagesMutex       sync.RWMutex
	ensureImagesArgsForCall []struct {
		arg1 bool
		arg2 *yaml.Node
	}
	ensureImagesReturns struct {
		result1 error
	}
	ensureImagesReturnsOnCall map[int]struct {
		result1 error
	}
	EnsureProviderTemplatesStub        func() error
	ensureProviderTemplatesMutex       sync.RWMutex
	ensureProviderTemplatesArgsForCall []struct {
	}
	ensureProviderTemplatesReturns struct {
		result1 error
	}
	ensureProviderTemplatesReturnsOnCall map[int]struct {
		result1 error
	}
	EnsureProvidersInConfigStub        func(bool, *yaml.Node) error
	ensureProvidersInConfigMutex       sync.RWMutex
	ensureProvidersInConfigArgsForCall []struct {
		arg1 bool
		arg2 *yaml.Node
	}
	ensureProvidersInConfigReturns struct {
		result1 error
	}
	ensureProvidersInConfigReturnsOnCall map[int]struct {
		result1 error
	}
	EnsureTKGCompatibilityFileStub        func(bool) error
	ensureTKGCompatibilityFileMutex       sync.RWMutex
	ensureTKGCompatibilityFileArgsForCall []struct {
		arg1 bool
	}
	ensureTKGCompatibilityFileReturns struct {
		result1 error
	}
	ensureTKGCompatibilityFileReturnsOnCall map[int]struct {
		result1 error
	}
	EnsureTKGConfigFileStub        func() (string, error)
	ensureTKGConfigFileMutex       sync.RWMutex
	ensureTKGConfigFileArgsForCall []struct {
	}
	ensureTKGConfigFileReturns struct {
		result1 string
		result2 error
	}
	ensureTKGConfigFileReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	EnsureTemplateFilesStub        func() (bool, error)
	ensureTemplateFilesMutex       sync.RWMutex
	ensureTemplateFilesArgsForCall []struct {
	}
	ensureTemplateFilesReturns struct {
		result1 bool
		result2 error
	}
	ensureTemplateFilesReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	GetDefaultInfrastructureVersionStub        func(string) (string, error)
	getDefaultInfrastructureVersionMutex       sync.RWMutex
	getDefaultInfrastructureVersionArgsForCall []struct {
		arg1 string
	}
	getDefaultInfrastructureVersionReturns struct {
		result1 string
		result2 error
	}
	getDefaultInfrastructureVersionReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	SetDefaultConfigurationStub        func()
	setDefaultConfigurationMutex       sync.RWMutex
	setDefaultConfigurationArgsForCall []struct {
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *TKGConfigUpdaterClient) CheckBOMsNeedUpdate() (bool, error) {
	fake.checkBOMsNeedUpdateMutex.Lock()
	ret, specificReturn := fake.checkBOMsNeedUpdateReturnsOnCall[len(fake.checkBOMsNeedUpdateArgsForCall)]
	fake.checkBOMsNeedUpdateArgsForCall = append(fake.checkBOMsNeedUpdateArgsForCall, struct {
	}{})
	stub := fake.CheckBOMsNeedUpdateStub
	fakeReturns := fake.checkBOMsNeedUpdateReturns
	fake.recordInvocation("CheckBOMsNeedUpdate", []interface{}{})
	fake.checkBOMsNeedUpdateMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *TKGConfigUpdaterClient) CheckBOMsNeedUpdateCallCount() int {
	fake.checkBOMsNeedUpdateMutex.RLock()
	defer fake.checkBOMsNeedUpdateMutex.RUnlock()
	return len(fake.checkBOMsNeedUpdateArgsForCall)
}

func (fake *TKGConfigUpdaterClient) CheckBOMsNeedUpdateCalls(stub func() (bool, error)) {
	fake.checkBOMsNeedUpdateMutex.Lock()
	defer fake.checkBOMsNeedUpdateMutex.Unlock()
	fake.CheckBOMsNeedUpdateStub = stub
}

func (fake *TKGConfigUpdaterClient) CheckBOMsNeedUpdateReturns(result1 bool, result2 error) {
	fake.checkBOMsNeedUpdateMutex.Lock()
	defer fake.checkBOMsNeedUpdateMutex.Unlock()
	fake.CheckBOMsNeedUpdateStub = nil
	fake.checkBOMsNeedUpdateReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *TKGConfigUpdaterClient) CheckBOMsNeedUpdateReturnsOnCall(i int, result1 bool, result2 error) {
	fake.checkBOMsNeedUpdateMutex.Lock()
	defer fake.checkBOMsNeedUpdateMutex.Unlock()
	fake.CheckBOMsNeedUpdateStub = nil
	if fake.checkBOMsNeedUpdateReturnsOnCall == nil {
		fake.checkBOMsNeedUpdateReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.checkBOMsNeedUpdateReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *TKGConfigUpdaterClient) CheckInfrastructureVersion(arg1 string) (string, error) {
	fake.checkInfrastructureVersionMutex.Lock()
	ret, specificReturn := fake.checkInfrastructureVersionReturnsOnCall[len(fake.checkInfrastructureVersionArgsForCall)]
	fake.checkInfrastructureVersionArgsForCall = append(fake.checkInfrastructureVersionArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.CheckInfrastructureVersionStub
	fakeReturns := fake.checkInfrastructureVersionReturns
	fake.recordInvocation("CheckInfrastructureVersion", []interface{}{arg1})
	fake.checkInfrastructureVersionMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *TKGConfigUpdaterClient) CheckInfrastructureVersionCallCount() int {
	fake.checkInfrastructureVersionMutex.RLock()
	defer fake.checkInfrastructureVersionMutex.RUnlock()
	return len(fake.checkInfrastructureVersionArgsForCall)
}

func (fake *TKGConfigUpdaterClient) CheckInfrastructureVersionCalls(stub func(string) (string, error)) {
	fake.checkInfrastructureVersionMutex.Lock()
	defer fake.checkInfrastructureVersionMutex.Unlock()
	fake.CheckInfrastructureVersionStub = stub
}

func (fake *TKGConfigUpdaterClient) CheckInfrastructureVersionArgsForCall(i int) string {
	fake.checkInfrastructureVersionMutex.RLock()
	defer fake.checkInfrastructureVersionMutex.RUnlock()
	argsForCall := fake.checkInfrastructureVersionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *TKGConfigUpdaterClient) CheckInfrastructureVersionReturns(result1 string, result2 error) {
	fake.checkInfrastructureVersionMutex.Lock()
	defer fake.checkInfrastructureVersionMutex.Unlock()
	fake.CheckInfrastructureVersionStub = nil
	fake.checkInfrastructureVersionReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *TKGConfigUpdaterClient) CheckInfrastructureVersionReturnsOnCall(i int, result1 string, result2 error) {
	fake.checkInfrastructureVersionMutex.Lock()
	defer fake.checkInfrastructureVersionMutex.Unlock()
	fake.CheckInfrastructureVersionStub = nil
	if fake.checkInfrastructureVersionReturnsOnCall == nil {
		fake.checkInfrastructureVersionReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.checkInfrastructureVersionReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *TKGConfigUpdaterClient) CheckProviderTemplatesNeedUpdate() (bool, error) {
	fake.checkProviderTemplatesNeedUpdateMutex.Lock()
	ret, specificReturn := fake.checkProviderTemplatesNeedUpdateReturnsOnCall[len(fake.checkProviderTemplatesNeedUpdateArgsForCall)]
	fake.checkProviderTemplatesNeedUpdateArgsForCall = append(fake.checkProviderTemplatesNeedUpdateArgsForCall, struct {
	}{})
	stub := fake.CheckProviderTemplatesNeedUpdateStub
	fakeReturns := fake.checkProviderTemplatesNeedUpdateReturns
	fake.recordInvocation("CheckProviderTemplatesNeedUpdate", []interface{}{})
	fake.checkProviderTemplatesNeedUpdateMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *TKGConfigUpdaterClient) CheckProviderTemplatesNeedUpdateCallCount() int {
	fake.checkProviderTemplatesNeedUpdateMutex.RLock()
	defer fake.checkProviderTemplatesNeedUpdateMutex.RUnlock()
	return len(fake.checkProviderTemplatesNeedUpdateArgsForCall)
}

func (fake *TKGConfigUpdaterClient) CheckProviderTemplatesNeedUpdateCalls(stub func() (bool, error)) {
	fake.checkProviderTemplatesNeedUpdateMutex.Lock()
	defer fake.checkProviderTemplatesNeedUpdateMutex.Unlock()
	fake.CheckProviderTemplatesNeedUpdateStub = stub
}

func (fake *TKGConfigUpdaterClient) CheckProviderTemplatesNeedUpdateReturns(result1 bool, result2 error) {
	fake.checkProviderTemplatesNeedUpdateMutex.Lock()
	defer fake.checkProviderTemplatesNeedUpdateMutex.Unlock()
	fake.CheckProviderTemplatesNeedUpdateStub = nil
	fake.checkProviderTemplatesNeedUpdateReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *TKGConfigUpdaterClient) CheckProviderTemplatesNeedUpdateReturnsOnCall(i int, result1 bool, result2 error) {
	fake.checkProviderTemplatesNeedUpdateMutex.Lock()
	defer fake.checkProviderTemplatesNeedUpdateMutex.Unlock()
	fake.CheckProviderTemplatesNeedUpdateStub = nil
	if fake.checkProviderTemplatesNeedUpdateReturnsOnCall == nil {
		fake.checkProviderTemplatesNeedUpdateReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.checkProviderTemplatesNeedUpdateReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *TKGConfigUpdaterClient) DecodeCredentialsInViper() error {
	fake.decodeCredentialsInViperMutex.Lock()
	ret, specificReturn := fake.decodeCredentialsInViperReturnsOnCall[len(fake.decodeCredentialsInViperArgsForCall)]
	fake.decodeCredentialsInViperArgsForCall = append(fake.decodeCredentialsInViperArgsForCall, struct {
	}{})
	stub := fake.DecodeCredentialsInViperStub
	fakeReturns := fake.decodeCredentialsInViperReturns
	fake.recordInvocation("DecodeCredentialsInViper", []interface{}{})
	fake.decodeCredentialsInViperMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *TKGConfigUpdaterClient) DecodeCredentialsInViperCallCount() int {
	fake.decodeCredentialsInViperMutex.RLock()
	defer fake.decodeCredentialsInViperMutex.RUnlock()
	return len(fake.decodeCredentialsInViperArgsForCall)
}

func (fake *TKGConfigUpdaterClient) DecodeCredentialsInViperCalls(stub func() error) {
	fake.decodeCredentialsInViperMutex.Lock()
	defer fake.decodeCredentialsInViperMutex.Unlock()
	fake.DecodeCredentialsInViperStub = stub
}

func (fake *TKGConfigUpdaterClient) DecodeCredentialsInViperReturns(result1 error) {
	fake.decodeCredentialsInViperMutex.Lock()
	defer fake.decodeCredentialsInViperMutex.Unlock()
	fake.DecodeCredentialsInViperStub = nil
	fake.decodeCredentialsInViperReturns = struct {
		result1 error
	}{result1}
}

func (fake *TKGConfigUpdaterClient) DecodeCredentialsInViperReturnsOnCall(i int, result1 error) {
	fake.decodeCredentialsInViperMutex.Lock()
	defer fake.decodeCredentialsInViperMutex.Unlock()
	fake.DecodeCredentialsInViperStub = nil
	if fake.decodeCredentialsInViperReturnsOnCall == nil {
		fake.decodeCredentialsInViperReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.decodeCredentialsInViperReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *TKGConfigUpdaterClient) EnsureBOMFiles(arg1 bool) error {
	fake.ensureBOMFilesMutex.Lock()
	ret, specificReturn := fake.ensureBOMFilesReturnsOnCall[len(fake.ensureBOMFilesArgsForCall)]
	fake.ensureBOMFilesArgsForCall = append(fake.ensureBOMFilesArgsForCall, struct {
		arg1 bool
	}{arg1})
	stub := fake.EnsureBOMFilesStub
	fakeReturns := fake.ensureBOMFilesReturns
	fake.recordInvocation("EnsureBOMFiles", []interface{}{arg1})
	fake.ensureBOMFilesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *TKGConfigUpdaterClient) EnsureBOMFilesCallCount() int {
	fake.ensureBOMFilesMutex.RLock()
	defer fake.ensureBOMFilesMutex.RUnlock()
	return len(fake.ensureBOMFilesArgsForCall)
}

func (fake *TKGConfigUpdaterClient) EnsureBOMFilesCalls(stub func(bool) error) {
	fake.ensureBOMFilesMutex.Lock()
	defer fake.ensureBOMFilesMutex.Unlock()
	fake.EnsureBOMFilesStub = stub
}

func (fake *TKGConfigUpdaterClient) EnsureBOMFilesArgsForCall(i int) bool {
	fake.ensureBOMFilesMutex.RLock()
	defer fake.ensureBOMFilesMutex.RUnlock()
	argsForCall := fake.ensureBOMFilesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *TKGConfigUpdaterClient) EnsureBOMFilesReturns(result1 error) {
	fake.ensureBOMFilesMutex.Lock()
	defer fake.ensureBOMFilesMutex.Unlock()
	fake.EnsureBOMFilesStub = nil
	fake.ensureBOMFilesReturns = struct {
		result1 error
	}{result1}
}

func (fake *TKGConfigUpdaterClient) EnsureBOMFilesReturnsOnCall(i int, result1 error) {
	fake.ensureBOMFilesMutex.Lock()
	defer fake.ensureBOMFilesMutex.Unlock()
	fake.EnsureBOMFilesStub = nil
	if fake.ensureBOMFilesReturnsOnCall == nil {
		fake.ensureBOMFilesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.ensureBOMFilesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *TKGConfigUpdaterClient) EnsureConfigImages() error {
	fake.ensureConfigImagesMutex.Lock()
	ret, specificReturn := fake.ensureConfigImagesReturnsOnCall[len(fake.ensureConfigImagesArgsForCall)]
	fake.ensureConfigImagesArgsForCall = append(fake.ensureConfigImagesArgsForCall, struct {
	}{})
	stub := fake.EnsureConfigImagesStub
	fakeReturns := fake.ensureConfigImagesReturns
	fake.recordInvocation("EnsureConfigImages", []interface{}{})
	fake.ensureConfigImagesMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *TKGConfigUpdaterClient) EnsureConfigImagesCallCount() int {
	fake.ensureConfigImagesMutex.RLock()
	defer fake.ensureConfigImagesMutex.RUnlock()
	return len(fake.ensureConfigImagesArgsForCall)
}

func (fake *TKGConfigUpdaterClient) EnsureConfigImagesCalls(stub func() error) {
	fake.ensureConfigImagesMutex.Lock()
	defer fake.ensureConfigImagesMutex.Unlock()
	fake.EnsureConfigImagesStub = stub
}

func (fake *TKGConfigUpdaterClient) EnsureConfigImagesReturns(result1 error) {
	fake.ensureConfigImagesMutex.Lock()
	defer fake.ensureConfigImagesMutex.Unlock()
	fake.EnsureConfigImagesStub = nil
	fake.ensureConfigImagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *TKGConfigUpdaterClient) EnsureConfigImagesReturnsOnCall(i int, result1 error) {
	fake.ensureConfigImagesMutex.Lock()
	defer fake.ensureConfigImagesMutex.Unlock()
	fake.EnsureConfigImagesStub = nil
	if fake.ensureConfigImagesReturnsOnCall == nil {
		fake.ensureConfigImagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.ensureConfigImagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *TKGConfigUpdaterClient) EnsureCredEncoding(arg1 *yaml.Node) {
	fake.ensureCredEncodingMutex.Lock()
	fake.ensureCredEncodingArgsForCall = append(fake.ensureCredEncodingArgsForCall, struct {
		arg1 *yaml.Node
	}{arg1})
	stub := fake.EnsureCredEncodingStub
	fake.recordInvocation("EnsureCredEncoding", []interface{}{arg1})
	fake.ensureCredEncodingMutex.Unlock()
	if stub != nil {
		fake.EnsureCredEncodingStub(arg1)
	}
}

func (fake *TKGConfigUpdaterClient) EnsureCredEncodingCallCount() int {
	fake.ensureCredEncodingMutex.RLock()
	defer fake.ensureCredEncodingMutex.RUnlock()
	return len(fake.ensureCredEncodingArgsForCall)
}

func (fake *TKGConfigUpdaterClient) EnsureCredEncodingCalls(stub func(*yaml.Node)) {
	fake.ensureCredEncodingMutex.Lock()
	defer fake.ensureCredEncodingMutex.Unlock()
	fake.EnsureCredEncodingStub = stub
}

func (fake *TKGConfigUpdaterClient) EnsureCredEncodingArgsForCall(i int) *yaml.Node {
	fake.ensureCredEncodingMutex.RLock()
	defer fake.ensureCredEncodingMutex.RUnlock()
	argsForCall := fake.ensureCredEncodingArgsForCall[i]
	return argsForCall.arg1
}

func (fake *TKGConfigUpdaterClient) EnsureImages(arg1 bool, arg2 *yaml.Node) error {
	fake.ensureImagesMutex.Lock()
	ret, specificReturn := fake.ensureImagesReturnsOnCall[len(fake.ensureImagesArgsForCall)]
	fake.ensureImagesArgsForCall = append(fake.ensureImagesArgsForCall, struct {
		arg1 bool
		arg2 *yaml.Node
	}{arg1, arg2})
	stub := fake.EnsureImagesStub
	fakeReturns := fake.ensureImagesReturns
	fake.recordInvocation("EnsureImages", []interface{}{arg1, arg2})
	fake.ensureImagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *TKGConfigUpdaterClient) EnsureImagesCallCount() int {
	fake.ensureImagesMutex.RLock()
	defer fake.ensureImagesMutex.RUnlock()
	return len(fake.ensureImagesArgsForCall)
}

func (fake *TKGConfigUpdaterClient) EnsureImagesCalls(stub func(bool, *yaml.Node) error) {
	fake.ensureImagesMutex.Lock()
	defer fake.ensureImagesMutex.Unlock()
	fake.EnsureImagesStub = stub
}

func (fake *TKGConfigUpdaterClient) EnsureImagesArgsForCall(i int) (bool, *yaml.Node) {
	fake.ensureImagesMutex.RLock()
	defer fake.ensureImagesMutex.RUnlock()
	argsForCall := fake.ensureImagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *TKGConfigUpdaterClient) EnsureImagesReturns(result1 error) {
	fake.ensureImagesMutex.Lock()
	defer fake.ensureImagesMutex.Unlock()
	fake.EnsureImagesStub = nil
	fake.ensureImagesReturns = struct {
		result1 error
	}{result1}
}

func (fake *TKGConfigUpdaterClient) EnsureImagesReturnsOnCall(i int, result1 error) {
	fake.ensureImagesMutex.Lock()
	defer fake.ensureImagesMutex.Unlock()
	fake.EnsureImagesStub = nil
	if fake.ensureImagesReturnsOnCall == nil {
		fake.ensureImagesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.ensureImagesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *TKGConfigUpdaterClient) EnsureProviderTemplates() error {
	fake.ensureProviderTemplatesMutex.Lock()
	ret, specificReturn := fake.ensureProviderTemplatesReturnsOnCall[len(fake.ensureProviderTemplatesArgsForCall)]
	fake.ensureProviderTemplatesArgsForCall = append(fake.ensureProviderTemplatesArgsForCall, struct {
	}{})
	stub := fake.EnsureProviderTemplatesStub
	fakeReturns := fake.ensureProviderTemplatesReturns
	fake.recordInvocation("EnsureProviderTemplates", []interface{}{})
	fake.ensureProviderTemplatesMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *TKGConfigUpdaterClient) EnsureProviderTemplatesCallCount() int {
	fake.ensureProviderTemplatesMutex.RLock()
	defer fake.ensureProviderTemplatesMutex.RUnlock()
	return len(fake.ensureProviderTemplatesArgsForCall)
}

func (fake *TKGConfigUpdaterClient) EnsureProviderTemplatesCalls(stub func() error) {
	fake.ensureProviderTemplatesMutex.Lock()
	defer fake.ensureProviderTemplatesMutex.Unlock()
	fake.EnsureProviderTemplatesStub = stub
}

func (fake *TKGConfigUpdaterClient) EnsureProviderTemplatesReturns(result1 error) {
	fake.ensureProviderTemplatesMutex.Lock()
	defer fake.ensureProviderTemplatesMutex.Unlock()
	fake.EnsureProviderTemplatesStub = nil
	fake.ensureProviderTemplatesReturns = struct {
		result1 error
	}{result1}
}

func (fake *TKGConfigUpdaterClient) EnsureProviderTemplatesReturnsOnCall(i int, result1 error) {
	fake.ensureProviderTemplatesMutex.Lock()
	defer fake.ensureProviderTemplatesMutex.Unlock()
	fake.EnsureProviderTemplatesStub = nil
	if fake.ensureProviderTemplatesReturnsOnCall == nil {
		fake.ensureProviderTemplatesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.ensureProviderTemplatesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *TKGConfigUpdaterClient) EnsureProvidersInConfig(arg1 bool, arg2 *yaml.Node) error {
	fake.ensureProvidersInConfigMutex.Lock()
	ret, specificReturn := fake.ensureProvidersInConfigReturnsOnCall[len(fake.ensureProvidersInConfigArgsForCall)]
	fake.ensureProvidersInConfigArgsForCall = append(fake.ensureProvidersInConfigArgsForCall, struct {
		arg1 bool
		arg2 *yaml.Node
	}{arg1, arg2})
	stub := fake.EnsureProvidersInConfigStub
	fakeReturns := fake.ensureProvidersInConfigReturns
	fake.recordInvocation("EnsureProvidersInConfig", []interface{}{arg1, arg2})
	fake.ensureProvidersInConfigMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *TKGConfigUpdaterClient) EnsureProvidersInConfigCallCount() int {
	fake.ensureProvidersInConfigMutex.RLock()
	defer fake.ensureProvidersInConfigMutex.RUnlock()
	return len(fake.ensureProvidersInConfigArgsForCall)
}

func (fake *TKGConfigUpdaterClient) EnsureProvidersInConfigCalls(stub func(bool, *yaml.Node) error) {
	fake.ensureProvidersInConfigMutex.Lock()
	defer fake.ensureProvidersInConfigMutex.Unlock()
	fake.EnsureProvidersInConfigStub = stub
}

func (fake *TKGConfigUpdaterClient) EnsureProvidersInConfigArgsForCall(i int) (bool, *yaml.Node) {
	fake.ensureProvidersInConfigMutex.RLock()
	defer fake.ensureProvidersInConfigMutex.RUnlock()
	argsForCall := fake.ensureProvidersInConfigArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *TKGConfigUpdaterClient) EnsureProvidersInConfigReturns(result1 error) {
	fake.ensureProvidersInConfigMutex.Lock()
	defer fake.ensureProvidersInConfigMutex.Unlock()
	fake.EnsureProvidersInConfigStub = nil
	fake.ensureProvidersInConfigReturns = struct {
		result1 error
	}{result1}
}

func (fake *TKGConfigUpdaterClient) EnsureProvidersInConfigReturnsOnCall(i int, result1 error) {
	fake.ensureProvidersInConfigMutex.Lock()
	defer fake.ensureProvidersInConfigMutex.Unlock()
	fake.EnsureProvidersInConfigStub = nil
	if fake.ensureProvidersInConfigReturnsOnCall == nil {
		fake.ensureProvidersInConfigReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.ensureProvidersInConfigReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *TKGConfigUpdaterClient) EnsureTKGCompatibilityFile(arg1 bool) error {
	fake.ensureTKGCompatibilityFileMutex.Lock()
	ret, specificReturn := fake.ensureTKGCompatibilityFileReturnsOnCall[len(fake.ensureTKGCompatibilityFileArgsForCall)]
	fake.ensureTKGCompatibilityFileArgsForCall = append(fake.ensureTKGCompatibilityFileArgsForCall, struct {
		arg1 bool
	}{arg1})
	stub := fake.EnsureTKGCompatibilityFileStub
	fakeReturns := fake.ensureTKGCompatibilityFileReturns
	fake.recordInvocation("EnsureTKGCompatibilityFile", []interface{}{arg1})
	fake.ensureTKGCompatibilityFileMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *TKGConfigUpdaterClient) EnsureTKGCompatibilityFileCallCount() int {
	fake.ensureTKGCompatibilityFileMutex.RLock()
	defer fake.ensureTKGCompatibilityFileMutex.RUnlock()
	return len(fake.ensureTKGCompatibilityFileArgsForCall)
}

func (fake *TKGConfigUpdaterClient) EnsureTKGCompatibilityFileCalls(stub func(bool) error) {
	fake.ensureTKGCompatibilityFileMutex.Lock()
	defer fake.ensureTKGCompatibilityFileMutex.Unlock()
	fake.EnsureTKGCompatibilityFileStub = stub
}

func (fake *TKGConfigUpdaterClient) EnsureTKGCompatibilityFileArgsForCall(i int) bool {
	fake.ensureTKGCompatibilityFileMutex.RLock()
	defer fake.ensureTKGCompatibilityFileMutex.RUnlock()
	argsForCall := fake.ensureTKGCompatibilityFileArgsForCall[i]
	return argsForCall.arg1
}

func (fake *TKGConfigUpdaterClient) EnsureTKGCompatibilityFileReturns(result1 error) {
	fake.ensureTKGCompatibilityFileMutex.Lock()
	defer fake.ensureTKGCompatibilityFileMutex.Unlock()
	fake.EnsureTKGCompatibilityFileStub = nil
	fake.ensureTKGCompatibilityFileReturns = struct {
		result1 error
	}{result1}
}

func (fake *TKGConfigUpdaterClient) EnsureTKGCompatibilityFileReturnsOnCall(i int, result1 error) {
	fake.ensureTKGCompatibilityFileMutex.Lock()
	defer fake.ensureTKGCompatibilityFileMutex.Unlock()
	fake.EnsureTKGCompatibilityFileStub = nil
	if fake.ensureTKGCompatibilityFileReturnsOnCall == nil {
		fake.ensureTKGCompatibilityFileReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.ensureTKGCompatibilityFileReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *TKGConfigUpdaterClient) EnsureTKGConfigFile() (string, error) {
	fake.ensureTKGConfigFileMutex.Lock()
	ret, specificReturn := fake.ensureTKGConfigFileReturnsOnCall[len(fake.ensureTKGConfigFileArgsForCall)]
	fake.ensureTKGConfigFileArgsForCall = append(fake.ensureTKGConfigFileArgsForCall, struct {
	}{})
	stub := fake.EnsureTKGConfigFileStub
	fakeReturns := fake.ensureTKGConfigFileReturns
	fake.recordInvocation("EnsureTKGConfigFile", []interface{}{})
	fake.ensureTKGConfigFileMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *TKGConfigUpdaterClient) EnsureTKGConfigFileCallCount() int {
	fake.ensureTKGConfigFileMutex.RLock()
	defer fake.ensureTKGConfigFileMutex.RUnlock()
	return len(fake.ensureTKGConfigFileArgsForCall)
}

func (fake *TKGConfigUpdaterClient) EnsureTKGConfigFileCalls(stub func() (string, error)) {
	fake.ensureTKGConfigFileMutex.Lock()
	defer fake.ensureTKGConfigFileMutex.Unlock()
	fake.EnsureTKGConfigFileStub = stub
}

func (fake *TKGConfigUpdaterClient) EnsureTKGConfigFileReturns(result1 string, result2 error) {
	fake.ensureTKGConfigFileMutex.Lock()
	defer fake.ensureTKGConfigFileMutex.Unlock()
	fake.EnsureTKGConfigFileStub = nil
	fake.ensureTKGConfigFileReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *TKGConfigUpdaterClient) EnsureTKGConfigFileReturnsOnCall(i int, result1 string, result2 error) {
	fake.ensureTKGConfigFileMutex.Lock()
	defer fake.ensureTKGConfigFileMutex.Unlock()
	fake.EnsureTKGConfigFileStub = nil
	if fake.ensureTKGConfigFileReturnsOnCall == nil {
		fake.ensureTKGConfigFileReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.ensureTKGConfigFileReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *TKGConfigUpdaterClient) EnsureTemplateFiles() (bool, error) {
	fake.ensureTemplateFilesMutex.Lock()
	ret, specificReturn := fake.ensureTemplateFilesReturnsOnCall[len(fake.ensureTemplateFilesArgsForCall)]
	fake.ensureTemplateFilesArgsForCall = append(fake.ensureTemplateFilesArgsForCall, struct {
	}{})
	stub := fake.EnsureTemplateFilesStub
	fakeReturns := fake.ensureTemplateFilesReturns
	fake.recordInvocation("EnsureTemplateFiles", []interface{}{})
	fake.ensureTemplateFilesMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *TKGConfigUpdaterClient) EnsureTemplateFilesCallCount() int {
	fake.ensureTemplateFilesMutex.RLock()
	defer fake.ensureTemplateFilesMutex.RUnlock()
	return len(fake.ensureTemplateFilesArgsForCall)
}

func (fake *TKGConfigUpdaterClient) EnsureTemplateFilesCalls(stub func() (bool, error)) {
	fake.ensureTemplateFilesMutex.Lock()
	defer fake.ensureTemplateFilesMutex.Unlock()
	fake.EnsureTemplateFilesStub = stub
}

func (fake *TKGConfigUpdaterClient) EnsureTemplateFilesReturns(result1 bool, result2 error) {
	fake.ensureTemplateFilesMutex.Lock()
	defer fake.ensureTemplateFilesMutex.Unlock()
	fake.EnsureTemplateFilesStub = nil
	fake.ensureTemplateFilesReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *TKGConfigUpdaterClient) EnsureTemplateFilesReturnsOnCall(i int, result1 bool, result2 error) {
	fake.ensureTemplateFilesMutex.Lock()
	defer fake.ensureTemplateFilesMutex.Unlock()
	fake.EnsureTemplateFilesStub = nil
	if fake.ensureTemplateFilesReturnsOnCall == nil {
		fake.ensureTemplateFilesReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.ensureTemplateFilesReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *TKGConfigUpdaterClient) GetDefaultInfrastructureVersion(arg1 string) (string, error) {
	fake.getDefaultInfrastructureVersionMutex.Lock()
	ret, specificReturn := fake.getDefaultInfrastructureVersionReturnsOnCall[len(fake.getDefaultInfrastructureVersionArgsForCall)]
	fake.getDefaultInfrastructureVersionArgsForCall = append(fake.getDefaultInfrastructureVersionArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetDefaultInfrastructureVersionStub
	fakeReturns := fake.getDefaultInfrastructureVersionReturns
	fake.recordInvocation("GetDefaultInfrastructureVersion", []interface{}{arg1})
	fake.getDefaultInfrastructureVersionMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *TKGConfigUpdaterClient) GetDefaultInfrastructureVersionCallCount() int {
	fake.getDefaultInfrastructureVersionMutex.RLock()
	defer fake.getDefaultInfrastructureVersionMutex.RUnlock()
	return len(fake.getDefaultInfrastructureVersionArgsForCall)
}

func (fake *TKGConfigUpdaterClient) GetDefaultInfrastructureVersionCalls(stub func(string) (string, error)) {
	fake.getDefaultInfrastructureVersionMutex.Lock()
	defer fake.getDefaultInfrastructureVersionMutex.Unlock()
	fake.GetDefaultInfrastructureVersionStub = stub
}

func (fake *TKGConfigUpdaterClient) GetDefaultInfrastructureVersionArgsForCall(i int) string {
	fake.getDefaultInfrastructureVersionMutex.RLock()
	defer fake.getDefaultInfrastructureVersionMutex.RUnlock()
	argsForCall := fake.getDefaultInfrastructureVersionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *TKGConfigUpdaterClient) GetDefaultInfrastructureVersionReturns(result1 string, result2 error) {
	fake.getDefaultInfrastructureVersionMutex.Lock()
	defer fake.getDefaultInfrastructureVersionMutex.Unlock()
	fake.GetDefaultInfrastructureVersionStub = nil
	fake.getDefaultInfrastructureVersionReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *TKGConfigUpdaterClient) GetDefaultInfrastructureVersionReturnsOnCall(i int, result1 string, result2 error) {
	fake.getDefaultInfrastructureVersionMutex.Lock()
	defer fake.getDefaultInfrastructureVersionMutex.Unlock()
	fake.GetDefaultInfrastructureVersionStub = nil
	if fake.getDefaultInfrastructureVersionReturnsOnCall == nil {
		fake.getDefaultInfrastructureVersionReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getDefaultInfrastructureVersionReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *TKGConfigUpdaterClient) SetDefaultConfiguration() {
	fake.setDefaultConfigurationMutex.Lock()
	fake.setDefaultConfigurationArgsForCall = append(fake.setDefaultConfigurationArgsForCall, struct {
	}{})
	stub := fake.SetDefaultConfigurationStub
	fake.recordInvocation("SetDefaultConfiguration", []interface{}{})
	fake.setDefaultConfigurationMutex.Unlock()
	if stub != nil {
		fake.SetDefaultConfigurationStub()
	}
}

func (fake *TKGConfigUpdaterClient) SetDefaultConfigurationCallCount() int {
	fake.setDefaultConfigurationMutex.RLock()
	defer fake.setDefaultConfigurationMutex.RUnlock()
	return len(fake.setDefaultConfigurationArgsForCall)
}

func (fake *TKGConfigUpdaterClient) SetDefaultConfigurationCalls(stub func()) {
	fake.setDefaultConfigurationMutex.Lock()
	defer fake.setDefaultConfigurationMutex.Unlock()
	fake.SetDefaultConfigurationStub = stub
}

func (fake *TKGConfigUpdaterClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.checkBOMsNeedUpdateMutex.RLock()
	defer fake.checkBOMsNeedUpdateMutex.RUnlock()
	fake.checkInfrastructureVersionMutex.RLock()
	defer fake.checkInfrastructureVersionMutex.RUnlock()
	fake.checkProviderTemplatesNeedUpdateMutex.RLock()
	defer fake.checkProviderTemplatesNeedUpdateMutex.RUnlock()
	fake.decodeCredentialsInViperMutex.RLock()
	defer fake.decodeCredentialsInViperMutex.RUnlock()
	fake.ensureBOMFilesMutex.RLock()
	defer fake.ensureBOMFilesMutex.RUnlock()
	fake.ensureConfigImagesMutex.RLock()
	defer fake.ensureConfigImagesMutex.RUnlock()
	fake.ensureCredEncodingMutex.RLock()
	defer fake.ensureCredEncodingMutex.RUnlock()
	fake.ensureImagesMutex.RLock()
	defer fake.ensureImagesMutex.RUnlock()
	fake.ensureProviderTemplatesMutex.RLock()
	defer fake.ensureProviderTemplatesMutex.RUnlock()
	fake.ensureProvidersInConfigMutex.RLock()
	defer fake.ensureProvidersInConfigMutex.RUnlock()
	fake.ensureTKGCompatibilityFileMutex.RLock()
	defer fake.ensureTKGCompatibilityFileMutex.RUnlock()
	fake.ensureTKGConfigFileMutex.RLock()
	defer fake.ensureTKGConfigFileMutex.RUnlock()
	fake.ensureTemplateFilesMutex.RLock()
	defer fake.ensureTemplateFilesMutex.RUnlock()
	fake.getDefaultInfrastructureVersionMutex.RLock()
	defer fake.getDefaultInfrastructureVersionMutex.RUnlock()
	fake.setDefaultConfigurationMutex.RLock()
	defer fake.setDefaultConfigurationMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *TKGConfigUpdaterClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ tkgconfigupdater.Client = new(TKGConfigUpdaterClient)
