// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"
	"time"

	v1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/types"
	v1alpha3a "sigs.k8s.io/cluster-api/api/v1alpha3"
	v1alpha3b "sigs.k8s.io/cluster-api/cmd/clusterctl/api/v1alpha3"
	"sigs.k8s.io/cluster-api/controlplane/kubeadm/api/v1alpha3"
	"sigs.k8s.io/controller-runtime/pkg/client"

	"github.com/vmware-tanzu/tanzu-framework/apis/run/v1alpha1"
	"github.com/vmware-tanzu/tanzu-framework/pkg/v1/tkg/azure"
	"github.com/vmware-tanzu/tanzu-framework/pkg/v1/tkg/clusterclient"
	"github.com/vmware-tanzu/tanzu-framework/pkg/v1/tkg/tkgconfigbom"
	"github.com/vmware-tanzu/tanzu-framework/pkg/v1/tkg/vc"
)

type ClusterClient struct {
	ActivateTanzuKubernetesReleasesStub        func(string) error
	activateTanzuKubernetesReleasesMutex       sync.RWMutex
	activateTanzuKubernetesReleasesArgsForCall []struct {
		arg1 string
	}
	activateTanzuKubernetesReleasesReturns struct {
		result1 error
	}
	activateTanzuKubernetesReleasesReturnsOnCall map[int]struct {
		result1 error
	}
	AddCEIPTelemetryJobStub        func(string, string, *tkgconfigbom.BOMConfiguration, string, string, string, string, string) error
	addCEIPTelemetryJobMutex       sync.RWMutex
	addCEIPTelemetryJobArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 *tkgconfigbom.BOMConfiguration
		arg4 string
		arg5 string
		arg6 string
		arg7 string
		arg8 string
	}
	addCEIPTelemetryJobReturns struct {
		result1 error
	}
	addCEIPTelemetryJobReturnsOnCall map[int]struct {
		result1 error
	}
	ApplyStub        func(string) error
	applyMutex       sync.RWMutex
	applyArgsForCall []struct {
		arg1 string
	}
	applyReturns struct {
		result1 error
	}
	applyReturnsOnCall map[int]struct {
		result1 error
	}
	ApplyFileStub        func(string) error
	applyFileMutex       sync.RWMutex
	applyFileArgsForCall []struct {
		arg1 string
	}
	applyFileReturns struct {
		result1 error
	}
	applyFileReturnsOnCall map[int]struct {
		result1 error
	}
	CloneWithTimeoutStub        func(time.Duration) clusterclient.Client
	cloneWithTimeoutMutex       sync.RWMutex
	cloneWithTimeoutArgsForCall []struct {
		arg1 time.Duration
	}
	cloneWithTimeoutReturns struct {
		result1 clusterclient.Client
	}
	cloneWithTimeoutReturnsOnCall map[int]struct {
		result1 clusterclient.Client
	}
	CreateNamespaceStub        func(string) error
	createNamespaceMutex       sync.RWMutex
	createNamespaceArgsForCall []struct {
		arg1 string
	}
	createNamespaceReturns struct {
		result1 error
	}
	createNamespaceReturnsOnCall map[int]struct {
		result1 error
	}
	CreateResourceStub        func(interface{}, string, string, ...client.CreateOption) error
	createResourceMutex       sync.RWMutex
	createResourceArgsForCall []struct {
		arg1 interface{}
		arg2 string
		arg3 string
		arg4 []client.CreateOption
	}
	createResourceReturns struct {
		result1 error
	}
	createResourceReturnsOnCall map[int]struct {
		result1 error
	}
	DeactivateTanzuKubernetesReleasesStub        func(string) error
	deactivateTanzuKubernetesReleasesMutex       sync.RWMutex
	deactivateTanzuKubernetesReleasesArgsForCall []struct {
		arg1 string
	}
	deactivateTanzuKubernetesReleasesReturns struct {
		result1 error
	}
	deactivateTanzuKubernetesReleasesReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteClusterStub        func(string, string) error
	deleteClusterMutex       sync.RWMutex
	deleteClusterArgsForCall []struct {
		arg1 string
		arg2 string
	}
	deleteClusterReturns struct {
		result1 error
	}
	deleteClusterReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteExistingKappControllerStub        func() error
	deleteExistingKappControllerMutex       sync.RWMutex
	deleteExistingKappControllerArgsForCall []struct {
	}
	deleteExistingKappControllerReturns struct {
		result1 error
	}
	deleteExistingKappControllerReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteResourceStub        func(interface{}) error
	deleteResourceMutex       sync.RWMutex
	deleteResourceArgsForCall []struct {
		arg1 interface{}
	}
	deleteResourceReturns struct {
		result1 error
	}
	deleteResourceReturnsOnCall map[int]struct {
		result1 error
	}
	ExportCurrentKubeconfigToFileStub        func() (string, error)
	exportCurrentKubeconfigToFileMutex       sync.RWMutex
	exportCurrentKubeconfigToFileArgsForCall []struct {
	}
	exportCurrentKubeconfigToFileReturns struct {
		result1 string
		result2 error
	}
	exportCurrentKubeconfigToFileReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GetAWSCredentialsFromSecretStub        func() (string, error)
	getAWSCredentialsFromSecretMutex       sync.RWMutex
	getAWSCredentialsFromSecretArgsForCall []struct {
	}
	getAWSCredentialsFromSecretReturns struct {
		result1 string
		result2 error
	}
	getAWSCredentialsFromSecretReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GetAzureCredentialsFromSecretStub        func() (azure.Credentials, error)
	getAzureCredentialsFromSecretMutex       sync.RWMutex
	getAzureCredentialsFromSecretArgsForCall []struct {
	}
	getAzureCredentialsFromSecretReturns struct {
		result1 azure.Credentials
		result2 error
	}
	getAzureCredentialsFromSecretReturnsOnCall map[int]struct {
		result1 azure.Credentials
		result2 error
	}
	GetBomConfigMapStub        func(string) (v1.ConfigMap, error)
	getBomConfigMapMutex       sync.RWMutex
	getBomConfigMapArgsForCall []struct {
		arg1 string
	}
	getBomConfigMapReturns struct {
		result1 v1.ConfigMap
		result2 error
	}
	getBomConfigMapReturnsOnCall map[int]struct {
		result1 v1.ConfigMap
		result2 error
	}
	GetClientSetStub        func() clusterclient.CrtClient
	getClientSetMutex       sync.RWMutex
	getClientSetArgsForCall []struct {
	}
	getClientSetReturns struct {
		result1 clusterclient.CrtClient
	}
	getClientSetReturnsOnCall map[int]struct {
		result1 clusterclient.CrtClient
	}
	GetClusterInfrastructureStub        func() (string, error)
	getClusterInfrastructureMutex       sync.RWMutex
	getClusterInfrastructureArgsForCall []struct {
	}
	getClusterInfrastructureReturns struct {
		result1 string
		result2 error
	}
	getClusterInfrastructureReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GetCurrentClusterNameStub        func(string) (string, error)
	getCurrentClusterNameMutex       sync.RWMutex
	getCurrentClusterNameArgsForCall []struct {
		arg1 string
	}
	getCurrentClusterNameReturns struct {
		result1 string
		result2 error
	}
	getCurrentClusterNameReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GetCurrentKubeContextStub        func() (string, error)
	getCurrentKubeContextMutex       sync.RWMutex
	getCurrentKubeContextArgsForCall []struct {
	}
	getCurrentKubeContextReturns struct {
		result1 string
		result2 error
	}
	getCurrentKubeContextReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GetCurrentKubeconfigFileStub        func() string
	getCurrentKubeconfigFileMutex       sync.RWMutex
	getCurrentKubeconfigFileArgsForCall []struct {
	}
	getCurrentKubeconfigFileReturns struct {
		result1 string
	}
	getCurrentKubeconfigFileReturnsOnCall map[int]struct {
		result1 string
	}
	GetCurrentNamespaceStub        func() (string, error)
	getCurrentNamespaceMutex       sync.RWMutex
	getCurrentNamespaceArgsForCall []struct {
	}
	getCurrentNamespaceReturns struct {
		result1 string
		result2 error
	}
	getCurrentNamespaceReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GetKCPObjectForClusterStub        func(string, string) (*v1alpha3.KubeadmControlPlane, error)
	getKCPObjectForClusterMutex       sync.RWMutex
	getKCPObjectForClusterArgsForCall []struct {
		arg1 string
		arg2 string
	}
	getKCPObjectForClusterReturns struct {
		result1 *v1alpha3.KubeadmControlPlane
		result2 error
	}
	getKCPObjectForClusterReturnsOnCall map[int]struct {
		result1 *v1alpha3.KubeadmControlPlane
		result2 error
	}
	GetKubeConfigForClusterStub        func(string, string, *clusterclient.PollOptions) ([]byte, error)
	getKubeConfigForClusterMutex       sync.RWMutex
	getKubeConfigForClusterArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 *clusterclient.PollOptions
	}
	getKubeConfigForClusterReturns struct {
		result1 []byte
		result2 error
	}
	getKubeConfigForClusterReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	GetKubernetesVersionStub        func() (string, error)
	getKubernetesVersionMutex       sync.RWMutex
	getKubernetesVersionArgsForCall []struct {
	}
	getKubernetesVersionReturns struct {
		result1 string
		result2 error
	}
	getKubernetesVersionReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GetMDObjectForClusterStub        func(string, string) ([]v1alpha3a.MachineDeployment, error)
	getMDObjectForClusterMutex       sync.RWMutex
	getMDObjectForClusterArgsForCall []struct {
		arg1 string
		arg2 string
	}
	getMDObjectForClusterReturns struct {
		result1 []v1alpha3a.MachineDeployment
		result2 error
	}
	getMDObjectForClusterReturnsOnCall map[int]struct {
		result1 []v1alpha3a.MachineDeployment
		result2 error
	}
	GetMachineObjectsForClusterStub        func(string, string) (map[string]v1alpha3a.Machine, map[string]v1alpha3a.Machine, error)
	getMachineObjectsForClusterMutex       sync.RWMutex
	getMachineObjectsForClusterArgsForCall []struct {
		arg1 string
		arg2 string
	}
	getMachineObjectsForClusterReturns struct {
		result1 map[string]v1alpha3a.Machine
		result2 map[string]v1alpha3a.Machine
		result3 error
	}
	getMachineObjectsForClusterReturnsOnCall map[int]struct {
		result1 map[string]v1alpha3a.Machine
		result2 map[string]v1alpha3a.Machine
		result3 error
	}
	GetManagementClusterTKGVersionStub        func(string, string) (string, error)
	getManagementClusterTKGVersionMutex       sync.RWMutex
	getManagementClusterTKGVersionArgsForCall []struct {
		arg1 string
		arg2 string
	}
	getManagementClusterTKGVersionReturns struct {
		result1 string
		result2 error
	}
	getManagementClusterTKGVersionReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GetPacificTKCAPIVersionStub        func() (string, error)
	getPacificTKCAPIVersionMutex       sync.RWMutex
	getPacificTKCAPIVersionArgsForCall []struct {
	}
	getPacificTKCAPIVersionReturns struct {
		result1 string
		result2 error
	}
	getPacificTKCAPIVersionReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GetPacificTanzuKubernetesReleasesStub        func() ([]string, error)
	getPacificTanzuKubernetesReleasesMutex       sync.RWMutex
	getPacificTanzuKubernetesReleasesArgsForCall []struct {
	}
	getPacificTanzuKubernetesReleasesReturns struct {
		result1 []string
		result2 error
	}
	getPacificTanzuKubernetesReleasesReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	GetPinnipedIssuerURLAndCAStub        func() (string, string, error)
	getPinnipedIssuerURLAndCAMutex       sync.RWMutex
	getPinnipedIssuerURLAndCAArgsForCall []struct {
	}
	getPinnipedIssuerURLAndCAReturns struct {
		result1 string
		result2 string
		result3 error
	}
	getPinnipedIssuerURLAndCAReturnsOnCall map[int]struct {
		result1 string
		result2 string
		result3 error
	}
	GetRegionalClusterDefaultProviderNameStub        func(v1alpha3b.ProviderType) (string, error)
	getRegionalClusterDefaultProviderNameMutex       sync.RWMutex
	getRegionalClusterDefaultProviderNameArgsForCall []struct {
		arg1 v1alpha3b.ProviderType
	}
	getRegionalClusterDefaultProviderNameReturns struct {
		result1 string
		result2 error
	}
	getRegionalClusterDefaultProviderNameReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GetResourceStub        func(interface{}, string, string, clusterclient.PostVerifyrFunc, *clusterclient.PollOptions) error
	getResourceMutex       sync.RWMutex
	getResourceArgsForCall []struct {
		arg1 interface{}
		arg2 string
		arg3 string
		arg4 clusterclient.PostVerifyrFunc
		arg5 *clusterclient.PollOptions
	}
	getResourceReturns struct {
		result1 error
	}
	getResourceReturnsOnCall map[int]struct {
		result1 error
	}
	GetResourceListStub        func(interface{}, string, string, clusterclient.PostVerifyrFunc, *clusterclient.PollOptions) error
	getResourceListMutex       sync.RWMutex
	getResourceListArgsForCall []struct {
		arg1 interface{}
		arg2 string
		arg3 string
		arg4 clusterclient.PostVerifyrFunc
		arg5 *clusterclient.PollOptions
	}
	getResourceListReturns struct {
		result1 error
	}
	getResourceListReturnsOnCall map[int]struct {
		result1 error
	}
	GetSecretValueStub        func(string, string, string, *clusterclient.PollOptions) ([]byte, error)
	getSecretValueMutex       sync.RWMutex
	getSecretValueArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 *clusterclient.PollOptions
	}
	getSecretValueReturns struct {
		result1 []byte
		result2 error
	}
	getSecretValueReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	GetTanzuKubernetesReleasesStub        func(string) ([]v1alpha1.TanzuKubernetesRelease, error)
	getTanzuKubernetesReleasesMutex       sync.RWMutex
	getTanzuKubernetesReleasesArgsForCall []struct {
		arg1 string
	}
	getTanzuKubernetesReleasesReturns struct {
		result1 []v1alpha1.TanzuKubernetesRelease
		result2 error
	}
	getTanzuKubernetesReleasesReturnsOnCall map[int]struct {
		result1 []v1alpha1.TanzuKubernetesRelease
		result2 error
	}
	GetVCClientAndDataCenterStub        func(string, string, string) (vc.Client, string, error)
	getVCClientAndDataCenterMutex       sync.RWMutex
	getVCClientAndDataCenterArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	getVCClientAndDataCenterReturns struct {
		result1 vc.Client
		result2 string
		result3 error
	}
	getVCClientAndDataCenterReturnsOnCall map[int]struct {
		result1 vc.Client
		result2 string
		result3 error
	}
	GetVCCredentialsFromSecretStub        func(string) (string, string, error)
	getVCCredentialsFromSecretMutex       sync.RWMutex
	getVCCredentialsFromSecretArgsForCall []struct {
		arg1 string
	}
	getVCCredentialsFromSecretReturns struct {
		result1 string
		result2 string
		result3 error
	}
	getVCCredentialsFromSecretReturnsOnCall map[int]struct {
		result1 string
		result2 string
		result3 error
	}
	GetVCServerStub        func() (string, error)
	getVCServerMutex       sync.RWMutex
	getVCServerArgsForCall []struct {
	}
	getVCServerReturns struct {
		result1 string
		result2 error
	}
	getVCServerReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	HasCEIPTelemetryJobStub        func(string) (bool, error)
	hasCEIPTelemetryJobMutex       sync.RWMutex
	hasCEIPTelemetryJobArgsForCall []struct {
		arg1 string
	}
	hasCEIPTelemetryJobReturns struct {
		result1 bool
		result2 error
	}
	hasCEIPTelemetryJobReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	IsClusterRegisteredToTMCStub        func() (bool, error)
	isClusterRegisteredToTMCMutex       sync.RWMutex
	isClusterRegisteredToTMCArgsForCall []struct {
	}
	isClusterRegisteredToTMCReturns struct {
		result1 bool
		result2 error
	}
	isClusterRegisteredToTMCReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	IsPacificRegionalClusterStub        func() (bool, error)
	isPacificRegionalClusterMutex       sync.RWMutex
	isPacificRegionalClusterArgsForCall []struct {
	}
	isPacificRegionalClusterReturns struct {
		result1 bool
		result2 error
	}
	isPacificRegionalClusterReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	IsRegionalClusterStub        func() error
	isRegionalClusterMutex       sync.RWMutex
	isRegionalClusterArgsForCall []struct {
	}
	isRegionalClusterReturns struct {
		result1 error
	}
	isRegionalClusterReturnsOnCall map[int]struct {
		result1 error
	}
	ListClustersStub        func(string) ([]v1alpha3a.Cluster, error)
	listClustersMutex       sync.RWMutex
	listClustersArgsForCall []struct {
		arg1 string
	}
	listClustersReturns struct {
		result1 []v1alpha3a.Cluster
		result2 error
	}
	listClustersReturnsOnCall map[int]struct {
		result1 []v1alpha3a.Cluster
		result2 error
	}
	ListPacificClusterObjectsStub        func(string, *client.ListOptions) ([]interface{}, error)
	listPacificClusterObjectsMutex       sync.RWMutex
	listPacificClusterObjectsArgsForCall []struct {
		arg1 string
		arg2 *client.ListOptions
	}
	listPacificClusterObjectsReturns struct {
		result1 []interface{}
		result2 error
	}
	listPacificClusterObjectsReturnsOnCall map[int]struct {
		result1 []interface{}
		result2 error
	}
	ListResourcesStub        func(interface{}, ...client.ListOption) error
	listResourcesMutex       sync.RWMutex
	listResourcesArgsForCall []struct {
		arg1 interface{}
		arg2 []client.ListOption
	}
	listResourcesReturns struct {
		result1 error
	}
	listResourcesReturnsOnCall map[int]struct {
		result1 error
	}
	LoadCurrentKubeconfigBytesStub        func() ([]byte, error)
	loadCurrentKubeconfigBytesMutex       sync.RWMutex
	loadCurrentKubeconfigBytesArgsForCall []struct {
	}
	loadCurrentKubeconfigBytesReturns struct {
		result1 []byte
		result2 error
	}
	loadCurrentKubeconfigBytesReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	MergeAndUseConfigForClusterStub        func([]byte, string) (string, string, error)
	mergeAndUseConfigForClusterMutex       sync.RWMutex
	mergeAndUseConfigForClusterArgsForCall []struct {
		arg1 []byte
		arg2 string
	}
	mergeAndUseConfigForClusterReturns struct {
		result1 string
		result2 string
		result3 error
	}
	mergeAndUseConfigForClusterReturnsOnCall map[int]struct {
		result1 string
		result2 string
		result3 error
	}
	MergeConfigForClusterStub        func([]byte, string) error
	mergeConfigForClusterMutex       sync.RWMutex
	mergeConfigForClusterArgsForCall []struct {
		arg1 []byte
		arg2 string
	}
	mergeConfigForClusterReturns struct {
		result1 error
	}
	mergeConfigForClusterReturnsOnCall map[int]struct {
		result1 error
	}
	PatchCalicoKubeControllerDeploymentWithNewNodeSelectorStub        func(string, string) error
	patchCalicoKubeControllerDeploymentWithNewNodeSelectorMutex       sync.RWMutex
	patchCalicoKubeControllerDeploymentWithNewNodeSelectorArgsForCall []struct {
		arg1 string
		arg2 string
	}
	patchCalicoKubeControllerDeploymentWithNewNodeSelectorReturns struct {
		result1 error
	}
	patchCalicoKubeControllerDeploymentWithNewNodeSelectorReturnsOnCall map[int]struct {
		result1 error
	}
	PatchCalicoNodeDaemonSetWithNewNodeSelectorStub        func(string, string) error
	patchCalicoNodeDaemonSetWithNewNodeSelectorMutex       sync.RWMutex
	patchCalicoNodeDaemonSetWithNewNodeSelectorArgsForCall []struct {
		arg1 string
		arg2 string
	}
	patchCalicoNodeDaemonSetWithNewNodeSelectorReturns struct {
		result1 error
	}
	patchCalicoNodeDaemonSetWithNewNodeSelectorReturnsOnCall map[int]struct {
		result1 error
	}
	PatchClusterAPIAWSControllersToUseEC2CredentialsStub        func() error
	patchClusterAPIAWSControllersToUseEC2CredentialsMutex       sync.RWMutex
	patchClusterAPIAWSControllersToUseEC2CredentialsArgsForCall []struct {
	}
	patchClusterAPIAWSControllersToUseEC2CredentialsReturns struct {
		result1 error
	}
	patchClusterAPIAWSControllersToUseEC2CredentialsReturnsOnCall map[int]struct {
		result1 error
	}
	PatchClusterObjectStub        func(string, string, string) error
	patchClusterObjectMutex       sync.RWMutex
	patchClusterObjectArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	patchClusterObjectReturns struct {
		result1 error
	}
	patchClusterObjectReturnsOnCall map[int]struct {
		result1 error
	}
	PatchClusterObjectWithOptionalMetadataStub        func(string, string, string, map[string]string) (string, error)
	patchClusterObjectWithOptionalMetadataMutex       sync.RWMutex
	patchClusterObjectWithOptionalMetadataArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 map[string]string
	}
	patchClusterObjectWithOptionalMetadataReturns struct {
		result1 string
		result2 error
	}
	patchClusterObjectWithOptionalMetadataReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	PatchClusterObjectWithTKGVersionStub        func(string, string, string) error
	patchClusterObjectWithTKGVersionMutex       sync.RWMutex
	patchClusterObjectWithTKGVersionArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	patchClusterObjectWithTKGVersionReturns struct {
		result1 error
	}
	patchClusterObjectWithTKGVersionReturnsOnCall map[int]struct {
		result1 error
	}
	PatchClusterWithOperationStartedStatusStub        func(string, string, string, time.Duration) error
	patchClusterWithOperationStartedStatusMutex       sync.RWMutex
	patchClusterWithOperationStartedStatusArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 time.Duration
	}
	patchClusterWithOperationStartedStatusReturns struct {
		result1 error
	}
	patchClusterWithOperationStartedStatusReturnsOnCall map[int]struct {
		result1 error
	}
	PatchCoreDNSImageRepositoryInKubeadmConfigMapStub        func(string) error
	patchCoreDNSImageRepositoryInKubeadmConfigMapMutex       sync.RWMutex
	patchCoreDNSImageRepositoryInKubeadmConfigMapArgsForCall []struct {
		arg1 string
	}
	patchCoreDNSImageRepositoryInKubeadmConfigMapReturns struct {
		result1 error
	}
	patchCoreDNSImageRepositoryInKubeadmConfigMapReturnsOnCall map[int]struct {
		result1 error
	}
	PatchImageRepositoryInKubeProxyDaemonSetStub        func(string) error
	patchImageRepositoryInKubeProxyDaemonSetMutex       sync.RWMutex
	patchImageRepositoryInKubeProxyDaemonSetArgsForCall []struct {
		arg1 string
	}
	patchImageRepositoryInKubeProxyDaemonSetReturns struct {
		result1 error
	}
	patchImageRepositoryInKubeProxyDaemonSetReturnsOnCall map[int]struct {
		result1 error
	}
	PatchK8SVersionToPacificClusterStub        func(string, string, string) error
	patchK8SVersionToPacificClusterMutex       sync.RWMutex
	patchK8SVersionToPacificClusterArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	patchK8SVersionToPacificClusterReturns struct {
		result1 error
	}
	patchK8SVersionToPacificClusterReturnsOnCall map[int]struct {
		result1 error
	}
	PatchResourceStub        func(interface{}, string, string, string, types.PatchType, *clusterclient.PollOptions) error
	patchResourceMutex       sync.RWMutex
	patchResourceArgsForCall []struct {
		arg1 interface{}
		arg2 string
		arg3 string
		arg4 string
		arg5 types.PatchType
		arg6 *clusterclient.PollOptions
	}
	patchResourceReturns struct {
		result1 error
	}
	patchResourceReturnsOnCall map[int]struct {
		result1 error
	}
	RemoveCEIPTelemetryJobStub        func(string) error
	removeCEIPTelemetryJobMutex       sync.RWMutex
	removeCEIPTelemetryJobArgsForCall []struct {
		arg1 string
	}
	removeCEIPTelemetryJobReturns struct {
		result1 error
	}
	removeCEIPTelemetryJobReturnsOnCall map[int]struct {
		result1 error
	}
	ScalePacificClusterControlPlaneStub        func(string, string, int32) error
	scalePacificClusterControlPlaneMutex       sync.RWMutex
	scalePacificClusterControlPlaneArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 int32
	}
	scalePacificClusterControlPlaneReturns struct {
		result1 error
	}
	scalePacificClusterControlPlaneReturnsOnCall map[int]struct {
		result1 error
	}
	ScalePacificClusterWorkerNodesStub        func(string, string, int32) error
	scalePacificClusterWorkerNodesMutex       sync.RWMutex
	scalePacificClusterWorkerNodesArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 int32
	}
	scalePacificClusterWorkerNodesReturns struct {
		result1 error
	}
	scalePacificClusterWorkerNodesReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateAWSCNIIngressRulesStub        func(string, string) error
	updateAWSCNIIngressRulesMutex       sync.RWMutex
	updateAWSCNIIngressRulesArgsForCall []struct {
		arg1 string
		arg2 string
	}
	updateAWSCNIIngressRulesReturns struct {
		result1 error
	}
	updateAWSCNIIngressRulesReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateCapvManagerBootstrapCredentialsSecretStub        func(string, string) error
	updateCapvManagerBootstrapCredentialsSecretMutex       sync.RWMutex
	updateCapvManagerBootstrapCredentialsSecretArgsForCall []struct {
		arg1 string
		arg2 string
	}
	updateCapvManagerBootstrapCredentialsSecretReturns struct {
		result1 error
	}
	updateCapvManagerBootstrapCredentialsSecretReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateReplicasStub        func(interface{}, string, string, int32) error
	updateReplicasMutex       sync.RWMutex
	updateReplicasArgsForCall []struct {
		arg1 interface{}
		arg2 string
		arg3 string
		arg4 int32
	}
	updateReplicasReturns struct {
		result1 error
	}
	updateReplicasReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateResourceStub        func(interface{}, string, string, ...client.UpdateOption) error
	updateResourceMutex       sync.RWMutex
	updateResourceArgsForCall []struct {
		arg1 interface{}
		arg2 string
		arg3 string
		arg4 []client.UpdateOption
	}
	updateResourceReturns struct {
		result1 error
	}
	updateResourceReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateVsphereCloudProviderCredentialsSecretStub        func(string, string, string, string) error
	updateVsphereCloudProviderCredentialsSecretMutex       sync.RWMutex
	updateVsphereCloudProviderCredentialsSecretArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
	}
	updateVsphereCloudProviderCredentialsSecretReturns struct {
		result1 error
	}
	updateVsphereCloudProviderCredentialsSecretReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateVsphereCsiConfigSecretStub        func(string, string, string, string) error
	updateVsphereCsiConfigSecretMutex       sync.RWMutex
	updateVsphereCsiConfigSecretArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
	}
	updateVsphereCsiConfigSecretReturns struct {
		result1 error
	}
	updateVsphereCsiConfigSecretReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateVsphereIdentityRefSecretStub        func(string, string, string, string) error
	updateVsphereIdentityRefSecretMutex       sync.RWMutex
	updateVsphereIdentityRefSecretArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
	}
	updateVsphereIdentityRefSecretReturns struct {
		result1 error
	}
	updateVsphereIdentityRefSecretReturnsOnCall map[int]struct {
		result1 error
	}
	UseContextStub        func(string) error
	useContextMutex       sync.RWMutex
	useContextArgsForCall []struct {
		arg1 string
	}
	useContextReturns struct {
		result1 error
	}
	useContextReturnsOnCall map[int]struct {
		result1 error
	}
	WaitForAVIResourceCleanUpStub        func(string, string) error
	waitForAVIResourceCleanUpMutex       sync.RWMutex
	waitForAVIResourceCleanUpArgsForCall []struct {
		arg1 string
		arg2 string
	}
	waitForAVIResourceCleanUpReturns struct {
		result1 error
	}
	waitForAVIResourceCleanUpReturnsOnCall map[int]struct {
		result1 error
	}
	WaitForAutoscalerDeploymentStub        func(string, string) error
	waitForAutoscalerDeploymentMutex       sync.RWMutex
	waitForAutoscalerDeploymentArgsForCall []struct {
		arg1 string
		arg2 string
	}
	waitForAutoscalerDeploymentReturns struct {
		result1 error
	}
	waitForAutoscalerDeploymentReturnsOnCall map[int]struct {
		result1 error
	}
	WaitForClusterDeletionStub        func(string, string) error
	waitForClusterDeletionMutex       sync.RWMutex
	waitForClusterDeletionArgsForCall []struct {
		arg1 string
		arg2 string
	}
	waitForClusterDeletionReturns struct {
		result1 error
	}
	waitForClusterDeletionReturnsOnCall map[int]struct {
		result1 error
	}
	WaitForClusterInitializedStub        func(string, string) error
	waitForClusterInitializedMutex       sync.RWMutex
	waitForClusterInitializedArgsForCall []struct {
		arg1 string
		arg2 string
	}
	waitForClusterInitializedReturns struct {
		result1 error
	}
	waitForClusterInitializedReturnsOnCall map[int]struct {
		result1 error
	}
	WaitForClusterReadyStub        func(string, string, bool) error
	waitForClusterReadyMutex       sync.RWMutex
	waitForClusterReadyArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 bool
	}
	waitForClusterReadyReturns struct {
		result1 error
	}
	waitForClusterReadyReturnsOnCall map[int]struct {
		result1 error
	}
	WaitForDeploymentStub        func(string, string) error
	waitForDeploymentMutex       sync.RWMutex
	waitForDeploymentArgsForCall []struct {
		arg1 string
		arg2 string
	}
	waitForDeploymentReturns struct {
		result1 error
	}
	waitForDeploymentReturnsOnCall map[int]struct {
		result1 error
	}
	WaitForPacificClusterStub        func(string, string) error
	waitForPacificClusterMutex       sync.RWMutex
	waitForPacificClusterArgsForCall []struct {
		arg1 string
		arg2 string
	}
	waitForPacificClusterReturns struct {
		result1 error
	}
	waitForPacificClusterReturnsOnCall map[int]struct {
		result1 error
	}
	WaitForPacificClusterK8sVersionUpdateStub        func(string, string, string) error
	waitForPacificClusterK8sVersionUpdateMutex       sync.RWMutex
	waitForPacificClusterK8sVersionUpdateArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	waitForPacificClusterK8sVersionUpdateReturns struct {
		result1 error
	}
	waitForPacificClusterK8sVersionUpdateReturnsOnCall map[int]struct {
		result1 error
	}
	WaitForPackageInstallStub        func(string, string, time.Duration) error
	waitForPackageInstallMutex       sync.RWMutex
	waitForPackageInstallArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 time.Duration
	}
	waitForPackageInstallReturns struct {
		result1 error
	}
	waitForPackageInstallReturnsOnCall map[int]struct {
		result1 error
	}
	WaitK8sVersionUpdateForCPNodesStub        func(string, string, string, clusterclient.Client) error
	waitK8sVersionUpdateForCPNodesMutex       sync.RWMutex
	waitK8sVersionUpdateForCPNodesArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 clusterclient.Client
	}
	waitK8sVersionUpdateForCPNodesReturns struct {
		result1 error
	}
	waitK8sVersionUpdateForCPNodesReturnsOnCall map[int]struct {
		result1 error
	}
	WaitK8sVersionUpdateForWorkerNodesStub        func(string, string, string, clusterclient.Client) error
	waitK8sVersionUpdateForWorkerNodesMutex       sync.RWMutex
	waitK8sVersionUpdateForWorkerNodesArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 clusterclient.Client
	}
	waitK8sVersionUpdateForWorkerNodesReturns struct {
		result1 error
	}
	waitK8sVersionUpdateForWorkerNodesReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ClusterClient) ActivateTanzuKubernetesReleases(arg1 string) error {
	fake.activateTanzuKubernetesReleasesMutex.Lock()
	ret, specificReturn := fake.activateTanzuKubernetesReleasesReturnsOnCall[len(fake.activateTanzuKubernetesReleasesArgsForCall)]
	fake.activateTanzuKubernetesReleasesArgsForCall = append(fake.activateTanzuKubernetesReleasesArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("ActivateTanzuKubernetesReleases", []interface{}{arg1})
	fake.activateTanzuKubernetesReleasesMutex.Unlock()
	if fake.ActivateTanzuKubernetesReleasesStub != nil {
		return fake.ActivateTanzuKubernetesReleasesStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.activateTanzuKubernetesReleasesReturns
	return fakeReturns.result1
}

func (fake *ClusterClient) ActivateTanzuKubernetesReleasesCallCount() int {
	fake.activateTanzuKubernetesReleasesMutex.RLock()
	defer fake.activateTanzuKubernetesReleasesMutex.RUnlock()
	return len(fake.activateTanzuKubernetesReleasesArgsForCall)
}

func (fake *ClusterClient) ActivateTanzuKubernetesReleasesCalls(stub func(string) error) {
	fake.activateTanzuKubernetesReleasesMutex.Lock()
	defer fake.activateTanzuKubernetesReleasesMutex.Unlock()
	fake.ActivateTanzuKubernetesReleasesStub = stub
}

func (fake *ClusterClient) ActivateTanzuKubernetesReleasesArgsForCall(i int) string {
	fake.activateTanzuKubernetesReleasesMutex.RLock()
	defer fake.activateTanzuKubernetesReleasesMutex.RUnlock()
	argsForCall := fake.activateTanzuKubernetesReleasesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *ClusterClient) ActivateTanzuKubernetesReleasesReturns(result1 error) {
	fake.activateTanzuKubernetesReleasesMutex.Lock()
	defer fake.activateTanzuKubernetesReleasesMutex.Unlock()
	fake.ActivateTanzuKubernetesReleasesStub = nil
	fake.activateTanzuKubernetesReleasesReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) ActivateTanzuKubernetesReleasesReturnsOnCall(i int, result1 error) {
	fake.activateTanzuKubernetesReleasesMutex.Lock()
	defer fake.activateTanzuKubernetesReleasesMutex.Unlock()
	fake.ActivateTanzuKubernetesReleasesStub = nil
	if fake.activateTanzuKubernetesReleasesReturnsOnCall == nil {
		fake.activateTanzuKubernetesReleasesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.activateTanzuKubernetesReleasesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) AddCEIPTelemetryJob(arg1 string, arg2 string, arg3 *tkgconfigbom.BOMConfiguration, arg4 string, arg5 string, arg6 string, arg7 string, arg8 string) error {
	fake.addCEIPTelemetryJobMutex.Lock()
	ret, specificReturn := fake.addCEIPTelemetryJobReturnsOnCall[len(fake.addCEIPTelemetryJobArgsForCall)]
	fake.addCEIPTelemetryJobArgsForCall = append(fake.addCEIPTelemetryJobArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 *tkgconfigbom.BOMConfiguration
		arg4 string
		arg5 string
		arg6 string
		arg7 string
		arg8 string
	}{arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8})
	fake.recordInvocation("AddCEIPTelemetryJob", []interface{}{arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8})
	fake.addCEIPTelemetryJobMutex.Unlock()
	if fake.AddCEIPTelemetryJobStub != nil {
		return fake.AddCEIPTelemetryJobStub(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.addCEIPTelemetryJobReturns
	return fakeReturns.result1
}

func (fake *ClusterClient) AddCEIPTelemetryJobCallCount() int {
	fake.addCEIPTelemetryJobMutex.RLock()
	defer fake.addCEIPTelemetryJobMutex.RUnlock()
	return len(fake.addCEIPTelemetryJobArgsForCall)
}

func (fake *ClusterClient) AddCEIPTelemetryJobCalls(stub func(string, string, *tkgconfigbom.BOMConfiguration, string, string, string, string, string) error) {
	fake.addCEIPTelemetryJobMutex.Lock()
	defer fake.addCEIPTelemetryJobMutex.Unlock()
	fake.AddCEIPTelemetryJobStub = stub
}

func (fake *ClusterClient) AddCEIPTelemetryJobArgsForCall(i int) (string, string, *tkgconfigbom.BOMConfiguration, string, string, string, string, string) {
	fake.addCEIPTelemetryJobMutex.RLock()
	defer fake.addCEIPTelemetryJobMutex.RUnlock()
	argsForCall := fake.addCEIPTelemetryJobArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5, argsForCall.arg6, argsForCall.arg7, argsForCall.arg8
}

func (fake *ClusterClient) AddCEIPTelemetryJobReturns(result1 error) {
	fake.addCEIPTelemetryJobMutex.Lock()
	defer fake.addCEIPTelemetryJobMutex.Unlock()
	fake.AddCEIPTelemetryJobStub = nil
	fake.addCEIPTelemetryJobReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) AddCEIPTelemetryJobReturnsOnCall(i int, result1 error) {
	fake.addCEIPTelemetryJobMutex.Lock()
	defer fake.addCEIPTelemetryJobMutex.Unlock()
	fake.AddCEIPTelemetryJobStub = nil
	if fake.addCEIPTelemetryJobReturnsOnCall == nil {
		fake.addCEIPTelemetryJobReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addCEIPTelemetryJobReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) Apply(arg1 string) error {
	fake.applyMutex.Lock()
	ret, specificReturn := fake.applyReturnsOnCall[len(fake.applyArgsForCall)]
	fake.applyArgsForCall = append(fake.applyArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("Apply", []interface{}{arg1})
	fake.applyMutex.Unlock()
	if fake.ApplyStub != nil {
		return fake.ApplyStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.applyReturns
	return fakeReturns.result1
}

func (fake *ClusterClient) ApplyCallCount() int {
	fake.applyMutex.RLock()
	defer fake.applyMutex.RUnlock()
	return len(fake.applyArgsForCall)
}

func (fake *ClusterClient) ApplyCalls(stub func(string) error) {
	fake.applyMutex.Lock()
	defer fake.applyMutex.Unlock()
	fake.ApplyStub = stub
}

func (fake *ClusterClient) ApplyArgsForCall(i int) string {
	fake.applyMutex.RLock()
	defer fake.applyMutex.RUnlock()
	argsForCall := fake.applyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *ClusterClient) ApplyReturns(result1 error) {
	fake.applyMutex.Lock()
	defer fake.applyMutex.Unlock()
	fake.ApplyStub = nil
	fake.applyReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) ApplyReturnsOnCall(i int, result1 error) {
	fake.applyMutex.Lock()
	defer fake.applyMutex.Unlock()
	fake.ApplyStub = nil
	if fake.applyReturnsOnCall == nil {
		fake.applyReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.applyReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) ApplyFile(arg1 string) error {
	fake.applyFileMutex.Lock()
	ret, specificReturn := fake.applyFileReturnsOnCall[len(fake.applyFileArgsForCall)]
	fake.applyFileArgsForCall = append(fake.applyFileArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("ApplyFile", []interface{}{arg1})
	fake.applyFileMutex.Unlock()
	if fake.ApplyFileStub != nil {
		return fake.ApplyFileStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.applyFileReturns
	return fakeReturns.result1
}

func (fake *ClusterClient) ApplyFileCallCount() int {
	fake.applyFileMutex.RLock()
	defer fake.applyFileMutex.RUnlock()
	return len(fake.applyFileArgsForCall)
}

func (fake *ClusterClient) ApplyFileCalls(stub func(string) error) {
	fake.applyFileMutex.Lock()
	defer fake.applyFileMutex.Unlock()
	fake.ApplyFileStub = stub
}

func (fake *ClusterClient) ApplyFileArgsForCall(i int) string {
	fake.applyFileMutex.RLock()
	defer fake.applyFileMutex.RUnlock()
	argsForCall := fake.applyFileArgsForCall[i]
	return argsForCall.arg1
}

func (fake *ClusterClient) ApplyFileReturns(result1 error) {
	fake.applyFileMutex.Lock()
	defer fake.applyFileMutex.Unlock()
	fake.ApplyFileStub = nil
	fake.applyFileReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) ApplyFileReturnsOnCall(i int, result1 error) {
	fake.applyFileMutex.Lock()
	defer fake.applyFileMutex.Unlock()
	fake.ApplyFileStub = nil
	if fake.applyFileReturnsOnCall == nil {
		fake.applyFileReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.applyFileReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) CloneWithTimeout(arg1 time.Duration) clusterclient.Client {
	fake.cloneWithTimeoutMutex.Lock()
	ret, specificReturn := fake.cloneWithTimeoutReturnsOnCall[len(fake.cloneWithTimeoutArgsForCall)]
	fake.cloneWithTimeoutArgsForCall = append(fake.cloneWithTimeoutArgsForCall, struct {
		arg1 time.Duration
	}{arg1})
	fake.recordInvocation("CloneWithTimeout", []interface{}{arg1})
	fake.cloneWithTimeoutMutex.Unlock()
	if fake.CloneWithTimeoutStub != nil {
		return fake.CloneWithTimeoutStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.cloneWithTimeoutReturns
	return fakeReturns.result1
}

func (fake *ClusterClient) CloneWithTimeoutCallCount() int {
	fake.cloneWithTimeoutMutex.RLock()
	defer fake.cloneWithTimeoutMutex.RUnlock()
	return len(fake.cloneWithTimeoutArgsForCall)
}

func (fake *ClusterClient) CloneWithTimeoutCalls(stub func(time.Duration) clusterclient.Client) {
	fake.cloneWithTimeoutMutex.Lock()
	defer fake.cloneWithTimeoutMutex.Unlock()
	fake.CloneWithTimeoutStub = stub
}

func (fake *ClusterClient) CloneWithTimeoutArgsForCall(i int) time.Duration {
	fake.cloneWithTimeoutMutex.RLock()
	defer fake.cloneWithTimeoutMutex.RUnlock()
	argsForCall := fake.cloneWithTimeoutArgsForCall[i]
	return argsForCall.arg1
}

func (fake *ClusterClient) CloneWithTimeoutReturns(result1 clusterclient.Client) {
	fake.cloneWithTimeoutMutex.Lock()
	defer fake.cloneWithTimeoutMutex.Unlock()
	fake.CloneWithTimeoutStub = nil
	fake.cloneWithTimeoutReturns = struct {
		result1 clusterclient.Client
	}{result1}
}

func (fake *ClusterClient) CloneWithTimeoutReturnsOnCall(i int, result1 clusterclient.Client) {
	fake.cloneWithTimeoutMutex.Lock()
	defer fake.cloneWithTimeoutMutex.Unlock()
	fake.CloneWithTimeoutStub = nil
	if fake.cloneWithTimeoutReturnsOnCall == nil {
		fake.cloneWithTimeoutReturnsOnCall = make(map[int]struct {
			result1 clusterclient.Client
		})
	}
	fake.cloneWithTimeoutReturnsOnCall[i] = struct {
		result1 clusterclient.Client
	}{result1}
}

func (fake *ClusterClient) CreateNamespace(arg1 string) error {
	fake.createNamespaceMutex.Lock()
	ret, specificReturn := fake.createNamespaceReturnsOnCall[len(fake.createNamespaceArgsForCall)]
	fake.createNamespaceArgsForCall = append(fake.createNamespaceArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("CreateNamespace", []interface{}{arg1})
	fake.createNamespaceMutex.Unlock()
	if fake.CreateNamespaceStub != nil {
		return fake.CreateNamespaceStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.createNamespaceReturns
	return fakeReturns.result1
}

func (fake *ClusterClient) CreateNamespaceCallCount() int {
	fake.createNamespaceMutex.RLock()
	defer fake.createNamespaceMutex.RUnlock()
	return len(fake.createNamespaceArgsForCall)
}

func (fake *ClusterClient) CreateNamespaceCalls(stub func(string) error) {
	fake.createNamespaceMutex.Lock()
	defer fake.createNamespaceMutex.Unlock()
	fake.CreateNamespaceStub = stub
}

func (fake *ClusterClient) CreateNamespaceArgsForCall(i int) string {
	fake.createNamespaceMutex.RLock()
	defer fake.createNamespaceMutex.RUnlock()
	argsForCall := fake.createNamespaceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *ClusterClient) CreateNamespaceReturns(result1 error) {
	fake.createNamespaceMutex.Lock()
	defer fake.createNamespaceMutex.Unlock()
	fake.CreateNamespaceStub = nil
	fake.createNamespaceReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) CreateNamespaceReturnsOnCall(i int, result1 error) {
	fake.createNamespaceMutex.Lock()
	defer fake.createNamespaceMutex.Unlock()
	fake.CreateNamespaceStub = nil
	if fake.createNamespaceReturnsOnCall == nil {
		fake.createNamespaceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createNamespaceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) CreateResource(arg1 interface{}, arg2 string, arg3 string, arg4 ...client.CreateOption) error {
	fake.createResourceMutex.Lock()
	ret, specificReturn := fake.createResourceReturnsOnCall[len(fake.createResourceArgsForCall)]
	fake.createResourceArgsForCall = append(fake.createResourceArgsForCall, struct {
		arg1 interface{}
		arg2 string
		arg3 string
		arg4 []client.CreateOption
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("CreateResource", []interface{}{arg1, arg2, arg3, arg4})
	fake.createResourceMutex.Unlock()
	if fake.CreateResourceStub != nil {
		return fake.CreateResourceStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.createResourceReturns
	return fakeReturns.result1
}

func (fake *ClusterClient) CreateResourceCallCount() int {
	fake.createResourceMutex.RLock()
	defer fake.createResourceMutex.RUnlock()
	return len(fake.createResourceArgsForCall)
}

func (fake *ClusterClient) CreateResourceCalls(stub func(interface{}, string, string, ...client.CreateOption) error) {
	fake.createResourceMutex.Lock()
	defer fake.createResourceMutex.Unlock()
	fake.CreateResourceStub = stub
}

func (fake *ClusterClient) CreateResourceArgsForCall(i int) (interface{}, string, string, []client.CreateOption) {
	fake.createResourceMutex.RLock()
	defer fake.createResourceMutex.RUnlock()
	argsForCall := fake.createResourceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *ClusterClient) CreateResourceReturns(result1 error) {
	fake.createResourceMutex.Lock()
	defer fake.createResourceMutex.Unlock()
	fake.CreateResourceStub = nil
	fake.createResourceReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) CreateResourceReturnsOnCall(i int, result1 error) {
	fake.createResourceMutex.Lock()
	defer fake.createResourceMutex.Unlock()
	fake.CreateResourceStub = nil
	if fake.createResourceReturnsOnCall == nil {
		fake.createResourceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createResourceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) DeactivateTanzuKubernetesReleases(arg1 string) error {
	fake.deactivateTanzuKubernetesReleasesMutex.Lock()
	ret, specificReturn := fake.deactivateTanzuKubernetesReleasesReturnsOnCall[len(fake.deactivateTanzuKubernetesReleasesArgsForCall)]
	fake.deactivateTanzuKubernetesReleasesArgsForCall = append(fake.deactivateTanzuKubernetesReleasesArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("DeactivateTanzuKubernetesReleases", []interface{}{arg1})
	fake.deactivateTanzuKubernetesReleasesMutex.Unlock()
	if fake.DeactivateTanzuKubernetesReleasesStub != nil {
		return fake.DeactivateTanzuKubernetesReleasesStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.deactivateTanzuKubernetesReleasesReturns
	return fakeReturns.result1
}

func (fake *ClusterClient) DeactivateTanzuKubernetesReleasesCallCount() int {
	fake.deactivateTanzuKubernetesReleasesMutex.RLock()
	defer fake.deactivateTanzuKubernetesReleasesMutex.RUnlock()
	return len(fake.deactivateTanzuKubernetesReleasesArgsForCall)
}

func (fake *ClusterClient) DeactivateTanzuKubernetesReleasesCalls(stub func(string) error) {
	fake.deactivateTanzuKubernetesReleasesMutex.Lock()
	defer fake.deactivateTanzuKubernetesReleasesMutex.Unlock()
	fake.DeactivateTanzuKubernetesReleasesStub = stub
}

func (fake *ClusterClient) DeactivateTanzuKubernetesReleasesArgsForCall(i int) string {
	fake.deactivateTanzuKubernetesReleasesMutex.RLock()
	defer fake.deactivateTanzuKubernetesReleasesMutex.RUnlock()
	argsForCall := fake.deactivateTanzuKubernetesReleasesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *ClusterClient) DeactivateTanzuKubernetesReleasesReturns(result1 error) {
	fake.deactivateTanzuKubernetesReleasesMutex.Lock()
	defer fake.deactivateTanzuKubernetesReleasesMutex.Unlock()
	fake.DeactivateTanzuKubernetesReleasesStub = nil
	fake.deactivateTanzuKubernetesReleasesReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) DeactivateTanzuKubernetesReleasesReturnsOnCall(i int, result1 error) {
	fake.deactivateTanzuKubernetesReleasesMutex.Lock()
	defer fake.deactivateTanzuKubernetesReleasesMutex.Unlock()
	fake.DeactivateTanzuKubernetesReleasesStub = nil
	if fake.deactivateTanzuKubernetesReleasesReturnsOnCall == nil {
		fake.deactivateTanzuKubernetesReleasesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deactivateTanzuKubernetesReleasesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) DeleteCluster(arg1 string, arg2 string) error {
	fake.deleteClusterMutex.Lock()
	ret, specificReturn := fake.deleteClusterReturnsOnCall[len(fake.deleteClusterArgsForCall)]
	fake.deleteClusterArgsForCall = append(fake.deleteClusterArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("DeleteCluster", []interface{}{arg1, arg2})
	fake.deleteClusterMutex.Unlock()
	if fake.DeleteClusterStub != nil {
		return fake.DeleteClusterStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.deleteClusterReturns
	return fakeReturns.result1
}

func (fake *ClusterClient) DeleteClusterCallCount() int {
	fake.deleteClusterMutex.RLock()
	defer fake.deleteClusterMutex.RUnlock()
	return len(fake.deleteClusterArgsForCall)
}

func (fake *ClusterClient) DeleteClusterCalls(stub func(string, string) error) {
	fake.deleteClusterMutex.Lock()
	defer fake.deleteClusterMutex.Unlock()
	fake.DeleteClusterStub = stub
}

func (fake *ClusterClient) DeleteClusterArgsForCall(i int) (string, string) {
	fake.deleteClusterMutex.RLock()
	defer fake.deleteClusterMutex.RUnlock()
	argsForCall := fake.deleteClusterArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ClusterClient) DeleteClusterReturns(result1 error) {
	fake.deleteClusterMutex.Lock()
	defer fake.deleteClusterMutex.Unlock()
	fake.DeleteClusterStub = nil
	fake.deleteClusterReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) DeleteClusterReturnsOnCall(i int, result1 error) {
	fake.deleteClusterMutex.Lock()
	defer fake.deleteClusterMutex.Unlock()
	fake.DeleteClusterStub = nil
	if fake.deleteClusterReturnsOnCall == nil {
		fake.deleteClusterReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteClusterReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) DeleteExistingKappController() error {
	fake.deleteExistingKappControllerMutex.Lock()
	ret, specificReturn := fake.deleteExistingKappControllerReturnsOnCall[len(fake.deleteExistingKappControllerArgsForCall)]
	fake.deleteExistingKappControllerArgsForCall = append(fake.deleteExistingKappControllerArgsForCall, struct {
	}{})
	fake.recordInvocation("DeleteExistingKappController", []interface{}{})
	fake.deleteExistingKappControllerMutex.Unlock()
	if fake.DeleteExistingKappControllerStub != nil {
		return fake.DeleteExistingKappControllerStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.deleteExistingKappControllerReturns
	return fakeReturns.result1
}

func (fake *ClusterClient) DeleteExistingKappControllerCallCount() int {
	fake.deleteExistingKappControllerMutex.RLock()
	defer fake.deleteExistingKappControllerMutex.RUnlock()
	return len(fake.deleteExistingKappControllerArgsForCall)
}

func (fake *ClusterClient) DeleteExistingKappControllerCalls(stub func() error) {
	fake.deleteExistingKappControllerMutex.Lock()
	defer fake.deleteExistingKappControllerMutex.Unlock()
	fake.DeleteExistingKappControllerStub = stub
}

func (fake *ClusterClient) DeleteExistingKappControllerReturns(result1 error) {
	fake.deleteExistingKappControllerMutex.Lock()
	defer fake.deleteExistingKappControllerMutex.Unlock()
	fake.DeleteExistingKappControllerStub = nil
	fake.deleteExistingKappControllerReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) DeleteExistingKappControllerReturnsOnCall(i int, result1 error) {
	fake.deleteExistingKappControllerMutex.Lock()
	defer fake.deleteExistingKappControllerMutex.Unlock()
	fake.DeleteExistingKappControllerStub = nil
	if fake.deleteExistingKappControllerReturnsOnCall == nil {
		fake.deleteExistingKappControllerReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteExistingKappControllerReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) DeleteResource(arg1 interface{}) error {
	fake.deleteResourceMutex.Lock()
	ret, specificReturn := fake.deleteResourceReturnsOnCall[len(fake.deleteResourceArgsForCall)]
	fake.deleteResourceArgsForCall = append(fake.deleteResourceArgsForCall, struct {
		arg1 interface{}
	}{arg1})
	fake.recordInvocation("DeleteResource", []interface{}{arg1})
	fake.deleteResourceMutex.Unlock()
	if fake.DeleteResourceStub != nil {
		return fake.DeleteResourceStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.deleteResourceReturns
	return fakeReturns.result1
}

func (fake *ClusterClient) DeleteResourceCallCount() int {
	fake.deleteResourceMutex.RLock()
	defer fake.deleteResourceMutex.RUnlock()
	return len(fake.deleteResourceArgsForCall)
}

func (fake *ClusterClient) DeleteResourceCalls(stub func(interface{}) error) {
	fake.deleteResourceMutex.Lock()
	defer fake.deleteResourceMutex.Unlock()
	fake.DeleteResourceStub = stub
}

func (fake *ClusterClient) DeleteResourceArgsForCall(i int) interface{} {
	fake.deleteResourceMutex.RLock()
	defer fake.deleteResourceMutex.RUnlock()
	argsForCall := fake.deleteResourceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *ClusterClient) DeleteResourceReturns(result1 error) {
	fake.deleteResourceMutex.Lock()
	defer fake.deleteResourceMutex.Unlock()
	fake.DeleteResourceStub = nil
	fake.deleteResourceReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) DeleteResourceReturnsOnCall(i int, result1 error) {
	fake.deleteResourceMutex.Lock()
	defer fake.deleteResourceMutex.Unlock()
	fake.DeleteResourceStub = nil
	if fake.deleteResourceReturnsOnCall == nil {
		fake.deleteResourceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteResourceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) ExportCurrentKubeconfigToFile() (string, error) {
	fake.exportCurrentKubeconfigToFileMutex.Lock()
	ret, specificReturn := fake.exportCurrentKubeconfigToFileReturnsOnCall[len(fake.exportCurrentKubeconfigToFileArgsForCall)]
	fake.exportCurrentKubeconfigToFileArgsForCall = append(fake.exportCurrentKubeconfigToFileArgsForCall, struct {
	}{})
	fake.recordInvocation("ExportCurrentKubeconfigToFile", []interface{}{})
	fake.exportCurrentKubeconfigToFileMutex.Unlock()
	if fake.ExportCurrentKubeconfigToFileStub != nil {
		return fake.ExportCurrentKubeconfigToFileStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.exportCurrentKubeconfigToFileReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ClusterClient) ExportCurrentKubeconfigToFileCallCount() int {
	fake.exportCurrentKubeconfigToFileMutex.RLock()
	defer fake.exportCurrentKubeconfigToFileMutex.RUnlock()
	return len(fake.exportCurrentKubeconfigToFileArgsForCall)
}

func (fake *ClusterClient) ExportCurrentKubeconfigToFileCalls(stub func() (string, error)) {
	fake.exportCurrentKubeconfigToFileMutex.Lock()
	defer fake.exportCurrentKubeconfigToFileMutex.Unlock()
	fake.ExportCurrentKubeconfigToFileStub = stub
}

func (fake *ClusterClient) ExportCurrentKubeconfigToFileReturns(result1 string, result2 error) {
	fake.exportCurrentKubeconfigToFileMutex.Lock()
	defer fake.exportCurrentKubeconfigToFileMutex.Unlock()
	fake.ExportCurrentKubeconfigToFileStub = nil
	fake.exportCurrentKubeconfigToFileReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) ExportCurrentKubeconfigToFileReturnsOnCall(i int, result1 string, result2 error) {
	fake.exportCurrentKubeconfigToFileMutex.Lock()
	defer fake.exportCurrentKubeconfigToFileMutex.Unlock()
	fake.ExportCurrentKubeconfigToFileStub = nil
	if fake.exportCurrentKubeconfigToFileReturnsOnCall == nil {
		fake.exportCurrentKubeconfigToFileReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.exportCurrentKubeconfigToFileReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetAWSCredentialsFromSecret() (string, error) {
	fake.getAWSCredentialsFromSecretMutex.Lock()
	ret, specificReturn := fake.getAWSCredentialsFromSecretReturnsOnCall[len(fake.getAWSCredentialsFromSecretArgsForCall)]
	fake.getAWSCredentialsFromSecretArgsForCall = append(fake.getAWSCredentialsFromSecretArgsForCall, struct {
	}{})
	fake.recordInvocation("GetAWSCredentialsFromSecret", []interface{}{})
	fake.getAWSCredentialsFromSecretMutex.Unlock()
	if fake.GetAWSCredentialsFromSecretStub != nil {
		return fake.GetAWSCredentialsFromSecretStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getAWSCredentialsFromSecretReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ClusterClient) GetAWSCredentialsFromSecretCallCount() int {
	fake.getAWSCredentialsFromSecretMutex.RLock()
	defer fake.getAWSCredentialsFromSecretMutex.RUnlock()
	return len(fake.getAWSCredentialsFromSecretArgsForCall)
}

func (fake *ClusterClient) GetAWSCredentialsFromSecretCalls(stub func() (string, error)) {
	fake.getAWSCredentialsFromSecretMutex.Lock()
	defer fake.getAWSCredentialsFromSecretMutex.Unlock()
	fake.GetAWSCredentialsFromSecretStub = stub
}

func (fake *ClusterClient) GetAWSCredentialsFromSecretReturns(result1 string, result2 error) {
	fake.getAWSCredentialsFromSecretMutex.Lock()
	defer fake.getAWSCredentialsFromSecretMutex.Unlock()
	fake.GetAWSCredentialsFromSecretStub = nil
	fake.getAWSCredentialsFromSecretReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetAWSCredentialsFromSecretReturnsOnCall(i int, result1 string, result2 error) {
	fake.getAWSCredentialsFromSecretMutex.Lock()
	defer fake.getAWSCredentialsFromSecretMutex.Unlock()
	fake.GetAWSCredentialsFromSecretStub = nil
	if fake.getAWSCredentialsFromSecretReturnsOnCall == nil {
		fake.getAWSCredentialsFromSecretReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getAWSCredentialsFromSecretReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetAzureCredentialsFromSecret() (azure.Credentials, error) {
	fake.getAzureCredentialsFromSecretMutex.Lock()
	ret, specificReturn := fake.getAzureCredentialsFromSecretReturnsOnCall[len(fake.getAzureCredentialsFromSecretArgsForCall)]
	fake.getAzureCredentialsFromSecretArgsForCall = append(fake.getAzureCredentialsFromSecretArgsForCall, struct {
	}{})
	fake.recordInvocation("GetAzureCredentialsFromSecret", []interface{}{})
	fake.getAzureCredentialsFromSecretMutex.Unlock()
	if fake.GetAzureCredentialsFromSecretStub != nil {
		return fake.GetAzureCredentialsFromSecretStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getAzureCredentialsFromSecretReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ClusterClient) GetAzureCredentialsFromSecretCallCount() int {
	fake.getAzureCredentialsFromSecretMutex.RLock()
	defer fake.getAzureCredentialsFromSecretMutex.RUnlock()
	return len(fake.getAzureCredentialsFromSecretArgsForCall)
}

func (fake *ClusterClient) GetAzureCredentialsFromSecretCalls(stub func() (azure.Credentials, error)) {
	fake.getAzureCredentialsFromSecretMutex.Lock()
	defer fake.getAzureCredentialsFromSecretMutex.Unlock()
	fake.GetAzureCredentialsFromSecretStub = stub
}

func (fake *ClusterClient) GetAzureCredentialsFromSecretReturns(result1 azure.Credentials, result2 error) {
	fake.getAzureCredentialsFromSecretMutex.Lock()
	defer fake.getAzureCredentialsFromSecretMutex.Unlock()
	fake.GetAzureCredentialsFromSecretStub = nil
	fake.getAzureCredentialsFromSecretReturns = struct {
		result1 azure.Credentials
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetAzureCredentialsFromSecretReturnsOnCall(i int, result1 azure.Credentials, result2 error) {
	fake.getAzureCredentialsFromSecretMutex.Lock()
	defer fake.getAzureCredentialsFromSecretMutex.Unlock()
	fake.GetAzureCredentialsFromSecretStub = nil
	if fake.getAzureCredentialsFromSecretReturnsOnCall == nil {
		fake.getAzureCredentialsFromSecretReturnsOnCall = make(map[int]struct {
			result1 azure.Credentials
			result2 error
		})
	}
	fake.getAzureCredentialsFromSecretReturnsOnCall[i] = struct {
		result1 azure.Credentials
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetBomConfigMap(arg1 string) (v1.ConfigMap, error) {
	fake.getBomConfigMapMutex.Lock()
	ret, specificReturn := fake.getBomConfigMapReturnsOnCall[len(fake.getBomConfigMapArgsForCall)]
	fake.getBomConfigMapArgsForCall = append(fake.getBomConfigMapArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetBomConfigMap", []interface{}{arg1})
	fake.getBomConfigMapMutex.Unlock()
	if fake.GetBomConfigMapStub != nil {
		return fake.GetBomConfigMapStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getBomConfigMapReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ClusterClient) GetBomConfigMapCallCount() int {
	fake.getBomConfigMapMutex.RLock()
	defer fake.getBomConfigMapMutex.RUnlock()
	return len(fake.getBomConfigMapArgsForCall)
}

func (fake *ClusterClient) GetBomConfigMapCalls(stub func(string) (v1.ConfigMap, error)) {
	fake.getBomConfigMapMutex.Lock()
	defer fake.getBomConfigMapMutex.Unlock()
	fake.GetBomConfigMapStub = stub
}

func (fake *ClusterClient) GetBomConfigMapArgsForCall(i int) string {
	fake.getBomConfigMapMutex.RLock()
	defer fake.getBomConfigMapMutex.RUnlock()
	argsForCall := fake.getBomConfigMapArgsForCall[i]
	return argsForCall.arg1
}

func (fake *ClusterClient) GetBomConfigMapReturns(result1 v1.ConfigMap, result2 error) {
	fake.getBomConfigMapMutex.Lock()
	defer fake.getBomConfigMapMutex.Unlock()
	fake.GetBomConfigMapStub = nil
	fake.getBomConfigMapReturns = struct {
		result1 v1.ConfigMap
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetBomConfigMapReturnsOnCall(i int, result1 v1.ConfigMap, result2 error) {
	fake.getBomConfigMapMutex.Lock()
	defer fake.getBomConfigMapMutex.Unlock()
	fake.GetBomConfigMapStub = nil
	if fake.getBomConfigMapReturnsOnCall == nil {
		fake.getBomConfigMapReturnsOnCall = make(map[int]struct {
			result1 v1.ConfigMap
			result2 error
		})
	}
	fake.getBomConfigMapReturnsOnCall[i] = struct {
		result1 v1.ConfigMap
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetClientSet() clusterclient.CrtClient {
	fake.getClientSetMutex.Lock()
	ret, specificReturn := fake.getClientSetReturnsOnCall[len(fake.getClientSetArgsForCall)]
	fake.getClientSetArgsForCall = append(fake.getClientSetArgsForCall, struct {
	}{})
	fake.recordInvocation("GetClientSet", []interface{}{})
	fake.getClientSetMutex.Unlock()
	if fake.GetClientSetStub != nil {
		return fake.GetClientSetStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getClientSetReturns
	return fakeReturns.result1
}

func (fake *ClusterClient) GetClientSetCallCount() int {
	fake.getClientSetMutex.RLock()
	defer fake.getClientSetMutex.RUnlock()
	return len(fake.getClientSetArgsForCall)
}

func (fake *ClusterClient) GetClientSetCalls(stub func() clusterclient.CrtClient) {
	fake.getClientSetMutex.Lock()
	defer fake.getClientSetMutex.Unlock()
	fake.GetClientSetStub = stub
}

func (fake *ClusterClient) GetClientSetReturns(result1 clusterclient.CrtClient) {
	fake.getClientSetMutex.Lock()
	defer fake.getClientSetMutex.Unlock()
	fake.GetClientSetStub = nil
	fake.getClientSetReturns = struct {
		result1 clusterclient.CrtClient
	}{result1}
}

func (fake *ClusterClient) GetClientSetReturnsOnCall(i int, result1 clusterclient.CrtClient) {
	fake.getClientSetMutex.Lock()
	defer fake.getClientSetMutex.Unlock()
	fake.GetClientSetStub = nil
	if fake.getClientSetReturnsOnCall == nil {
		fake.getClientSetReturnsOnCall = make(map[int]struct {
			result1 clusterclient.CrtClient
		})
	}
	fake.getClientSetReturnsOnCall[i] = struct {
		result1 clusterclient.CrtClient
	}{result1}
}

func (fake *ClusterClient) GetClusterInfrastructure() (string, error) {
	fake.getClusterInfrastructureMutex.Lock()
	ret, specificReturn := fake.getClusterInfrastructureReturnsOnCall[len(fake.getClusterInfrastructureArgsForCall)]
	fake.getClusterInfrastructureArgsForCall = append(fake.getClusterInfrastructureArgsForCall, struct {
	}{})
	fake.recordInvocation("GetClusterInfrastructure", []interface{}{})
	fake.getClusterInfrastructureMutex.Unlock()
	if fake.GetClusterInfrastructureStub != nil {
		return fake.GetClusterInfrastructureStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getClusterInfrastructureReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ClusterClient) GetClusterInfrastructureCallCount() int {
	fake.getClusterInfrastructureMutex.RLock()
	defer fake.getClusterInfrastructureMutex.RUnlock()
	return len(fake.getClusterInfrastructureArgsForCall)
}

func (fake *ClusterClient) GetClusterInfrastructureCalls(stub func() (string, error)) {
	fake.getClusterInfrastructureMutex.Lock()
	defer fake.getClusterInfrastructureMutex.Unlock()
	fake.GetClusterInfrastructureStub = stub
}

func (fake *ClusterClient) GetClusterInfrastructureReturns(result1 string, result2 error) {
	fake.getClusterInfrastructureMutex.Lock()
	defer fake.getClusterInfrastructureMutex.Unlock()
	fake.GetClusterInfrastructureStub = nil
	fake.getClusterInfrastructureReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetClusterInfrastructureReturnsOnCall(i int, result1 string, result2 error) {
	fake.getClusterInfrastructureMutex.Lock()
	defer fake.getClusterInfrastructureMutex.Unlock()
	fake.GetClusterInfrastructureStub = nil
	if fake.getClusterInfrastructureReturnsOnCall == nil {
		fake.getClusterInfrastructureReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getClusterInfrastructureReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetCurrentClusterName(arg1 string) (string, error) {
	fake.getCurrentClusterNameMutex.Lock()
	ret, specificReturn := fake.getCurrentClusterNameReturnsOnCall[len(fake.getCurrentClusterNameArgsForCall)]
	fake.getCurrentClusterNameArgsForCall = append(fake.getCurrentClusterNameArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetCurrentClusterName", []interface{}{arg1})
	fake.getCurrentClusterNameMutex.Unlock()
	if fake.GetCurrentClusterNameStub != nil {
		return fake.GetCurrentClusterNameStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getCurrentClusterNameReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ClusterClient) GetCurrentClusterNameCallCount() int {
	fake.getCurrentClusterNameMutex.RLock()
	defer fake.getCurrentClusterNameMutex.RUnlock()
	return len(fake.getCurrentClusterNameArgsForCall)
}

func (fake *ClusterClient) GetCurrentClusterNameCalls(stub func(string) (string, error)) {
	fake.getCurrentClusterNameMutex.Lock()
	defer fake.getCurrentClusterNameMutex.Unlock()
	fake.GetCurrentClusterNameStub = stub
}

func (fake *ClusterClient) GetCurrentClusterNameArgsForCall(i int) string {
	fake.getCurrentClusterNameMutex.RLock()
	defer fake.getCurrentClusterNameMutex.RUnlock()
	argsForCall := fake.getCurrentClusterNameArgsForCall[i]
	return argsForCall.arg1
}

func (fake *ClusterClient) GetCurrentClusterNameReturns(result1 string, result2 error) {
	fake.getCurrentClusterNameMutex.Lock()
	defer fake.getCurrentClusterNameMutex.Unlock()
	fake.GetCurrentClusterNameStub = nil
	fake.getCurrentClusterNameReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetCurrentClusterNameReturnsOnCall(i int, result1 string, result2 error) {
	fake.getCurrentClusterNameMutex.Lock()
	defer fake.getCurrentClusterNameMutex.Unlock()
	fake.GetCurrentClusterNameStub = nil
	if fake.getCurrentClusterNameReturnsOnCall == nil {
		fake.getCurrentClusterNameReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getCurrentClusterNameReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetCurrentKubeContext() (string, error) {
	fake.getCurrentKubeContextMutex.Lock()
	ret, specificReturn := fake.getCurrentKubeContextReturnsOnCall[len(fake.getCurrentKubeContextArgsForCall)]
	fake.getCurrentKubeContextArgsForCall = append(fake.getCurrentKubeContextArgsForCall, struct {
	}{})
	fake.recordInvocation("GetCurrentKubeContext", []interface{}{})
	fake.getCurrentKubeContextMutex.Unlock()
	if fake.GetCurrentKubeContextStub != nil {
		return fake.GetCurrentKubeContextStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getCurrentKubeContextReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ClusterClient) GetCurrentKubeContextCallCount() int {
	fake.getCurrentKubeContextMutex.RLock()
	defer fake.getCurrentKubeContextMutex.RUnlock()
	return len(fake.getCurrentKubeContextArgsForCall)
}

func (fake *ClusterClient) GetCurrentKubeContextCalls(stub func() (string, error)) {
	fake.getCurrentKubeContextMutex.Lock()
	defer fake.getCurrentKubeContextMutex.Unlock()
	fake.GetCurrentKubeContextStub = stub
}

func (fake *ClusterClient) GetCurrentKubeContextReturns(result1 string, result2 error) {
	fake.getCurrentKubeContextMutex.Lock()
	defer fake.getCurrentKubeContextMutex.Unlock()
	fake.GetCurrentKubeContextStub = nil
	fake.getCurrentKubeContextReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetCurrentKubeContextReturnsOnCall(i int, result1 string, result2 error) {
	fake.getCurrentKubeContextMutex.Lock()
	defer fake.getCurrentKubeContextMutex.Unlock()
	fake.GetCurrentKubeContextStub = nil
	if fake.getCurrentKubeContextReturnsOnCall == nil {
		fake.getCurrentKubeContextReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getCurrentKubeContextReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetCurrentKubeconfigFile() string {
	fake.getCurrentKubeconfigFileMutex.Lock()
	ret, specificReturn := fake.getCurrentKubeconfigFileReturnsOnCall[len(fake.getCurrentKubeconfigFileArgsForCall)]
	fake.getCurrentKubeconfigFileArgsForCall = append(fake.getCurrentKubeconfigFileArgsForCall, struct {
	}{})
	fake.recordInvocation("GetCurrentKubeconfigFile", []interface{}{})
	fake.getCurrentKubeconfigFileMutex.Unlock()
	if fake.GetCurrentKubeconfigFileStub != nil {
		return fake.GetCurrentKubeconfigFileStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getCurrentKubeconfigFileReturns
	return fakeReturns.result1
}

func (fake *ClusterClient) GetCurrentKubeconfigFileCallCount() int {
	fake.getCurrentKubeconfigFileMutex.RLock()
	defer fake.getCurrentKubeconfigFileMutex.RUnlock()
	return len(fake.getCurrentKubeconfigFileArgsForCall)
}

func (fake *ClusterClient) GetCurrentKubeconfigFileCalls(stub func() string) {
	fake.getCurrentKubeconfigFileMutex.Lock()
	defer fake.getCurrentKubeconfigFileMutex.Unlock()
	fake.GetCurrentKubeconfigFileStub = stub
}

func (fake *ClusterClient) GetCurrentKubeconfigFileReturns(result1 string) {
	fake.getCurrentKubeconfigFileMutex.Lock()
	defer fake.getCurrentKubeconfigFileMutex.Unlock()
	fake.GetCurrentKubeconfigFileStub = nil
	fake.getCurrentKubeconfigFileReturns = struct {
		result1 string
	}{result1}
}

func (fake *ClusterClient) GetCurrentKubeconfigFileReturnsOnCall(i int, result1 string) {
	fake.getCurrentKubeconfigFileMutex.Lock()
	defer fake.getCurrentKubeconfigFileMutex.Unlock()
	fake.GetCurrentKubeconfigFileStub = nil
	if fake.getCurrentKubeconfigFileReturnsOnCall == nil {
		fake.getCurrentKubeconfigFileReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getCurrentKubeconfigFileReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *ClusterClient) GetCurrentNamespace() (string, error) {
	fake.getCurrentNamespaceMutex.Lock()
	ret, specificReturn := fake.getCurrentNamespaceReturnsOnCall[len(fake.getCurrentNamespaceArgsForCall)]
	fake.getCurrentNamespaceArgsForCall = append(fake.getCurrentNamespaceArgsForCall, struct {
	}{})
	fake.recordInvocation("GetCurrentNamespace", []interface{}{})
	fake.getCurrentNamespaceMutex.Unlock()
	if fake.GetCurrentNamespaceStub != nil {
		return fake.GetCurrentNamespaceStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getCurrentNamespaceReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ClusterClient) GetCurrentNamespaceCallCount() int {
	fake.getCurrentNamespaceMutex.RLock()
	defer fake.getCurrentNamespaceMutex.RUnlock()
	return len(fake.getCurrentNamespaceArgsForCall)
}

func (fake *ClusterClient) GetCurrentNamespaceCalls(stub func() (string, error)) {
	fake.getCurrentNamespaceMutex.Lock()
	defer fake.getCurrentNamespaceMutex.Unlock()
	fake.GetCurrentNamespaceStub = stub
}

func (fake *ClusterClient) GetCurrentNamespaceReturns(result1 string, result2 error) {
	fake.getCurrentNamespaceMutex.Lock()
	defer fake.getCurrentNamespaceMutex.Unlock()
	fake.GetCurrentNamespaceStub = nil
	fake.getCurrentNamespaceReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetCurrentNamespaceReturnsOnCall(i int, result1 string, result2 error) {
	fake.getCurrentNamespaceMutex.Lock()
	defer fake.getCurrentNamespaceMutex.Unlock()
	fake.GetCurrentNamespaceStub = nil
	if fake.getCurrentNamespaceReturnsOnCall == nil {
		fake.getCurrentNamespaceReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getCurrentNamespaceReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetKCPObjectForCluster(arg1 string, arg2 string) (*v1alpha3.KubeadmControlPlane, error) {
	fake.getKCPObjectForClusterMutex.Lock()
	ret, specificReturn := fake.getKCPObjectForClusterReturnsOnCall[len(fake.getKCPObjectForClusterArgsForCall)]
	fake.getKCPObjectForClusterArgsForCall = append(fake.getKCPObjectForClusterArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("GetKCPObjectForCluster", []interface{}{arg1, arg2})
	fake.getKCPObjectForClusterMutex.Unlock()
	if fake.GetKCPObjectForClusterStub != nil {
		return fake.GetKCPObjectForClusterStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getKCPObjectForClusterReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ClusterClient) GetKCPObjectForClusterCallCount() int {
	fake.getKCPObjectForClusterMutex.RLock()
	defer fake.getKCPObjectForClusterMutex.RUnlock()
	return len(fake.getKCPObjectForClusterArgsForCall)
}

func (fake *ClusterClient) GetKCPObjectForClusterCalls(stub func(string, string) (*v1alpha3.KubeadmControlPlane, error)) {
	fake.getKCPObjectForClusterMutex.Lock()
	defer fake.getKCPObjectForClusterMutex.Unlock()
	fake.GetKCPObjectForClusterStub = stub
}

func (fake *ClusterClient) GetKCPObjectForClusterArgsForCall(i int) (string, string) {
	fake.getKCPObjectForClusterMutex.RLock()
	defer fake.getKCPObjectForClusterMutex.RUnlock()
	argsForCall := fake.getKCPObjectForClusterArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ClusterClient) GetKCPObjectForClusterReturns(result1 *v1alpha3.KubeadmControlPlane, result2 error) {
	fake.getKCPObjectForClusterMutex.Lock()
	defer fake.getKCPObjectForClusterMutex.Unlock()
	fake.GetKCPObjectForClusterStub = nil
	fake.getKCPObjectForClusterReturns = struct {
		result1 *v1alpha3.KubeadmControlPlane
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetKCPObjectForClusterReturnsOnCall(i int, result1 *v1alpha3.KubeadmControlPlane, result2 error) {
	fake.getKCPObjectForClusterMutex.Lock()
	defer fake.getKCPObjectForClusterMutex.Unlock()
	fake.GetKCPObjectForClusterStub = nil
	if fake.getKCPObjectForClusterReturnsOnCall == nil {
		fake.getKCPObjectForClusterReturnsOnCall = make(map[int]struct {
			result1 *v1alpha3.KubeadmControlPlane
			result2 error
		})
	}
	fake.getKCPObjectForClusterReturnsOnCall[i] = struct {
		result1 *v1alpha3.KubeadmControlPlane
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetKubeConfigForCluster(arg1 string, arg2 string, arg3 *clusterclient.PollOptions) ([]byte, error) {
	fake.getKubeConfigForClusterMutex.Lock()
	ret, specificReturn := fake.getKubeConfigForClusterReturnsOnCall[len(fake.getKubeConfigForClusterArgsForCall)]
	fake.getKubeConfigForClusterArgsForCall = append(fake.getKubeConfigForClusterArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 *clusterclient.PollOptions
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetKubeConfigForCluster", []interface{}{arg1, arg2, arg3})
	fake.getKubeConfigForClusterMutex.Unlock()
	if fake.GetKubeConfigForClusterStub != nil {
		return fake.GetKubeConfigForClusterStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getKubeConfigForClusterReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ClusterClient) GetKubeConfigForClusterCallCount() int {
	fake.getKubeConfigForClusterMutex.RLock()
	defer fake.getKubeConfigForClusterMutex.RUnlock()
	return len(fake.getKubeConfigForClusterArgsForCall)
}

func (fake *ClusterClient) GetKubeConfigForClusterCalls(stub func(string, string, *clusterclient.PollOptions) ([]byte, error)) {
	fake.getKubeConfigForClusterMutex.Lock()
	defer fake.getKubeConfigForClusterMutex.Unlock()
	fake.GetKubeConfigForClusterStub = stub
}

func (fake *ClusterClient) GetKubeConfigForClusterArgsForCall(i int) (string, string, *clusterclient.PollOptions) {
	fake.getKubeConfigForClusterMutex.RLock()
	defer fake.getKubeConfigForClusterMutex.RUnlock()
	argsForCall := fake.getKubeConfigForClusterArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *ClusterClient) GetKubeConfigForClusterReturns(result1 []byte, result2 error) {
	fake.getKubeConfigForClusterMutex.Lock()
	defer fake.getKubeConfigForClusterMutex.Unlock()
	fake.GetKubeConfigForClusterStub = nil
	fake.getKubeConfigForClusterReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetKubeConfigForClusterReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.getKubeConfigForClusterMutex.Lock()
	defer fake.getKubeConfigForClusterMutex.Unlock()
	fake.GetKubeConfigForClusterStub = nil
	if fake.getKubeConfigForClusterReturnsOnCall == nil {
		fake.getKubeConfigForClusterReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.getKubeConfigForClusterReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetKubernetesVersion() (string, error) {
	fake.getKubernetesVersionMutex.Lock()
	ret, specificReturn := fake.getKubernetesVersionReturnsOnCall[len(fake.getKubernetesVersionArgsForCall)]
	fake.getKubernetesVersionArgsForCall = append(fake.getKubernetesVersionArgsForCall, struct {
	}{})
	fake.recordInvocation("GetKubernetesVersion", []interface{}{})
	fake.getKubernetesVersionMutex.Unlock()
	if fake.GetKubernetesVersionStub != nil {
		return fake.GetKubernetesVersionStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getKubernetesVersionReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ClusterClient) GetKubernetesVersionCallCount() int {
	fake.getKubernetesVersionMutex.RLock()
	defer fake.getKubernetesVersionMutex.RUnlock()
	return len(fake.getKubernetesVersionArgsForCall)
}

func (fake *ClusterClient) GetKubernetesVersionCalls(stub func() (string, error)) {
	fake.getKubernetesVersionMutex.Lock()
	defer fake.getKubernetesVersionMutex.Unlock()
	fake.GetKubernetesVersionStub = stub
}

func (fake *ClusterClient) GetKubernetesVersionReturns(result1 string, result2 error) {
	fake.getKubernetesVersionMutex.Lock()
	defer fake.getKubernetesVersionMutex.Unlock()
	fake.GetKubernetesVersionStub = nil
	fake.getKubernetesVersionReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetKubernetesVersionReturnsOnCall(i int, result1 string, result2 error) {
	fake.getKubernetesVersionMutex.Lock()
	defer fake.getKubernetesVersionMutex.Unlock()
	fake.GetKubernetesVersionStub = nil
	if fake.getKubernetesVersionReturnsOnCall == nil {
		fake.getKubernetesVersionReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getKubernetesVersionReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetMDObjectForCluster(arg1 string, arg2 string) ([]v1alpha3a.MachineDeployment, error) {
	fake.getMDObjectForClusterMutex.Lock()
	ret, specificReturn := fake.getMDObjectForClusterReturnsOnCall[len(fake.getMDObjectForClusterArgsForCall)]
	fake.getMDObjectForClusterArgsForCall = append(fake.getMDObjectForClusterArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("GetMDObjectForCluster", []interface{}{arg1, arg2})
	fake.getMDObjectForClusterMutex.Unlock()
	if fake.GetMDObjectForClusterStub != nil {
		return fake.GetMDObjectForClusterStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getMDObjectForClusterReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ClusterClient) GetMDObjectForClusterCallCount() int {
	fake.getMDObjectForClusterMutex.RLock()
	defer fake.getMDObjectForClusterMutex.RUnlock()
	return len(fake.getMDObjectForClusterArgsForCall)
}

func (fake *ClusterClient) GetMDObjectForClusterCalls(stub func(string, string) ([]v1alpha3a.MachineDeployment, error)) {
	fake.getMDObjectForClusterMutex.Lock()
	defer fake.getMDObjectForClusterMutex.Unlock()
	fake.GetMDObjectForClusterStub = stub
}

func (fake *ClusterClient) GetMDObjectForClusterArgsForCall(i int) (string, string) {
	fake.getMDObjectForClusterMutex.RLock()
	defer fake.getMDObjectForClusterMutex.RUnlock()
	argsForCall := fake.getMDObjectForClusterArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ClusterClient) GetMDObjectForClusterReturns(result1 []v1alpha3a.MachineDeployment, result2 error) {
	fake.getMDObjectForClusterMutex.Lock()
	defer fake.getMDObjectForClusterMutex.Unlock()
	fake.GetMDObjectForClusterStub = nil
	fake.getMDObjectForClusterReturns = struct {
		result1 []v1alpha3a.MachineDeployment
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetMDObjectForClusterReturnsOnCall(i int, result1 []v1alpha3a.MachineDeployment, result2 error) {
	fake.getMDObjectForClusterMutex.Lock()
	defer fake.getMDObjectForClusterMutex.Unlock()
	fake.GetMDObjectForClusterStub = nil
	if fake.getMDObjectForClusterReturnsOnCall == nil {
		fake.getMDObjectForClusterReturnsOnCall = make(map[int]struct {
			result1 []v1alpha3a.MachineDeployment
			result2 error
		})
	}
	fake.getMDObjectForClusterReturnsOnCall[i] = struct {
		result1 []v1alpha3a.MachineDeployment
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetMachineObjectsForCluster(arg1 string, arg2 string) (map[string]v1alpha3a.Machine, map[string]v1alpha3a.Machine, error) {
	fake.getMachineObjectsForClusterMutex.Lock()
	ret, specificReturn := fake.getMachineObjectsForClusterReturnsOnCall[len(fake.getMachineObjectsForClusterArgsForCall)]
	fake.getMachineObjectsForClusterArgsForCall = append(fake.getMachineObjectsForClusterArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("GetMachineObjectsForCluster", []interface{}{arg1, arg2})
	fake.getMachineObjectsForClusterMutex.Unlock()
	if fake.GetMachineObjectsForClusterStub != nil {
		return fake.GetMachineObjectsForClusterStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.getMachineObjectsForClusterReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *ClusterClient) GetMachineObjectsForClusterCallCount() int {
	fake.getMachineObjectsForClusterMutex.RLock()
	defer fake.getMachineObjectsForClusterMutex.RUnlock()
	return len(fake.getMachineObjectsForClusterArgsForCall)
}

func (fake *ClusterClient) GetMachineObjectsForClusterCalls(stub func(string, string) (map[string]v1alpha3a.Machine, map[string]v1alpha3a.Machine, error)) {
	fake.getMachineObjectsForClusterMutex.Lock()
	defer fake.getMachineObjectsForClusterMutex.Unlock()
	fake.GetMachineObjectsForClusterStub = stub
}

func (fake *ClusterClient) GetMachineObjectsForClusterArgsForCall(i int) (string, string) {
	fake.getMachineObjectsForClusterMutex.RLock()
	defer fake.getMachineObjectsForClusterMutex.RUnlock()
	argsForCall := fake.getMachineObjectsForClusterArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ClusterClient) GetMachineObjectsForClusterReturns(result1 map[string]v1alpha3a.Machine, result2 map[string]v1alpha3a.Machine, result3 error) {
	fake.getMachineObjectsForClusterMutex.Lock()
	defer fake.getMachineObjectsForClusterMutex.Unlock()
	fake.GetMachineObjectsForClusterStub = nil
	fake.getMachineObjectsForClusterReturns = struct {
		result1 map[string]v1alpha3a.Machine
		result2 map[string]v1alpha3a.Machine
		result3 error
	}{result1, result2, result3}
}

func (fake *ClusterClient) GetMachineObjectsForClusterReturnsOnCall(i int, result1 map[string]v1alpha3a.Machine, result2 map[string]v1alpha3a.Machine, result3 error) {
	fake.getMachineObjectsForClusterMutex.Lock()
	defer fake.getMachineObjectsForClusterMutex.Unlock()
	fake.GetMachineObjectsForClusterStub = nil
	if fake.getMachineObjectsForClusterReturnsOnCall == nil {
		fake.getMachineObjectsForClusterReturnsOnCall = make(map[int]struct {
			result1 map[string]v1alpha3a.Machine
			result2 map[string]v1alpha3a.Machine
			result3 error
		})
	}
	fake.getMachineObjectsForClusterReturnsOnCall[i] = struct {
		result1 map[string]v1alpha3a.Machine
		result2 map[string]v1alpha3a.Machine
		result3 error
	}{result1, result2, result3}
}

func (fake *ClusterClient) GetManagementClusterTKGVersion(arg1 string, arg2 string) (string, error) {
	fake.getManagementClusterTKGVersionMutex.Lock()
	ret, specificReturn := fake.getManagementClusterTKGVersionReturnsOnCall[len(fake.getManagementClusterTKGVersionArgsForCall)]
	fake.getManagementClusterTKGVersionArgsForCall = append(fake.getManagementClusterTKGVersionArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("GetManagementClusterTKGVersion", []interface{}{arg1, arg2})
	fake.getManagementClusterTKGVersionMutex.Unlock()
	if fake.GetManagementClusterTKGVersionStub != nil {
		return fake.GetManagementClusterTKGVersionStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getManagementClusterTKGVersionReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ClusterClient) GetManagementClusterTKGVersionCallCount() int {
	fake.getManagementClusterTKGVersionMutex.RLock()
	defer fake.getManagementClusterTKGVersionMutex.RUnlock()
	return len(fake.getManagementClusterTKGVersionArgsForCall)
}

func (fake *ClusterClient) GetManagementClusterTKGVersionCalls(stub func(string, string) (string, error)) {
	fake.getManagementClusterTKGVersionMutex.Lock()
	defer fake.getManagementClusterTKGVersionMutex.Unlock()
	fake.GetManagementClusterTKGVersionStub = stub
}

func (fake *ClusterClient) GetManagementClusterTKGVersionArgsForCall(i int) (string, string) {
	fake.getManagementClusterTKGVersionMutex.RLock()
	defer fake.getManagementClusterTKGVersionMutex.RUnlock()
	argsForCall := fake.getManagementClusterTKGVersionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ClusterClient) GetManagementClusterTKGVersionReturns(result1 string, result2 error) {
	fake.getManagementClusterTKGVersionMutex.Lock()
	defer fake.getManagementClusterTKGVersionMutex.Unlock()
	fake.GetManagementClusterTKGVersionStub = nil
	fake.getManagementClusterTKGVersionReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetManagementClusterTKGVersionReturnsOnCall(i int, result1 string, result2 error) {
	fake.getManagementClusterTKGVersionMutex.Lock()
	defer fake.getManagementClusterTKGVersionMutex.Unlock()
	fake.GetManagementClusterTKGVersionStub = nil
	if fake.getManagementClusterTKGVersionReturnsOnCall == nil {
		fake.getManagementClusterTKGVersionReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getManagementClusterTKGVersionReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetPacificTKCAPIVersion() (string, error) {
	fake.getPacificTKCAPIVersionMutex.Lock()
	ret, specificReturn := fake.getPacificTKCAPIVersionReturnsOnCall[len(fake.getPacificTKCAPIVersionArgsForCall)]
	fake.getPacificTKCAPIVersionArgsForCall = append(fake.getPacificTKCAPIVersionArgsForCall, struct {
	}{})
	fake.recordInvocation("GetPacificTKCAPIVersion", []interface{}{})
	fake.getPacificTKCAPIVersionMutex.Unlock()
	if fake.GetPacificTKCAPIVersionStub != nil {
		return fake.GetPacificTKCAPIVersionStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getPacificTKCAPIVersionReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ClusterClient) GetPacificTKCAPIVersionCallCount() int {
	fake.getPacificTKCAPIVersionMutex.RLock()
	defer fake.getPacificTKCAPIVersionMutex.RUnlock()
	return len(fake.getPacificTKCAPIVersionArgsForCall)
}

func (fake *ClusterClient) GetPacificTKCAPIVersionCalls(stub func() (string, error)) {
	fake.getPacificTKCAPIVersionMutex.Lock()
	defer fake.getPacificTKCAPIVersionMutex.Unlock()
	fake.GetPacificTKCAPIVersionStub = stub
}

func (fake *ClusterClient) GetPacificTKCAPIVersionReturns(result1 string, result2 error) {
	fake.getPacificTKCAPIVersionMutex.Lock()
	defer fake.getPacificTKCAPIVersionMutex.Unlock()
	fake.GetPacificTKCAPIVersionStub = nil
	fake.getPacificTKCAPIVersionReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetPacificTKCAPIVersionReturnsOnCall(i int, result1 string, result2 error) {
	fake.getPacificTKCAPIVersionMutex.Lock()
	defer fake.getPacificTKCAPIVersionMutex.Unlock()
	fake.GetPacificTKCAPIVersionStub = nil
	if fake.getPacificTKCAPIVersionReturnsOnCall == nil {
		fake.getPacificTKCAPIVersionReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getPacificTKCAPIVersionReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetPacificTanzuKubernetesReleases() ([]string, error) {
	fake.getPacificTanzuKubernetesReleasesMutex.Lock()
	ret, specificReturn := fake.getPacificTanzuKubernetesReleasesReturnsOnCall[len(fake.getPacificTanzuKubernetesReleasesArgsForCall)]
	fake.getPacificTanzuKubernetesReleasesArgsForCall = append(fake.getPacificTanzuKubernetesReleasesArgsForCall, struct {
	}{})
	fake.recordInvocation("GetPacificTanzuKubernetesReleases", []interface{}{})
	fake.getPacificTanzuKubernetesReleasesMutex.Unlock()
	if fake.GetPacificTanzuKubernetesReleasesStub != nil {
		return fake.GetPacificTanzuKubernetesReleasesStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getPacificTanzuKubernetesReleasesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ClusterClient) GetPacificTanzuKubernetesReleasesCallCount() int {
	fake.getPacificTanzuKubernetesReleasesMutex.RLock()
	defer fake.getPacificTanzuKubernetesReleasesMutex.RUnlock()
	return len(fake.getPacificTanzuKubernetesReleasesArgsForCall)
}

func (fake *ClusterClient) GetPacificTanzuKubernetesReleasesCalls(stub func() ([]string, error)) {
	fake.getPacificTanzuKubernetesReleasesMutex.Lock()
	defer fake.getPacificTanzuKubernetesReleasesMutex.Unlock()
	fake.GetPacificTanzuKubernetesReleasesStub = stub
}

func (fake *ClusterClient) GetPacificTanzuKubernetesReleasesReturns(result1 []string, result2 error) {
	fake.getPacificTanzuKubernetesReleasesMutex.Lock()
	defer fake.getPacificTanzuKubernetesReleasesMutex.Unlock()
	fake.GetPacificTanzuKubernetesReleasesStub = nil
	fake.getPacificTanzuKubernetesReleasesReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetPacificTanzuKubernetesReleasesReturnsOnCall(i int, result1 []string, result2 error) {
	fake.getPacificTanzuKubernetesReleasesMutex.Lock()
	defer fake.getPacificTanzuKubernetesReleasesMutex.Unlock()
	fake.GetPacificTanzuKubernetesReleasesStub = nil
	if fake.getPacificTanzuKubernetesReleasesReturnsOnCall == nil {
		fake.getPacificTanzuKubernetesReleasesReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.getPacificTanzuKubernetesReleasesReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetPinnipedIssuerURLAndCA() (string, string, error) {
	fake.getPinnipedIssuerURLAndCAMutex.Lock()
	ret, specificReturn := fake.getPinnipedIssuerURLAndCAReturnsOnCall[len(fake.getPinnipedIssuerURLAndCAArgsForCall)]
	fake.getPinnipedIssuerURLAndCAArgsForCall = append(fake.getPinnipedIssuerURLAndCAArgsForCall, struct {
	}{})
	fake.recordInvocation("GetPinnipedIssuerURLAndCA", []interface{}{})
	fake.getPinnipedIssuerURLAndCAMutex.Unlock()
	if fake.GetPinnipedIssuerURLAndCAStub != nil {
		return fake.GetPinnipedIssuerURLAndCAStub()
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.getPinnipedIssuerURLAndCAReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *ClusterClient) GetPinnipedIssuerURLAndCACallCount() int {
	fake.getPinnipedIssuerURLAndCAMutex.RLock()
	defer fake.getPinnipedIssuerURLAndCAMutex.RUnlock()
	return len(fake.getPinnipedIssuerURLAndCAArgsForCall)
}

func (fake *ClusterClient) GetPinnipedIssuerURLAndCACalls(stub func() (string, string, error)) {
	fake.getPinnipedIssuerURLAndCAMutex.Lock()
	defer fake.getPinnipedIssuerURLAndCAMutex.Unlock()
	fake.GetPinnipedIssuerURLAndCAStub = stub
}

func (fake *ClusterClient) GetPinnipedIssuerURLAndCAReturns(result1 string, result2 string, result3 error) {
	fake.getPinnipedIssuerURLAndCAMutex.Lock()
	defer fake.getPinnipedIssuerURLAndCAMutex.Unlock()
	fake.GetPinnipedIssuerURLAndCAStub = nil
	fake.getPinnipedIssuerURLAndCAReturns = struct {
		result1 string
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *ClusterClient) GetPinnipedIssuerURLAndCAReturnsOnCall(i int, result1 string, result2 string, result3 error) {
	fake.getPinnipedIssuerURLAndCAMutex.Lock()
	defer fake.getPinnipedIssuerURLAndCAMutex.Unlock()
	fake.GetPinnipedIssuerURLAndCAStub = nil
	if fake.getPinnipedIssuerURLAndCAReturnsOnCall == nil {
		fake.getPinnipedIssuerURLAndCAReturnsOnCall = make(map[int]struct {
			result1 string
			result2 string
			result3 error
		})
	}
	fake.getPinnipedIssuerURLAndCAReturnsOnCall[i] = struct {
		result1 string
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *ClusterClient) GetRegionalClusterDefaultProviderName(arg1 v1alpha3b.ProviderType) (string, error) {
	fake.getRegionalClusterDefaultProviderNameMutex.Lock()
	ret, specificReturn := fake.getRegionalClusterDefaultProviderNameReturnsOnCall[len(fake.getRegionalClusterDefaultProviderNameArgsForCall)]
	fake.getRegionalClusterDefaultProviderNameArgsForCall = append(fake.getRegionalClusterDefaultProviderNameArgsForCall, struct {
		arg1 v1alpha3b.ProviderType
	}{arg1})
	fake.recordInvocation("GetRegionalClusterDefaultProviderName", []interface{}{arg1})
	fake.getRegionalClusterDefaultProviderNameMutex.Unlock()
	if fake.GetRegionalClusterDefaultProviderNameStub != nil {
		return fake.GetRegionalClusterDefaultProviderNameStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getRegionalClusterDefaultProviderNameReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ClusterClient) GetRegionalClusterDefaultProviderNameCallCount() int {
	fake.getRegionalClusterDefaultProviderNameMutex.RLock()
	defer fake.getRegionalClusterDefaultProviderNameMutex.RUnlock()
	return len(fake.getRegionalClusterDefaultProviderNameArgsForCall)
}

func (fake *ClusterClient) GetRegionalClusterDefaultProviderNameCalls(stub func(v1alpha3b.ProviderType) (string, error)) {
	fake.getRegionalClusterDefaultProviderNameMutex.Lock()
	defer fake.getRegionalClusterDefaultProviderNameMutex.Unlock()
	fake.GetRegionalClusterDefaultProviderNameStub = stub
}

func (fake *ClusterClient) GetRegionalClusterDefaultProviderNameArgsForCall(i int) v1alpha3b.ProviderType {
	fake.getRegionalClusterDefaultProviderNameMutex.RLock()
	defer fake.getRegionalClusterDefaultProviderNameMutex.RUnlock()
	argsForCall := fake.getRegionalClusterDefaultProviderNameArgsForCall[i]
	return argsForCall.arg1
}

func (fake *ClusterClient) GetRegionalClusterDefaultProviderNameReturns(result1 string, result2 error) {
	fake.getRegionalClusterDefaultProviderNameMutex.Lock()
	defer fake.getRegionalClusterDefaultProviderNameMutex.Unlock()
	fake.GetRegionalClusterDefaultProviderNameStub = nil
	fake.getRegionalClusterDefaultProviderNameReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetRegionalClusterDefaultProviderNameReturnsOnCall(i int, result1 string, result2 error) {
	fake.getRegionalClusterDefaultProviderNameMutex.Lock()
	defer fake.getRegionalClusterDefaultProviderNameMutex.Unlock()
	fake.GetRegionalClusterDefaultProviderNameStub = nil
	if fake.getRegionalClusterDefaultProviderNameReturnsOnCall == nil {
		fake.getRegionalClusterDefaultProviderNameReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getRegionalClusterDefaultProviderNameReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetResource(arg1 interface{}, arg2 string, arg3 string, arg4 clusterclient.PostVerifyrFunc, arg5 *clusterclient.PollOptions) error {
	fake.getResourceMutex.Lock()
	ret, specificReturn := fake.getResourceReturnsOnCall[len(fake.getResourceArgsForCall)]
	fake.getResourceArgsForCall = append(fake.getResourceArgsForCall, struct {
		arg1 interface{}
		arg2 string
		arg3 string
		arg4 clusterclient.PostVerifyrFunc
		arg5 *clusterclient.PollOptions
	}{arg1, arg2, arg3, arg4, arg5})
	fake.recordInvocation("GetResource", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.getResourceMutex.Unlock()
	if fake.GetResourceStub != nil {
		return fake.GetResourceStub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getResourceReturns
	return fakeReturns.result1
}

func (fake *ClusterClient) GetResourceCallCount() int {
	fake.getResourceMutex.RLock()
	defer fake.getResourceMutex.RUnlock()
	return len(fake.getResourceArgsForCall)
}

func (fake *ClusterClient) GetResourceCalls(stub func(interface{}, string, string, clusterclient.PostVerifyrFunc, *clusterclient.PollOptions) error) {
	fake.getResourceMutex.Lock()
	defer fake.getResourceMutex.Unlock()
	fake.GetResourceStub = stub
}

func (fake *ClusterClient) GetResourceArgsForCall(i int) (interface{}, string, string, clusterclient.PostVerifyrFunc, *clusterclient.PollOptions) {
	fake.getResourceMutex.RLock()
	defer fake.getResourceMutex.RUnlock()
	argsForCall := fake.getResourceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *ClusterClient) GetResourceReturns(result1 error) {
	fake.getResourceMutex.Lock()
	defer fake.getResourceMutex.Unlock()
	fake.GetResourceStub = nil
	fake.getResourceReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) GetResourceReturnsOnCall(i int, result1 error) {
	fake.getResourceMutex.Lock()
	defer fake.getResourceMutex.Unlock()
	fake.GetResourceStub = nil
	if fake.getResourceReturnsOnCall == nil {
		fake.getResourceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.getResourceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) GetResourceList(arg1 interface{}, arg2 string, arg3 string, arg4 clusterclient.PostVerifyrFunc, arg5 *clusterclient.PollOptions) error {
	fake.getResourceListMutex.Lock()
	ret, specificReturn := fake.getResourceListReturnsOnCall[len(fake.getResourceListArgsForCall)]
	fake.getResourceListArgsForCall = append(fake.getResourceListArgsForCall, struct {
		arg1 interface{}
		arg2 string
		arg3 string
		arg4 clusterclient.PostVerifyrFunc
		arg5 *clusterclient.PollOptions
	}{arg1, arg2, arg3, arg4, arg5})
	fake.recordInvocation("GetResourceList", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.getResourceListMutex.Unlock()
	if fake.GetResourceListStub != nil {
		return fake.GetResourceListStub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getResourceListReturns
	return fakeReturns.result1
}

func (fake *ClusterClient) GetResourceListCallCount() int {
	fake.getResourceListMutex.RLock()
	defer fake.getResourceListMutex.RUnlock()
	return len(fake.getResourceListArgsForCall)
}

func (fake *ClusterClient) GetResourceListCalls(stub func(interface{}, string, string, clusterclient.PostVerifyrFunc, *clusterclient.PollOptions) error) {
	fake.getResourceListMutex.Lock()
	defer fake.getResourceListMutex.Unlock()
	fake.GetResourceListStub = stub
}

func (fake *ClusterClient) GetResourceListArgsForCall(i int) (interface{}, string, string, clusterclient.PostVerifyrFunc, *clusterclient.PollOptions) {
	fake.getResourceListMutex.RLock()
	defer fake.getResourceListMutex.RUnlock()
	argsForCall := fake.getResourceListArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *ClusterClient) GetResourceListReturns(result1 error) {
	fake.getResourceListMutex.Lock()
	defer fake.getResourceListMutex.Unlock()
	fake.GetResourceListStub = nil
	fake.getResourceListReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) GetResourceListReturnsOnCall(i int, result1 error) {
	fake.getResourceListMutex.Lock()
	defer fake.getResourceListMutex.Unlock()
	fake.GetResourceListStub = nil
	if fake.getResourceListReturnsOnCall == nil {
		fake.getResourceListReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.getResourceListReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) GetSecretValue(arg1 string, arg2 string, arg3 string, arg4 *clusterclient.PollOptions) ([]byte, error) {
	fake.getSecretValueMutex.Lock()
	ret, specificReturn := fake.getSecretValueReturnsOnCall[len(fake.getSecretValueArgsForCall)]
	fake.getSecretValueArgsForCall = append(fake.getSecretValueArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 *clusterclient.PollOptions
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("GetSecretValue", []interface{}{arg1, arg2, arg3, arg4})
	fake.getSecretValueMutex.Unlock()
	if fake.GetSecretValueStub != nil {
		return fake.GetSecretValueStub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getSecretValueReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ClusterClient) GetSecretValueCallCount() int {
	fake.getSecretValueMutex.RLock()
	defer fake.getSecretValueMutex.RUnlock()
	return len(fake.getSecretValueArgsForCall)
}

func (fake *ClusterClient) GetSecretValueCalls(stub func(string, string, string, *clusterclient.PollOptions) ([]byte, error)) {
	fake.getSecretValueMutex.Lock()
	defer fake.getSecretValueMutex.Unlock()
	fake.GetSecretValueStub = stub
}

func (fake *ClusterClient) GetSecretValueArgsForCall(i int) (string, string, string, *clusterclient.PollOptions) {
	fake.getSecretValueMutex.RLock()
	defer fake.getSecretValueMutex.RUnlock()
	argsForCall := fake.getSecretValueArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *ClusterClient) GetSecretValueReturns(result1 []byte, result2 error) {
	fake.getSecretValueMutex.Lock()
	defer fake.getSecretValueMutex.Unlock()
	fake.GetSecretValueStub = nil
	fake.getSecretValueReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetSecretValueReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.getSecretValueMutex.Lock()
	defer fake.getSecretValueMutex.Unlock()
	fake.GetSecretValueStub = nil
	if fake.getSecretValueReturnsOnCall == nil {
		fake.getSecretValueReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.getSecretValueReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetTanzuKubernetesReleases(arg1 string) ([]v1alpha1.TanzuKubernetesRelease, error) {
	fake.getTanzuKubernetesReleasesMutex.Lock()
	ret, specificReturn := fake.getTanzuKubernetesReleasesReturnsOnCall[len(fake.getTanzuKubernetesReleasesArgsForCall)]
	fake.getTanzuKubernetesReleasesArgsForCall = append(fake.getTanzuKubernetesReleasesArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetTanzuKubernetesReleases", []interface{}{arg1})
	fake.getTanzuKubernetesReleasesMutex.Unlock()
	if fake.GetTanzuKubernetesReleasesStub != nil {
		return fake.GetTanzuKubernetesReleasesStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getTanzuKubernetesReleasesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ClusterClient) GetTanzuKubernetesReleasesCallCount() int {
	fake.getTanzuKubernetesReleasesMutex.RLock()
	defer fake.getTanzuKubernetesReleasesMutex.RUnlock()
	return len(fake.getTanzuKubernetesReleasesArgsForCall)
}

func (fake *ClusterClient) GetTanzuKubernetesReleasesCalls(stub func(string) ([]v1alpha1.TanzuKubernetesRelease, error)) {
	fake.getTanzuKubernetesReleasesMutex.Lock()
	defer fake.getTanzuKubernetesReleasesMutex.Unlock()
	fake.GetTanzuKubernetesReleasesStub = stub
}

func (fake *ClusterClient) GetTanzuKubernetesReleasesArgsForCall(i int) string {
	fake.getTanzuKubernetesReleasesMutex.RLock()
	defer fake.getTanzuKubernetesReleasesMutex.RUnlock()
	argsForCall := fake.getTanzuKubernetesReleasesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *ClusterClient) GetTanzuKubernetesReleasesReturns(result1 []v1alpha1.TanzuKubernetesRelease, result2 error) {
	fake.getTanzuKubernetesReleasesMutex.Lock()
	defer fake.getTanzuKubernetesReleasesMutex.Unlock()
	fake.GetTanzuKubernetesReleasesStub = nil
	fake.getTanzuKubernetesReleasesReturns = struct {
		result1 []v1alpha1.TanzuKubernetesRelease
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetTanzuKubernetesReleasesReturnsOnCall(i int, result1 []v1alpha1.TanzuKubernetesRelease, result2 error) {
	fake.getTanzuKubernetesReleasesMutex.Lock()
	defer fake.getTanzuKubernetesReleasesMutex.Unlock()
	fake.GetTanzuKubernetesReleasesStub = nil
	if fake.getTanzuKubernetesReleasesReturnsOnCall == nil {
		fake.getTanzuKubernetesReleasesReturnsOnCall = make(map[int]struct {
			result1 []v1alpha1.TanzuKubernetesRelease
			result2 error
		})
	}
	fake.getTanzuKubernetesReleasesReturnsOnCall[i] = struct {
		result1 []v1alpha1.TanzuKubernetesRelease
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetVCClientAndDataCenter(arg1 string, arg2 string, arg3 string) (vc.Client, string, error) {
	fake.getVCClientAndDataCenterMutex.Lock()
	ret, specificReturn := fake.getVCClientAndDataCenterReturnsOnCall[len(fake.getVCClientAndDataCenterArgsForCall)]
	fake.getVCClientAndDataCenterArgsForCall = append(fake.getVCClientAndDataCenterArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("GetVCClientAndDataCenter", []interface{}{arg1, arg2, arg3})
	fake.getVCClientAndDataCenterMutex.Unlock()
	if fake.GetVCClientAndDataCenterStub != nil {
		return fake.GetVCClientAndDataCenterStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.getVCClientAndDataCenterReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *ClusterClient) GetVCClientAndDataCenterCallCount() int {
	fake.getVCClientAndDataCenterMutex.RLock()
	defer fake.getVCClientAndDataCenterMutex.RUnlock()
	return len(fake.getVCClientAndDataCenterArgsForCall)
}

func (fake *ClusterClient) GetVCClientAndDataCenterCalls(stub func(string, string, string) (vc.Client, string, error)) {
	fake.getVCClientAndDataCenterMutex.Lock()
	defer fake.getVCClientAndDataCenterMutex.Unlock()
	fake.GetVCClientAndDataCenterStub = stub
}

func (fake *ClusterClient) GetVCClientAndDataCenterArgsForCall(i int) (string, string, string) {
	fake.getVCClientAndDataCenterMutex.RLock()
	defer fake.getVCClientAndDataCenterMutex.RUnlock()
	argsForCall := fake.getVCClientAndDataCenterArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *ClusterClient) GetVCClientAndDataCenterReturns(result1 vc.Client, result2 string, result3 error) {
	fake.getVCClientAndDataCenterMutex.Lock()
	defer fake.getVCClientAndDataCenterMutex.Unlock()
	fake.GetVCClientAndDataCenterStub = nil
	fake.getVCClientAndDataCenterReturns = struct {
		result1 vc.Client
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *ClusterClient) GetVCClientAndDataCenterReturnsOnCall(i int, result1 vc.Client, result2 string, result3 error) {
	fake.getVCClientAndDataCenterMutex.Lock()
	defer fake.getVCClientAndDataCenterMutex.Unlock()
	fake.GetVCClientAndDataCenterStub = nil
	if fake.getVCClientAndDataCenterReturnsOnCall == nil {
		fake.getVCClientAndDataCenterReturnsOnCall = make(map[int]struct {
			result1 vc.Client
			result2 string
			result3 error
		})
	}
	fake.getVCClientAndDataCenterReturnsOnCall[i] = struct {
		result1 vc.Client
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *ClusterClient) GetVCCredentialsFromSecret(arg1 string) (string, string, error) {
	fake.getVCCredentialsFromSecretMutex.Lock()
	ret, specificReturn := fake.getVCCredentialsFromSecretReturnsOnCall[len(fake.getVCCredentialsFromSecretArgsForCall)]
	fake.getVCCredentialsFromSecretArgsForCall = append(fake.getVCCredentialsFromSecretArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("GetVCCredentialsFromSecret", []interface{}{arg1})
	fake.getVCCredentialsFromSecretMutex.Unlock()
	if fake.GetVCCredentialsFromSecretStub != nil {
		return fake.GetVCCredentialsFromSecretStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.getVCCredentialsFromSecretReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *ClusterClient) GetVCCredentialsFromSecretCallCount() int {
	fake.getVCCredentialsFromSecretMutex.RLock()
	defer fake.getVCCredentialsFromSecretMutex.RUnlock()
	return len(fake.getVCCredentialsFromSecretArgsForCall)
}

func (fake *ClusterClient) GetVCCredentialsFromSecretCalls(stub func(string) (string, string, error)) {
	fake.getVCCredentialsFromSecretMutex.Lock()
	defer fake.getVCCredentialsFromSecretMutex.Unlock()
	fake.GetVCCredentialsFromSecretStub = stub
}

func (fake *ClusterClient) GetVCCredentialsFromSecretArgsForCall(i int) string {
	fake.getVCCredentialsFromSecretMutex.RLock()
	defer fake.getVCCredentialsFromSecretMutex.RUnlock()
	argsForCall := fake.getVCCredentialsFromSecretArgsForCall[i]
	return argsForCall.arg1
}

func (fake *ClusterClient) GetVCCredentialsFromSecretReturns(result1 string, result2 string, result3 error) {
	fake.getVCCredentialsFromSecretMutex.Lock()
	defer fake.getVCCredentialsFromSecretMutex.Unlock()
	fake.GetVCCredentialsFromSecretStub = nil
	fake.getVCCredentialsFromSecretReturns = struct {
		result1 string
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *ClusterClient) GetVCCredentialsFromSecretReturnsOnCall(i int, result1 string, result2 string, result3 error) {
	fake.getVCCredentialsFromSecretMutex.Lock()
	defer fake.getVCCredentialsFromSecretMutex.Unlock()
	fake.GetVCCredentialsFromSecretStub = nil
	if fake.getVCCredentialsFromSecretReturnsOnCall == nil {
		fake.getVCCredentialsFromSecretReturnsOnCall = make(map[int]struct {
			result1 string
			result2 string
			result3 error
		})
	}
	fake.getVCCredentialsFromSecretReturnsOnCall[i] = struct {
		result1 string
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *ClusterClient) GetVCServer() (string, error) {
	fake.getVCServerMutex.Lock()
	ret, specificReturn := fake.getVCServerReturnsOnCall[len(fake.getVCServerArgsForCall)]
	fake.getVCServerArgsForCall = append(fake.getVCServerArgsForCall, struct {
	}{})
	fake.recordInvocation("GetVCServer", []interface{}{})
	fake.getVCServerMutex.Unlock()
	if fake.GetVCServerStub != nil {
		return fake.GetVCServerStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getVCServerReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ClusterClient) GetVCServerCallCount() int {
	fake.getVCServerMutex.RLock()
	defer fake.getVCServerMutex.RUnlock()
	return len(fake.getVCServerArgsForCall)
}

func (fake *ClusterClient) GetVCServerCalls(stub func() (string, error)) {
	fake.getVCServerMutex.Lock()
	defer fake.getVCServerMutex.Unlock()
	fake.GetVCServerStub = stub
}

func (fake *ClusterClient) GetVCServerReturns(result1 string, result2 error) {
	fake.getVCServerMutex.Lock()
	defer fake.getVCServerMutex.Unlock()
	fake.GetVCServerStub = nil
	fake.getVCServerReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetVCServerReturnsOnCall(i int, result1 string, result2 error) {
	fake.getVCServerMutex.Lock()
	defer fake.getVCServerMutex.Unlock()
	fake.GetVCServerStub = nil
	if fake.getVCServerReturnsOnCall == nil {
		fake.getVCServerReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getVCServerReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) HasCEIPTelemetryJob(arg1 string) (bool, error) {
	fake.hasCEIPTelemetryJobMutex.Lock()
	ret, specificReturn := fake.hasCEIPTelemetryJobReturnsOnCall[len(fake.hasCEIPTelemetryJobArgsForCall)]
	fake.hasCEIPTelemetryJobArgsForCall = append(fake.hasCEIPTelemetryJobArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("HasCEIPTelemetryJob", []interface{}{arg1})
	fake.hasCEIPTelemetryJobMutex.Unlock()
	if fake.HasCEIPTelemetryJobStub != nil {
		return fake.HasCEIPTelemetryJobStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.hasCEIPTelemetryJobReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ClusterClient) HasCEIPTelemetryJobCallCount() int {
	fake.hasCEIPTelemetryJobMutex.RLock()
	defer fake.hasCEIPTelemetryJobMutex.RUnlock()
	return len(fake.hasCEIPTelemetryJobArgsForCall)
}

func (fake *ClusterClient) HasCEIPTelemetryJobCalls(stub func(string) (bool, error)) {
	fake.hasCEIPTelemetryJobMutex.Lock()
	defer fake.hasCEIPTelemetryJobMutex.Unlock()
	fake.HasCEIPTelemetryJobStub = stub
}

func (fake *ClusterClient) HasCEIPTelemetryJobArgsForCall(i int) string {
	fake.hasCEIPTelemetryJobMutex.RLock()
	defer fake.hasCEIPTelemetryJobMutex.RUnlock()
	argsForCall := fake.hasCEIPTelemetryJobArgsForCall[i]
	return argsForCall.arg1
}

func (fake *ClusterClient) HasCEIPTelemetryJobReturns(result1 bool, result2 error) {
	fake.hasCEIPTelemetryJobMutex.Lock()
	defer fake.hasCEIPTelemetryJobMutex.Unlock()
	fake.HasCEIPTelemetryJobStub = nil
	fake.hasCEIPTelemetryJobReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) HasCEIPTelemetryJobReturnsOnCall(i int, result1 bool, result2 error) {
	fake.hasCEIPTelemetryJobMutex.Lock()
	defer fake.hasCEIPTelemetryJobMutex.Unlock()
	fake.HasCEIPTelemetryJobStub = nil
	if fake.hasCEIPTelemetryJobReturnsOnCall == nil {
		fake.hasCEIPTelemetryJobReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.hasCEIPTelemetryJobReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) IsClusterRegisteredToTMC() (bool, error) {
	fake.isClusterRegisteredToTMCMutex.Lock()
	ret, specificReturn := fake.isClusterRegisteredToTMCReturnsOnCall[len(fake.isClusterRegisteredToTMCArgsForCall)]
	fake.isClusterRegisteredToTMCArgsForCall = append(fake.isClusterRegisteredToTMCArgsForCall, struct {
	}{})
	fake.recordInvocation("IsClusterRegisteredToTMC", []interface{}{})
	fake.isClusterRegisteredToTMCMutex.Unlock()
	if fake.IsClusterRegisteredToTMCStub != nil {
		return fake.IsClusterRegisteredToTMCStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.isClusterRegisteredToTMCReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ClusterClient) IsClusterRegisteredToTMCCallCount() int {
	fake.isClusterRegisteredToTMCMutex.RLock()
	defer fake.isClusterRegisteredToTMCMutex.RUnlock()
	return len(fake.isClusterRegisteredToTMCArgsForCall)
}

func (fake *ClusterClient) IsClusterRegisteredToTMCCalls(stub func() (bool, error)) {
	fake.isClusterRegisteredToTMCMutex.Lock()
	defer fake.isClusterRegisteredToTMCMutex.Unlock()
	fake.IsClusterRegisteredToTMCStub = stub
}

func (fake *ClusterClient) IsClusterRegisteredToTMCReturns(result1 bool, result2 error) {
	fake.isClusterRegisteredToTMCMutex.Lock()
	defer fake.isClusterRegisteredToTMCMutex.Unlock()
	fake.IsClusterRegisteredToTMCStub = nil
	fake.isClusterRegisteredToTMCReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) IsClusterRegisteredToTMCReturnsOnCall(i int, result1 bool, result2 error) {
	fake.isClusterRegisteredToTMCMutex.Lock()
	defer fake.isClusterRegisteredToTMCMutex.Unlock()
	fake.IsClusterRegisteredToTMCStub = nil
	if fake.isClusterRegisteredToTMCReturnsOnCall == nil {
		fake.isClusterRegisteredToTMCReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.isClusterRegisteredToTMCReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) IsPacificRegionalCluster() (bool, error) {
	fake.isPacificRegionalClusterMutex.Lock()
	ret, specificReturn := fake.isPacificRegionalClusterReturnsOnCall[len(fake.isPacificRegionalClusterArgsForCall)]
	fake.isPacificRegionalClusterArgsForCall = append(fake.isPacificRegionalClusterArgsForCall, struct {
	}{})
	fake.recordInvocation("IsPacificRegionalCluster", []interface{}{})
	fake.isPacificRegionalClusterMutex.Unlock()
	if fake.IsPacificRegionalClusterStub != nil {
		return fake.IsPacificRegionalClusterStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.isPacificRegionalClusterReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ClusterClient) IsPacificRegionalClusterCallCount() int {
	fake.isPacificRegionalClusterMutex.RLock()
	defer fake.isPacificRegionalClusterMutex.RUnlock()
	return len(fake.isPacificRegionalClusterArgsForCall)
}

func (fake *ClusterClient) IsPacificRegionalClusterCalls(stub func() (bool, error)) {
	fake.isPacificRegionalClusterMutex.Lock()
	defer fake.isPacificRegionalClusterMutex.Unlock()
	fake.IsPacificRegionalClusterStub = stub
}

func (fake *ClusterClient) IsPacificRegionalClusterReturns(result1 bool, result2 error) {
	fake.isPacificRegionalClusterMutex.Lock()
	defer fake.isPacificRegionalClusterMutex.Unlock()
	fake.IsPacificRegionalClusterStub = nil
	fake.isPacificRegionalClusterReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) IsPacificRegionalClusterReturnsOnCall(i int, result1 bool, result2 error) {
	fake.isPacificRegionalClusterMutex.Lock()
	defer fake.isPacificRegionalClusterMutex.Unlock()
	fake.IsPacificRegionalClusterStub = nil
	if fake.isPacificRegionalClusterReturnsOnCall == nil {
		fake.isPacificRegionalClusterReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.isPacificRegionalClusterReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) IsRegionalCluster() error {
	fake.isRegionalClusterMutex.Lock()
	ret, specificReturn := fake.isRegionalClusterReturnsOnCall[len(fake.isRegionalClusterArgsForCall)]
	fake.isRegionalClusterArgsForCall = append(fake.isRegionalClusterArgsForCall, struct {
	}{})
	fake.recordInvocation("IsRegionalCluster", []interface{}{})
	fake.isRegionalClusterMutex.Unlock()
	if fake.IsRegionalClusterStub != nil {
		return fake.IsRegionalClusterStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.isRegionalClusterReturns
	return fakeReturns.result1
}

func (fake *ClusterClient) IsRegionalClusterCallCount() int {
	fake.isRegionalClusterMutex.RLock()
	defer fake.isRegionalClusterMutex.RUnlock()
	return len(fake.isRegionalClusterArgsForCall)
}

func (fake *ClusterClient) IsRegionalClusterCalls(stub func() error) {
	fake.isRegionalClusterMutex.Lock()
	defer fake.isRegionalClusterMutex.Unlock()
	fake.IsRegionalClusterStub = stub
}

func (fake *ClusterClient) IsRegionalClusterReturns(result1 error) {
	fake.isRegionalClusterMutex.Lock()
	defer fake.isRegionalClusterMutex.Unlock()
	fake.IsRegionalClusterStub = nil
	fake.isRegionalClusterReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) IsRegionalClusterReturnsOnCall(i int, result1 error) {
	fake.isRegionalClusterMutex.Lock()
	defer fake.isRegionalClusterMutex.Unlock()
	fake.IsRegionalClusterStub = nil
	if fake.isRegionalClusterReturnsOnCall == nil {
		fake.isRegionalClusterReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.isRegionalClusterReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) ListClusters(arg1 string) ([]v1alpha3a.Cluster, error) {
	fake.listClustersMutex.Lock()
	ret, specificReturn := fake.listClustersReturnsOnCall[len(fake.listClustersArgsForCall)]
	fake.listClustersArgsForCall = append(fake.listClustersArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("ListClusters", []interface{}{arg1})
	fake.listClustersMutex.Unlock()
	if fake.ListClustersStub != nil {
		return fake.ListClustersStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listClustersReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ClusterClient) ListClustersCallCount() int {
	fake.listClustersMutex.RLock()
	defer fake.listClustersMutex.RUnlock()
	return len(fake.listClustersArgsForCall)
}

func (fake *ClusterClient) ListClustersCalls(stub func(string) ([]v1alpha3a.Cluster, error)) {
	fake.listClustersMutex.Lock()
	defer fake.listClustersMutex.Unlock()
	fake.ListClustersStub = stub
}

func (fake *ClusterClient) ListClustersArgsForCall(i int) string {
	fake.listClustersMutex.RLock()
	defer fake.listClustersMutex.RUnlock()
	argsForCall := fake.listClustersArgsForCall[i]
	return argsForCall.arg1
}

func (fake *ClusterClient) ListClustersReturns(result1 []v1alpha3a.Cluster, result2 error) {
	fake.listClustersMutex.Lock()
	defer fake.listClustersMutex.Unlock()
	fake.ListClustersStub = nil
	fake.listClustersReturns = struct {
		result1 []v1alpha3a.Cluster
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) ListClustersReturnsOnCall(i int, result1 []v1alpha3a.Cluster, result2 error) {
	fake.listClustersMutex.Lock()
	defer fake.listClustersMutex.Unlock()
	fake.ListClustersStub = nil
	if fake.listClustersReturnsOnCall == nil {
		fake.listClustersReturnsOnCall = make(map[int]struct {
			result1 []v1alpha3a.Cluster
			result2 error
		})
	}
	fake.listClustersReturnsOnCall[i] = struct {
		result1 []v1alpha3a.Cluster
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) ListPacificClusterObjects(arg1 string, arg2 *client.ListOptions) ([]interface{}, error) {
	fake.listPacificClusterObjectsMutex.Lock()
	ret, specificReturn := fake.listPacificClusterObjectsReturnsOnCall[len(fake.listPacificClusterObjectsArgsForCall)]
	fake.listPacificClusterObjectsArgsForCall = append(fake.listPacificClusterObjectsArgsForCall, struct {
		arg1 string
		arg2 *client.ListOptions
	}{arg1, arg2})
	fake.recordInvocation("ListPacificClusterObjects", []interface{}{arg1, arg2})
	fake.listPacificClusterObjectsMutex.Unlock()
	if fake.ListPacificClusterObjectsStub != nil {
		return fake.ListPacificClusterObjectsStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.listPacificClusterObjectsReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ClusterClient) ListPacificClusterObjectsCallCount() int {
	fake.listPacificClusterObjectsMutex.RLock()
	defer fake.listPacificClusterObjectsMutex.RUnlock()
	return len(fake.listPacificClusterObjectsArgsForCall)
}

func (fake *ClusterClient) ListPacificClusterObjectsCalls(stub func(string, *client.ListOptions) ([]interface{}, error)) {
	fake.listPacificClusterObjectsMutex.Lock()
	defer fake.listPacificClusterObjectsMutex.Unlock()
	fake.ListPacificClusterObjectsStub = stub
}

func (fake *ClusterClient) ListPacificClusterObjectsArgsForCall(i int) (string, *client.ListOptions) {
	fake.listPacificClusterObjectsMutex.RLock()
	defer fake.listPacificClusterObjectsMutex.RUnlock()
	argsForCall := fake.listPacificClusterObjectsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ClusterClient) ListPacificClusterObjectsReturns(result1 []interface{}, result2 error) {
	fake.listPacificClusterObjectsMutex.Lock()
	defer fake.listPacificClusterObjectsMutex.Unlock()
	fake.ListPacificClusterObjectsStub = nil
	fake.listPacificClusterObjectsReturns = struct {
		result1 []interface{}
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) ListPacificClusterObjectsReturnsOnCall(i int, result1 []interface{}, result2 error) {
	fake.listPacificClusterObjectsMutex.Lock()
	defer fake.listPacificClusterObjectsMutex.Unlock()
	fake.ListPacificClusterObjectsStub = nil
	if fake.listPacificClusterObjectsReturnsOnCall == nil {
		fake.listPacificClusterObjectsReturnsOnCall = make(map[int]struct {
			result1 []interface{}
			result2 error
		})
	}
	fake.listPacificClusterObjectsReturnsOnCall[i] = struct {
		result1 []interface{}
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) ListResources(arg1 interface{}, arg2 ...client.ListOption) error {
	fake.listResourcesMutex.Lock()
	ret, specificReturn := fake.listResourcesReturnsOnCall[len(fake.listResourcesArgsForCall)]
	fake.listResourcesArgsForCall = append(fake.listResourcesArgsForCall, struct {
		arg1 interface{}
		arg2 []client.ListOption
	}{arg1, arg2})
	fake.recordInvocation("ListResources", []interface{}{arg1, arg2})
	fake.listResourcesMutex.Unlock()
	if fake.ListResourcesStub != nil {
		return fake.ListResourcesStub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.listResourcesReturns
	return fakeReturns.result1
}

func (fake *ClusterClient) ListResourcesCallCount() int {
	fake.listResourcesMutex.RLock()
	defer fake.listResourcesMutex.RUnlock()
	return len(fake.listResourcesArgsForCall)
}

func (fake *ClusterClient) ListResourcesCalls(stub func(interface{}, ...client.ListOption) error) {
	fake.listResourcesMutex.Lock()
	defer fake.listResourcesMutex.Unlock()
	fake.ListResourcesStub = stub
}

func (fake *ClusterClient) ListResourcesArgsForCall(i int) (interface{}, []client.ListOption) {
	fake.listResourcesMutex.RLock()
	defer fake.listResourcesMutex.RUnlock()
	argsForCall := fake.listResourcesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ClusterClient) ListResourcesReturns(result1 error) {
	fake.listResourcesMutex.Lock()
	defer fake.listResourcesMutex.Unlock()
	fake.ListResourcesStub = nil
	fake.listResourcesReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) ListResourcesReturnsOnCall(i int, result1 error) {
	fake.listResourcesMutex.Lock()
	defer fake.listResourcesMutex.Unlock()
	fake.ListResourcesStub = nil
	if fake.listResourcesReturnsOnCall == nil {
		fake.listResourcesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listResourcesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) LoadCurrentKubeconfigBytes() ([]byte, error) {
	fake.loadCurrentKubeconfigBytesMutex.Lock()
	ret, specificReturn := fake.loadCurrentKubeconfigBytesReturnsOnCall[len(fake.loadCurrentKubeconfigBytesArgsForCall)]
	fake.loadCurrentKubeconfigBytesArgsForCall = append(fake.loadCurrentKubeconfigBytesArgsForCall, struct {
	}{})
	fake.recordInvocation("LoadCurrentKubeconfigBytes", []interface{}{})
	fake.loadCurrentKubeconfigBytesMutex.Unlock()
	if fake.LoadCurrentKubeconfigBytesStub != nil {
		return fake.LoadCurrentKubeconfigBytesStub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.loadCurrentKubeconfigBytesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ClusterClient) LoadCurrentKubeconfigBytesCallCount() int {
	fake.loadCurrentKubeconfigBytesMutex.RLock()
	defer fake.loadCurrentKubeconfigBytesMutex.RUnlock()
	return len(fake.loadCurrentKubeconfigBytesArgsForCall)
}

func (fake *ClusterClient) LoadCurrentKubeconfigBytesCalls(stub func() ([]byte, error)) {
	fake.loadCurrentKubeconfigBytesMutex.Lock()
	defer fake.loadCurrentKubeconfigBytesMutex.Unlock()
	fake.LoadCurrentKubeconfigBytesStub = stub
}

func (fake *ClusterClient) LoadCurrentKubeconfigBytesReturns(result1 []byte, result2 error) {
	fake.loadCurrentKubeconfigBytesMutex.Lock()
	defer fake.loadCurrentKubeconfigBytesMutex.Unlock()
	fake.LoadCurrentKubeconfigBytesStub = nil
	fake.loadCurrentKubeconfigBytesReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) LoadCurrentKubeconfigBytesReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.loadCurrentKubeconfigBytesMutex.Lock()
	defer fake.loadCurrentKubeconfigBytesMutex.Unlock()
	fake.LoadCurrentKubeconfigBytesStub = nil
	if fake.loadCurrentKubeconfigBytesReturnsOnCall == nil {
		fake.loadCurrentKubeconfigBytesReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.loadCurrentKubeconfigBytesReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) MergeAndUseConfigForCluster(arg1 []byte, arg2 string) (string, string, error) {
	var arg1Copy []byte
	if arg1 != nil {
		arg1Copy = make([]byte, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.mergeAndUseConfigForClusterMutex.Lock()
	ret, specificReturn := fake.mergeAndUseConfigForClusterReturnsOnCall[len(fake.mergeAndUseConfigForClusterArgsForCall)]
	fake.mergeAndUseConfigForClusterArgsForCall = append(fake.mergeAndUseConfigForClusterArgsForCall, struct {
		arg1 []byte
		arg2 string
	}{arg1Copy, arg2})
	fake.recordInvocation("MergeAndUseConfigForCluster", []interface{}{arg1Copy, arg2})
	fake.mergeAndUseConfigForClusterMutex.Unlock()
	if fake.MergeAndUseConfigForClusterStub != nil {
		return fake.MergeAndUseConfigForClusterStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.mergeAndUseConfigForClusterReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *ClusterClient) MergeAndUseConfigForClusterCallCount() int {
	fake.mergeAndUseConfigForClusterMutex.RLock()
	defer fake.mergeAndUseConfigForClusterMutex.RUnlock()
	return len(fake.mergeAndUseConfigForClusterArgsForCall)
}

func (fake *ClusterClient) MergeAndUseConfigForClusterCalls(stub func([]byte, string) (string, string, error)) {
	fake.mergeAndUseConfigForClusterMutex.Lock()
	defer fake.mergeAndUseConfigForClusterMutex.Unlock()
	fake.MergeAndUseConfigForClusterStub = stub
}

func (fake *ClusterClient) MergeAndUseConfigForClusterArgsForCall(i int) ([]byte, string) {
	fake.mergeAndUseConfigForClusterMutex.RLock()
	defer fake.mergeAndUseConfigForClusterMutex.RUnlock()
	argsForCall := fake.mergeAndUseConfigForClusterArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ClusterClient) MergeAndUseConfigForClusterReturns(result1 string, result2 string, result3 error) {
	fake.mergeAndUseConfigForClusterMutex.Lock()
	defer fake.mergeAndUseConfigForClusterMutex.Unlock()
	fake.MergeAndUseConfigForClusterStub = nil
	fake.mergeAndUseConfigForClusterReturns = struct {
		result1 string
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *ClusterClient) MergeAndUseConfigForClusterReturnsOnCall(i int, result1 string, result2 string, result3 error) {
	fake.mergeAndUseConfigForClusterMutex.Lock()
	defer fake.mergeAndUseConfigForClusterMutex.Unlock()
	fake.MergeAndUseConfigForClusterStub = nil
	if fake.mergeAndUseConfigForClusterReturnsOnCall == nil {
		fake.mergeAndUseConfigForClusterReturnsOnCall = make(map[int]struct {
			result1 string
			result2 string
			result3 error
		})
	}
	fake.mergeAndUseConfigForClusterReturnsOnCall[i] = struct {
		result1 string
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *ClusterClient) MergeConfigForCluster(arg1 []byte, arg2 string) error {
	var arg1Copy []byte
	if arg1 != nil {
		arg1Copy = make([]byte, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.mergeConfigForClusterMutex.Lock()
	ret, specificReturn := fake.mergeConfigForClusterReturnsOnCall[len(fake.mergeConfigForClusterArgsForCall)]
	fake.mergeConfigForClusterArgsForCall = append(fake.mergeConfigForClusterArgsForCall, struct {
		arg1 []byte
		arg2 string
	}{arg1Copy, arg2})
	fake.recordInvocation("MergeConfigForCluster", []interface{}{arg1Copy, arg2})
	fake.mergeConfigForClusterMutex.Unlock()
	if fake.MergeConfigForClusterStub != nil {
		return fake.MergeConfigForClusterStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.mergeConfigForClusterReturns
	return fakeReturns.result1
}

func (fake *ClusterClient) MergeConfigForClusterCallCount() int {
	fake.mergeConfigForClusterMutex.RLock()
	defer fake.mergeConfigForClusterMutex.RUnlock()
	return len(fake.mergeConfigForClusterArgsForCall)
}

func (fake *ClusterClient) MergeConfigForClusterCalls(stub func([]byte, string) error) {
	fake.mergeConfigForClusterMutex.Lock()
	defer fake.mergeConfigForClusterMutex.Unlock()
	fake.MergeConfigForClusterStub = stub
}

func (fake *ClusterClient) MergeConfigForClusterArgsForCall(i int) ([]byte, string) {
	fake.mergeConfigForClusterMutex.RLock()
	defer fake.mergeConfigForClusterMutex.RUnlock()
	argsForCall := fake.mergeConfigForClusterArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ClusterClient) MergeConfigForClusterReturns(result1 error) {
	fake.mergeConfigForClusterMutex.Lock()
	defer fake.mergeConfigForClusterMutex.Unlock()
	fake.MergeConfigForClusterStub = nil
	fake.mergeConfigForClusterReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) MergeConfigForClusterReturnsOnCall(i int, result1 error) {
	fake.mergeConfigForClusterMutex.Lock()
	defer fake.mergeConfigForClusterMutex.Unlock()
	fake.MergeConfigForClusterStub = nil
	if fake.mergeConfigForClusterReturnsOnCall == nil {
		fake.mergeConfigForClusterReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.mergeConfigForClusterReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) PatchCalicoKubeControllerDeploymentWithNewNodeSelector(arg1 string, arg2 string) error {
	fake.patchCalicoKubeControllerDeploymentWithNewNodeSelectorMutex.Lock()
	ret, specificReturn := fake.patchCalicoKubeControllerDeploymentWithNewNodeSelectorReturnsOnCall[len(fake.patchCalicoKubeControllerDeploymentWithNewNodeSelectorArgsForCall)]
	fake.patchCalicoKubeControllerDeploymentWithNewNodeSelectorArgsForCall = append(fake.patchCalicoKubeControllerDeploymentWithNewNodeSelectorArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("PatchCalicoKubeControllerDeploymentWithNewNodeSelector", []interface{}{arg1, arg2})
	fake.patchCalicoKubeControllerDeploymentWithNewNodeSelectorMutex.Unlock()
	if fake.PatchCalicoKubeControllerDeploymentWithNewNodeSelectorStub != nil {
		return fake.PatchCalicoKubeControllerDeploymentWithNewNodeSelectorStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.patchCalicoKubeControllerDeploymentWithNewNodeSelectorReturns
	return fakeReturns.result1
}

func (fake *ClusterClient) PatchCalicoKubeControllerDeploymentWithNewNodeSelectorCallCount() int {
	fake.patchCalicoKubeControllerDeploymentWithNewNodeSelectorMutex.RLock()
	defer fake.patchCalicoKubeControllerDeploymentWithNewNodeSelectorMutex.RUnlock()
	return len(fake.patchCalicoKubeControllerDeploymentWithNewNodeSelectorArgsForCall)
}

func (fake *ClusterClient) PatchCalicoKubeControllerDeploymentWithNewNodeSelectorCalls(stub func(string, string) error) {
	fake.patchCalicoKubeControllerDeploymentWithNewNodeSelectorMutex.Lock()
	defer fake.patchCalicoKubeControllerDeploymentWithNewNodeSelectorMutex.Unlock()
	fake.PatchCalicoKubeControllerDeploymentWithNewNodeSelectorStub = stub
}

func (fake *ClusterClient) PatchCalicoKubeControllerDeploymentWithNewNodeSelectorArgsForCall(i int) (string, string) {
	fake.patchCalicoKubeControllerDeploymentWithNewNodeSelectorMutex.RLock()
	defer fake.patchCalicoKubeControllerDeploymentWithNewNodeSelectorMutex.RUnlock()
	argsForCall := fake.patchCalicoKubeControllerDeploymentWithNewNodeSelectorArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ClusterClient) PatchCalicoKubeControllerDeploymentWithNewNodeSelectorReturns(result1 error) {
	fake.patchCalicoKubeControllerDeploymentWithNewNodeSelectorMutex.Lock()
	defer fake.patchCalicoKubeControllerDeploymentWithNewNodeSelectorMutex.Unlock()
	fake.PatchCalicoKubeControllerDeploymentWithNewNodeSelectorStub = nil
	fake.patchCalicoKubeControllerDeploymentWithNewNodeSelectorReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) PatchCalicoKubeControllerDeploymentWithNewNodeSelectorReturnsOnCall(i int, result1 error) {
	fake.patchCalicoKubeControllerDeploymentWithNewNodeSelectorMutex.Lock()
	defer fake.patchCalicoKubeControllerDeploymentWithNewNodeSelectorMutex.Unlock()
	fake.PatchCalicoKubeControllerDeploymentWithNewNodeSelectorStub = nil
	if fake.patchCalicoKubeControllerDeploymentWithNewNodeSelectorReturnsOnCall == nil {
		fake.patchCalicoKubeControllerDeploymentWithNewNodeSelectorReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.patchCalicoKubeControllerDeploymentWithNewNodeSelectorReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) PatchCalicoNodeDaemonSetWithNewNodeSelector(arg1 string, arg2 string) error {
	fake.patchCalicoNodeDaemonSetWithNewNodeSelectorMutex.Lock()
	ret, specificReturn := fake.patchCalicoNodeDaemonSetWithNewNodeSelectorReturnsOnCall[len(fake.patchCalicoNodeDaemonSetWithNewNodeSelectorArgsForCall)]
	fake.patchCalicoNodeDaemonSetWithNewNodeSelectorArgsForCall = append(fake.patchCalicoNodeDaemonSetWithNewNodeSelectorArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("PatchCalicoNodeDaemonSetWithNewNodeSelector", []interface{}{arg1, arg2})
	fake.patchCalicoNodeDaemonSetWithNewNodeSelectorMutex.Unlock()
	if fake.PatchCalicoNodeDaemonSetWithNewNodeSelectorStub != nil {
		return fake.PatchCalicoNodeDaemonSetWithNewNodeSelectorStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.patchCalicoNodeDaemonSetWithNewNodeSelectorReturns
	return fakeReturns.result1
}

func (fake *ClusterClient) PatchCalicoNodeDaemonSetWithNewNodeSelectorCallCount() int {
	fake.patchCalicoNodeDaemonSetWithNewNodeSelectorMutex.RLock()
	defer fake.patchCalicoNodeDaemonSetWithNewNodeSelectorMutex.RUnlock()
	return len(fake.patchCalicoNodeDaemonSetWithNewNodeSelectorArgsForCall)
}

func (fake *ClusterClient) PatchCalicoNodeDaemonSetWithNewNodeSelectorCalls(stub func(string, string) error) {
	fake.patchCalicoNodeDaemonSetWithNewNodeSelectorMutex.Lock()
	defer fake.patchCalicoNodeDaemonSetWithNewNodeSelectorMutex.Unlock()
	fake.PatchCalicoNodeDaemonSetWithNewNodeSelectorStub = stub
}

func (fake *ClusterClient) PatchCalicoNodeDaemonSetWithNewNodeSelectorArgsForCall(i int) (string, string) {
	fake.patchCalicoNodeDaemonSetWithNewNodeSelectorMutex.RLock()
	defer fake.patchCalicoNodeDaemonSetWithNewNodeSelectorMutex.RUnlock()
	argsForCall := fake.patchCalicoNodeDaemonSetWithNewNodeSelectorArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ClusterClient) PatchCalicoNodeDaemonSetWithNewNodeSelectorReturns(result1 error) {
	fake.patchCalicoNodeDaemonSetWithNewNodeSelectorMutex.Lock()
	defer fake.patchCalicoNodeDaemonSetWithNewNodeSelectorMutex.Unlock()
	fake.PatchCalicoNodeDaemonSetWithNewNodeSelectorStub = nil
	fake.patchCalicoNodeDaemonSetWithNewNodeSelectorReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) PatchCalicoNodeDaemonSetWithNewNodeSelectorReturnsOnCall(i int, result1 error) {
	fake.patchCalicoNodeDaemonSetWithNewNodeSelectorMutex.Lock()
	defer fake.patchCalicoNodeDaemonSetWithNewNodeSelectorMutex.Unlock()
	fake.PatchCalicoNodeDaemonSetWithNewNodeSelectorStub = nil
	if fake.patchCalicoNodeDaemonSetWithNewNodeSelectorReturnsOnCall == nil {
		fake.patchCalicoNodeDaemonSetWithNewNodeSelectorReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.patchCalicoNodeDaemonSetWithNewNodeSelectorReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) PatchClusterAPIAWSControllersToUseEC2Credentials() error {
	fake.patchClusterAPIAWSControllersToUseEC2CredentialsMutex.Lock()
	ret, specificReturn := fake.patchClusterAPIAWSControllersToUseEC2CredentialsReturnsOnCall[len(fake.patchClusterAPIAWSControllersToUseEC2CredentialsArgsForCall)]
	fake.patchClusterAPIAWSControllersToUseEC2CredentialsArgsForCall = append(fake.patchClusterAPIAWSControllersToUseEC2CredentialsArgsForCall, struct {
	}{})
	fake.recordInvocation("PatchClusterAPIAWSControllersToUseEC2Credentials", []interface{}{})
	fake.patchClusterAPIAWSControllersToUseEC2CredentialsMutex.Unlock()
	if fake.PatchClusterAPIAWSControllersToUseEC2CredentialsStub != nil {
		return fake.PatchClusterAPIAWSControllersToUseEC2CredentialsStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.patchClusterAPIAWSControllersToUseEC2CredentialsReturns
	return fakeReturns.result1
}

func (fake *ClusterClient) PatchClusterAPIAWSControllersToUseEC2CredentialsCallCount() int {
	fake.patchClusterAPIAWSControllersToUseEC2CredentialsMutex.RLock()
	defer fake.patchClusterAPIAWSControllersToUseEC2CredentialsMutex.RUnlock()
	return len(fake.patchClusterAPIAWSControllersToUseEC2CredentialsArgsForCall)
}

func (fake *ClusterClient) PatchClusterAPIAWSControllersToUseEC2CredentialsCalls(stub func() error) {
	fake.patchClusterAPIAWSControllersToUseEC2CredentialsMutex.Lock()
	defer fake.patchClusterAPIAWSControllersToUseEC2CredentialsMutex.Unlock()
	fake.PatchClusterAPIAWSControllersToUseEC2CredentialsStub = stub
}

func (fake *ClusterClient) PatchClusterAPIAWSControllersToUseEC2CredentialsReturns(result1 error) {
	fake.patchClusterAPIAWSControllersToUseEC2CredentialsMutex.Lock()
	defer fake.patchClusterAPIAWSControllersToUseEC2CredentialsMutex.Unlock()
	fake.PatchClusterAPIAWSControllersToUseEC2CredentialsStub = nil
	fake.patchClusterAPIAWSControllersToUseEC2CredentialsReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) PatchClusterAPIAWSControllersToUseEC2CredentialsReturnsOnCall(i int, result1 error) {
	fake.patchClusterAPIAWSControllersToUseEC2CredentialsMutex.Lock()
	defer fake.patchClusterAPIAWSControllersToUseEC2CredentialsMutex.Unlock()
	fake.PatchClusterAPIAWSControllersToUseEC2CredentialsStub = nil
	if fake.patchClusterAPIAWSControllersToUseEC2CredentialsReturnsOnCall == nil {
		fake.patchClusterAPIAWSControllersToUseEC2CredentialsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.patchClusterAPIAWSControllersToUseEC2CredentialsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) PatchClusterObject(arg1 string, arg2 string, arg3 string) error {
	fake.patchClusterObjectMutex.Lock()
	ret, specificReturn := fake.patchClusterObjectReturnsOnCall[len(fake.patchClusterObjectArgsForCall)]
	fake.patchClusterObjectArgsForCall = append(fake.patchClusterObjectArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("PatchClusterObject", []interface{}{arg1, arg2, arg3})
	fake.patchClusterObjectMutex.Unlock()
	if fake.PatchClusterObjectStub != nil {
		return fake.PatchClusterObjectStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.patchClusterObjectReturns
	return fakeReturns.result1
}

func (fake *ClusterClient) PatchClusterObjectCallCount() int {
	fake.patchClusterObjectMutex.RLock()
	defer fake.patchClusterObjectMutex.RUnlock()
	return len(fake.patchClusterObjectArgsForCall)
}

func (fake *ClusterClient) PatchClusterObjectCalls(stub func(string, string, string) error) {
	fake.patchClusterObjectMutex.Lock()
	defer fake.patchClusterObjectMutex.Unlock()
	fake.PatchClusterObjectStub = stub
}

func (fake *ClusterClient) PatchClusterObjectArgsForCall(i int) (string, string, string) {
	fake.patchClusterObjectMutex.RLock()
	defer fake.patchClusterObjectMutex.RUnlock()
	argsForCall := fake.patchClusterObjectArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *ClusterClient) PatchClusterObjectReturns(result1 error) {
	fake.patchClusterObjectMutex.Lock()
	defer fake.patchClusterObjectMutex.Unlock()
	fake.PatchClusterObjectStub = nil
	fake.patchClusterObjectReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) PatchClusterObjectReturnsOnCall(i int, result1 error) {
	fake.patchClusterObjectMutex.Lock()
	defer fake.patchClusterObjectMutex.Unlock()
	fake.PatchClusterObjectStub = nil
	if fake.patchClusterObjectReturnsOnCall == nil {
		fake.patchClusterObjectReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.patchClusterObjectReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) PatchClusterObjectWithOptionalMetadata(arg1 string, arg2 string, arg3 string, arg4 map[string]string) (string, error) {
	fake.patchClusterObjectWithOptionalMetadataMutex.Lock()
	ret, specificReturn := fake.patchClusterObjectWithOptionalMetadataReturnsOnCall[len(fake.patchClusterObjectWithOptionalMetadataArgsForCall)]
	fake.patchClusterObjectWithOptionalMetadataArgsForCall = append(fake.patchClusterObjectWithOptionalMetadataArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 map[string]string
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("PatchClusterObjectWithOptionalMetadata", []interface{}{arg1, arg2, arg3, arg4})
	fake.patchClusterObjectWithOptionalMetadataMutex.Unlock()
	if fake.PatchClusterObjectWithOptionalMetadataStub != nil {
		return fake.PatchClusterObjectWithOptionalMetadataStub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.patchClusterObjectWithOptionalMetadataReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ClusterClient) PatchClusterObjectWithOptionalMetadataCallCount() int {
	fake.patchClusterObjectWithOptionalMetadataMutex.RLock()
	defer fake.patchClusterObjectWithOptionalMetadataMutex.RUnlock()
	return len(fake.patchClusterObjectWithOptionalMetadataArgsForCall)
}

func (fake *ClusterClient) PatchClusterObjectWithOptionalMetadataCalls(stub func(string, string, string, map[string]string) (string, error)) {
	fake.patchClusterObjectWithOptionalMetadataMutex.Lock()
	defer fake.patchClusterObjectWithOptionalMetadataMutex.Unlock()
	fake.PatchClusterObjectWithOptionalMetadataStub = stub
}

func (fake *ClusterClient) PatchClusterObjectWithOptionalMetadataArgsForCall(i int) (string, string, string, map[string]string) {
	fake.patchClusterObjectWithOptionalMetadataMutex.RLock()
	defer fake.patchClusterObjectWithOptionalMetadataMutex.RUnlock()
	argsForCall := fake.patchClusterObjectWithOptionalMetadataArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *ClusterClient) PatchClusterObjectWithOptionalMetadataReturns(result1 string, result2 error) {
	fake.patchClusterObjectWithOptionalMetadataMutex.Lock()
	defer fake.patchClusterObjectWithOptionalMetadataMutex.Unlock()
	fake.PatchClusterObjectWithOptionalMetadataStub = nil
	fake.patchClusterObjectWithOptionalMetadataReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) PatchClusterObjectWithOptionalMetadataReturnsOnCall(i int, result1 string, result2 error) {
	fake.patchClusterObjectWithOptionalMetadataMutex.Lock()
	defer fake.patchClusterObjectWithOptionalMetadataMutex.Unlock()
	fake.PatchClusterObjectWithOptionalMetadataStub = nil
	if fake.patchClusterObjectWithOptionalMetadataReturnsOnCall == nil {
		fake.patchClusterObjectWithOptionalMetadataReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.patchClusterObjectWithOptionalMetadataReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) PatchClusterObjectWithTKGVersion(arg1 string, arg2 string, arg3 string) error {
	fake.patchClusterObjectWithTKGVersionMutex.Lock()
	ret, specificReturn := fake.patchClusterObjectWithTKGVersionReturnsOnCall[len(fake.patchClusterObjectWithTKGVersionArgsForCall)]
	fake.patchClusterObjectWithTKGVersionArgsForCall = append(fake.patchClusterObjectWithTKGVersionArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("PatchClusterObjectWithTKGVersion", []interface{}{arg1, arg2, arg3})
	fake.patchClusterObjectWithTKGVersionMutex.Unlock()
	if fake.PatchClusterObjectWithTKGVersionStub != nil {
		return fake.PatchClusterObjectWithTKGVersionStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.patchClusterObjectWithTKGVersionReturns
	return fakeReturns.result1
}

func (fake *ClusterClient) PatchClusterObjectWithTKGVersionCallCount() int {
	fake.patchClusterObjectWithTKGVersionMutex.RLock()
	defer fake.patchClusterObjectWithTKGVersionMutex.RUnlock()
	return len(fake.patchClusterObjectWithTKGVersionArgsForCall)
}

func (fake *ClusterClient) PatchClusterObjectWithTKGVersionCalls(stub func(string, string, string) error) {
	fake.patchClusterObjectWithTKGVersionMutex.Lock()
	defer fake.patchClusterObjectWithTKGVersionMutex.Unlock()
	fake.PatchClusterObjectWithTKGVersionStub = stub
}

func (fake *ClusterClient) PatchClusterObjectWithTKGVersionArgsForCall(i int) (string, string, string) {
	fake.patchClusterObjectWithTKGVersionMutex.RLock()
	defer fake.patchClusterObjectWithTKGVersionMutex.RUnlock()
	argsForCall := fake.patchClusterObjectWithTKGVersionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *ClusterClient) PatchClusterObjectWithTKGVersionReturns(result1 error) {
	fake.patchClusterObjectWithTKGVersionMutex.Lock()
	defer fake.patchClusterObjectWithTKGVersionMutex.Unlock()
	fake.PatchClusterObjectWithTKGVersionStub = nil
	fake.patchClusterObjectWithTKGVersionReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) PatchClusterObjectWithTKGVersionReturnsOnCall(i int, result1 error) {
	fake.patchClusterObjectWithTKGVersionMutex.Lock()
	defer fake.patchClusterObjectWithTKGVersionMutex.Unlock()
	fake.PatchClusterObjectWithTKGVersionStub = nil
	if fake.patchClusterObjectWithTKGVersionReturnsOnCall == nil {
		fake.patchClusterObjectWithTKGVersionReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.patchClusterObjectWithTKGVersionReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) PatchClusterWithOperationStartedStatus(arg1 string, arg2 string, arg3 string, arg4 time.Duration) error {
	fake.patchClusterWithOperationStartedStatusMutex.Lock()
	ret, specificReturn := fake.patchClusterWithOperationStartedStatusReturnsOnCall[len(fake.patchClusterWithOperationStartedStatusArgsForCall)]
	fake.patchClusterWithOperationStartedStatusArgsForCall = append(fake.patchClusterWithOperationStartedStatusArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 time.Duration
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("PatchClusterWithOperationStartedStatus", []interface{}{arg1, arg2, arg3, arg4})
	fake.patchClusterWithOperationStartedStatusMutex.Unlock()
	if fake.PatchClusterWithOperationStartedStatusStub != nil {
		return fake.PatchClusterWithOperationStartedStatusStub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.patchClusterWithOperationStartedStatusReturns
	return fakeReturns.result1
}

func (fake *ClusterClient) PatchClusterWithOperationStartedStatusCallCount() int {
	fake.patchClusterWithOperationStartedStatusMutex.RLock()
	defer fake.patchClusterWithOperationStartedStatusMutex.RUnlock()
	return len(fake.patchClusterWithOperationStartedStatusArgsForCall)
}

func (fake *ClusterClient) PatchClusterWithOperationStartedStatusCalls(stub func(string, string, string, time.Duration) error) {
	fake.patchClusterWithOperationStartedStatusMutex.Lock()
	defer fake.patchClusterWithOperationStartedStatusMutex.Unlock()
	fake.PatchClusterWithOperationStartedStatusStub = stub
}

func (fake *ClusterClient) PatchClusterWithOperationStartedStatusArgsForCall(i int) (string, string, string, time.Duration) {
	fake.patchClusterWithOperationStartedStatusMutex.RLock()
	defer fake.patchClusterWithOperationStartedStatusMutex.RUnlock()
	argsForCall := fake.patchClusterWithOperationStartedStatusArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *ClusterClient) PatchClusterWithOperationStartedStatusReturns(result1 error) {
	fake.patchClusterWithOperationStartedStatusMutex.Lock()
	defer fake.patchClusterWithOperationStartedStatusMutex.Unlock()
	fake.PatchClusterWithOperationStartedStatusStub = nil
	fake.patchClusterWithOperationStartedStatusReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) PatchClusterWithOperationStartedStatusReturnsOnCall(i int, result1 error) {
	fake.patchClusterWithOperationStartedStatusMutex.Lock()
	defer fake.patchClusterWithOperationStartedStatusMutex.Unlock()
	fake.PatchClusterWithOperationStartedStatusStub = nil
	if fake.patchClusterWithOperationStartedStatusReturnsOnCall == nil {
		fake.patchClusterWithOperationStartedStatusReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.patchClusterWithOperationStartedStatusReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) PatchCoreDNSImageRepositoryInKubeadmConfigMap(arg1 string) error {
	fake.patchCoreDNSImageRepositoryInKubeadmConfigMapMutex.Lock()
	ret, specificReturn := fake.patchCoreDNSImageRepositoryInKubeadmConfigMapReturnsOnCall[len(fake.patchCoreDNSImageRepositoryInKubeadmConfigMapArgsForCall)]
	fake.patchCoreDNSImageRepositoryInKubeadmConfigMapArgsForCall = append(fake.patchCoreDNSImageRepositoryInKubeadmConfigMapArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("PatchCoreDNSImageRepositoryInKubeadmConfigMap", []interface{}{arg1})
	fake.patchCoreDNSImageRepositoryInKubeadmConfigMapMutex.Unlock()
	if fake.PatchCoreDNSImageRepositoryInKubeadmConfigMapStub != nil {
		return fake.PatchCoreDNSImageRepositoryInKubeadmConfigMapStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.patchCoreDNSImageRepositoryInKubeadmConfigMapReturns
	return fakeReturns.result1
}

func (fake *ClusterClient) PatchCoreDNSImageRepositoryInKubeadmConfigMapCallCount() int {
	fake.patchCoreDNSImageRepositoryInKubeadmConfigMapMutex.RLock()
	defer fake.patchCoreDNSImageRepositoryInKubeadmConfigMapMutex.RUnlock()
	return len(fake.patchCoreDNSImageRepositoryInKubeadmConfigMapArgsForCall)
}

func (fake *ClusterClient) PatchCoreDNSImageRepositoryInKubeadmConfigMapCalls(stub func(string) error) {
	fake.patchCoreDNSImageRepositoryInKubeadmConfigMapMutex.Lock()
	defer fake.patchCoreDNSImageRepositoryInKubeadmConfigMapMutex.Unlock()
	fake.PatchCoreDNSImageRepositoryInKubeadmConfigMapStub = stub
}

func (fake *ClusterClient) PatchCoreDNSImageRepositoryInKubeadmConfigMapArgsForCall(i int) string {
	fake.patchCoreDNSImageRepositoryInKubeadmConfigMapMutex.RLock()
	defer fake.patchCoreDNSImageRepositoryInKubeadmConfigMapMutex.RUnlock()
	argsForCall := fake.patchCoreDNSImageRepositoryInKubeadmConfigMapArgsForCall[i]
	return argsForCall.arg1
}

func (fake *ClusterClient) PatchCoreDNSImageRepositoryInKubeadmConfigMapReturns(result1 error) {
	fake.patchCoreDNSImageRepositoryInKubeadmConfigMapMutex.Lock()
	defer fake.patchCoreDNSImageRepositoryInKubeadmConfigMapMutex.Unlock()
	fake.PatchCoreDNSImageRepositoryInKubeadmConfigMapStub = nil
	fake.patchCoreDNSImageRepositoryInKubeadmConfigMapReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) PatchCoreDNSImageRepositoryInKubeadmConfigMapReturnsOnCall(i int, result1 error) {
	fake.patchCoreDNSImageRepositoryInKubeadmConfigMapMutex.Lock()
	defer fake.patchCoreDNSImageRepositoryInKubeadmConfigMapMutex.Unlock()
	fake.PatchCoreDNSImageRepositoryInKubeadmConfigMapStub = nil
	if fake.patchCoreDNSImageRepositoryInKubeadmConfigMapReturnsOnCall == nil {
		fake.patchCoreDNSImageRepositoryInKubeadmConfigMapReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.patchCoreDNSImageRepositoryInKubeadmConfigMapReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) PatchImageRepositoryInKubeProxyDaemonSet(arg1 string) error {
	fake.patchImageRepositoryInKubeProxyDaemonSetMutex.Lock()
	ret, specificReturn := fake.patchImageRepositoryInKubeProxyDaemonSetReturnsOnCall[len(fake.patchImageRepositoryInKubeProxyDaemonSetArgsForCall)]
	fake.patchImageRepositoryInKubeProxyDaemonSetArgsForCall = append(fake.patchImageRepositoryInKubeProxyDaemonSetArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("PatchImageRepositoryInKubeProxyDaemonSet", []interface{}{arg1})
	fake.patchImageRepositoryInKubeProxyDaemonSetMutex.Unlock()
	if fake.PatchImageRepositoryInKubeProxyDaemonSetStub != nil {
		return fake.PatchImageRepositoryInKubeProxyDaemonSetStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.patchImageRepositoryInKubeProxyDaemonSetReturns
	return fakeReturns.result1
}

func (fake *ClusterClient) PatchImageRepositoryInKubeProxyDaemonSetCallCount() int {
	fake.patchImageRepositoryInKubeProxyDaemonSetMutex.RLock()
	defer fake.patchImageRepositoryInKubeProxyDaemonSetMutex.RUnlock()
	return len(fake.patchImageRepositoryInKubeProxyDaemonSetArgsForCall)
}

func (fake *ClusterClient) PatchImageRepositoryInKubeProxyDaemonSetCalls(stub func(string) error) {
	fake.patchImageRepositoryInKubeProxyDaemonSetMutex.Lock()
	defer fake.patchImageRepositoryInKubeProxyDaemonSetMutex.Unlock()
	fake.PatchImageRepositoryInKubeProxyDaemonSetStub = stub
}

func (fake *ClusterClient) PatchImageRepositoryInKubeProxyDaemonSetArgsForCall(i int) string {
	fake.patchImageRepositoryInKubeProxyDaemonSetMutex.RLock()
	defer fake.patchImageRepositoryInKubeProxyDaemonSetMutex.RUnlock()
	argsForCall := fake.patchImageRepositoryInKubeProxyDaemonSetArgsForCall[i]
	return argsForCall.arg1
}

func (fake *ClusterClient) PatchImageRepositoryInKubeProxyDaemonSetReturns(result1 error) {
	fake.patchImageRepositoryInKubeProxyDaemonSetMutex.Lock()
	defer fake.patchImageRepositoryInKubeProxyDaemonSetMutex.Unlock()
	fake.PatchImageRepositoryInKubeProxyDaemonSetStub = nil
	fake.patchImageRepositoryInKubeProxyDaemonSetReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) PatchImageRepositoryInKubeProxyDaemonSetReturnsOnCall(i int, result1 error) {
	fake.patchImageRepositoryInKubeProxyDaemonSetMutex.Lock()
	defer fake.patchImageRepositoryInKubeProxyDaemonSetMutex.Unlock()
	fake.PatchImageRepositoryInKubeProxyDaemonSetStub = nil
	if fake.patchImageRepositoryInKubeProxyDaemonSetReturnsOnCall == nil {
		fake.patchImageRepositoryInKubeProxyDaemonSetReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.patchImageRepositoryInKubeProxyDaemonSetReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) PatchK8SVersionToPacificCluster(arg1 string, arg2 string, arg3 string) error {
	fake.patchK8SVersionToPacificClusterMutex.Lock()
	ret, specificReturn := fake.patchK8SVersionToPacificClusterReturnsOnCall[len(fake.patchK8SVersionToPacificClusterArgsForCall)]
	fake.patchK8SVersionToPacificClusterArgsForCall = append(fake.patchK8SVersionToPacificClusterArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("PatchK8SVersionToPacificCluster", []interface{}{arg1, arg2, arg3})
	fake.patchK8SVersionToPacificClusterMutex.Unlock()
	if fake.PatchK8SVersionToPacificClusterStub != nil {
		return fake.PatchK8SVersionToPacificClusterStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.patchK8SVersionToPacificClusterReturns
	return fakeReturns.result1
}

func (fake *ClusterClient) PatchK8SVersionToPacificClusterCallCount() int {
	fake.patchK8SVersionToPacificClusterMutex.RLock()
	defer fake.patchK8SVersionToPacificClusterMutex.RUnlock()
	return len(fake.patchK8SVersionToPacificClusterArgsForCall)
}

func (fake *ClusterClient) PatchK8SVersionToPacificClusterCalls(stub func(string, string, string) error) {
	fake.patchK8SVersionToPacificClusterMutex.Lock()
	defer fake.patchK8SVersionToPacificClusterMutex.Unlock()
	fake.PatchK8SVersionToPacificClusterStub = stub
}

func (fake *ClusterClient) PatchK8SVersionToPacificClusterArgsForCall(i int) (string, string, string) {
	fake.patchK8SVersionToPacificClusterMutex.RLock()
	defer fake.patchK8SVersionToPacificClusterMutex.RUnlock()
	argsForCall := fake.patchK8SVersionToPacificClusterArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *ClusterClient) PatchK8SVersionToPacificClusterReturns(result1 error) {
	fake.patchK8SVersionToPacificClusterMutex.Lock()
	defer fake.patchK8SVersionToPacificClusterMutex.Unlock()
	fake.PatchK8SVersionToPacificClusterStub = nil
	fake.patchK8SVersionToPacificClusterReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) PatchK8SVersionToPacificClusterReturnsOnCall(i int, result1 error) {
	fake.patchK8SVersionToPacificClusterMutex.Lock()
	defer fake.patchK8SVersionToPacificClusterMutex.Unlock()
	fake.PatchK8SVersionToPacificClusterStub = nil
	if fake.patchK8SVersionToPacificClusterReturnsOnCall == nil {
		fake.patchK8SVersionToPacificClusterReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.patchK8SVersionToPacificClusterReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) PatchResource(arg1 interface{}, arg2 string, arg3 string, arg4 string, arg5 types.PatchType, arg6 *clusterclient.PollOptions) error {
	fake.patchResourceMutex.Lock()
	ret, specificReturn := fake.patchResourceReturnsOnCall[len(fake.patchResourceArgsForCall)]
	fake.patchResourceArgsForCall = append(fake.patchResourceArgsForCall, struct {
		arg1 interface{}
		arg2 string
		arg3 string
		arg4 string
		arg5 types.PatchType
		arg6 *clusterclient.PollOptions
	}{arg1, arg2, arg3, arg4, arg5, arg6})
	fake.recordInvocation("PatchResource", []interface{}{arg1, arg2, arg3, arg4, arg5, arg6})
	fake.patchResourceMutex.Unlock()
	if fake.PatchResourceStub != nil {
		return fake.PatchResourceStub(arg1, arg2, arg3, arg4, arg5, arg6)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.patchResourceReturns
	return fakeReturns.result1
}

func (fake *ClusterClient) PatchResourceCallCount() int {
	fake.patchResourceMutex.RLock()
	defer fake.patchResourceMutex.RUnlock()
	return len(fake.patchResourceArgsForCall)
}

func (fake *ClusterClient) PatchResourceCalls(stub func(interface{}, string, string, string, types.PatchType, *clusterclient.PollOptions) error) {
	fake.patchResourceMutex.Lock()
	defer fake.patchResourceMutex.Unlock()
	fake.PatchResourceStub = stub
}

func (fake *ClusterClient) PatchResourceArgsForCall(i int) (interface{}, string, string, string, types.PatchType, *clusterclient.PollOptions) {
	fake.patchResourceMutex.RLock()
	defer fake.patchResourceMutex.RUnlock()
	argsForCall := fake.patchResourceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5, argsForCall.arg6
}

func (fake *ClusterClient) PatchResourceReturns(result1 error) {
	fake.patchResourceMutex.Lock()
	defer fake.patchResourceMutex.Unlock()
	fake.PatchResourceStub = nil
	fake.patchResourceReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) PatchResourceReturnsOnCall(i int, result1 error) {
	fake.patchResourceMutex.Lock()
	defer fake.patchResourceMutex.Unlock()
	fake.PatchResourceStub = nil
	if fake.patchResourceReturnsOnCall == nil {
		fake.patchResourceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.patchResourceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) RemoveCEIPTelemetryJob(arg1 string) error {
	fake.removeCEIPTelemetryJobMutex.Lock()
	ret, specificReturn := fake.removeCEIPTelemetryJobReturnsOnCall[len(fake.removeCEIPTelemetryJobArgsForCall)]
	fake.removeCEIPTelemetryJobArgsForCall = append(fake.removeCEIPTelemetryJobArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("RemoveCEIPTelemetryJob", []interface{}{arg1})
	fake.removeCEIPTelemetryJobMutex.Unlock()
	if fake.RemoveCEIPTelemetryJobStub != nil {
		return fake.RemoveCEIPTelemetryJobStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.removeCEIPTelemetryJobReturns
	return fakeReturns.result1
}

func (fake *ClusterClient) RemoveCEIPTelemetryJobCallCount() int {
	fake.removeCEIPTelemetryJobMutex.RLock()
	defer fake.removeCEIPTelemetryJobMutex.RUnlock()
	return len(fake.removeCEIPTelemetryJobArgsForCall)
}

func (fake *ClusterClient) RemoveCEIPTelemetryJobCalls(stub func(string) error) {
	fake.removeCEIPTelemetryJobMutex.Lock()
	defer fake.removeCEIPTelemetryJobMutex.Unlock()
	fake.RemoveCEIPTelemetryJobStub = stub
}

func (fake *ClusterClient) RemoveCEIPTelemetryJobArgsForCall(i int) string {
	fake.removeCEIPTelemetryJobMutex.RLock()
	defer fake.removeCEIPTelemetryJobMutex.RUnlock()
	argsForCall := fake.removeCEIPTelemetryJobArgsForCall[i]
	return argsForCall.arg1
}

func (fake *ClusterClient) RemoveCEIPTelemetryJobReturns(result1 error) {
	fake.removeCEIPTelemetryJobMutex.Lock()
	defer fake.removeCEIPTelemetryJobMutex.Unlock()
	fake.RemoveCEIPTelemetryJobStub = nil
	fake.removeCEIPTelemetryJobReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) RemoveCEIPTelemetryJobReturnsOnCall(i int, result1 error) {
	fake.removeCEIPTelemetryJobMutex.Lock()
	defer fake.removeCEIPTelemetryJobMutex.Unlock()
	fake.RemoveCEIPTelemetryJobStub = nil
	if fake.removeCEIPTelemetryJobReturnsOnCall == nil {
		fake.removeCEIPTelemetryJobReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.removeCEIPTelemetryJobReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) ScalePacificClusterControlPlane(arg1 string, arg2 string, arg3 int32) error {
	fake.scalePacificClusterControlPlaneMutex.Lock()
	ret, specificReturn := fake.scalePacificClusterControlPlaneReturnsOnCall[len(fake.scalePacificClusterControlPlaneArgsForCall)]
	fake.scalePacificClusterControlPlaneArgsForCall = append(fake.scalePacificClusterControlPlaneArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 int32
	}{arg1, arg2, arg3})
	fake.recordInvocation("ScalePacificClusterControlPlane", []interface{}{arg1, arg2, arg3})
	fake.scalePacificClusterControlPlaneMutex.Unlock()
	if fake.ScalePacificClusterControlPlaneStub != nil {
		return fake.ScalePacificClusterControlPlaneStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.scalePacificClusterControlPlaneReturns
	return fakeReturns.result1
}

func (fake *ClusterClient) ScalePacificClusterControlPlaneCallCount() int {
	fake.scalePacificClusterControlPlaneMutex.RLock()
	defer fake.scalePacificClusterControlPlaneMutex.RUnlock()
	return len(fake.scalePacificClusterControlPlaneArgsForCall)
}

func (fake *ClusterClient) ScalePacificClusterControlPlaneCalls(stub func(string, string, int32) error) {
	fake.scalePacificClusterControlPlaneMutex.Lock()
	defer fake.scalePacificClusterControlPlaneMutex.Unlock()
	fake.ScalePacificClusterControlPlaneStub = stub
}

func (fake *ClusterClient) ScalePacificClusterControlPlaneArgsForCall(i int) (string, string, int32) {
	fake.scalePacificClusterControlPlaneMutex.RLock()
	defer fake.scalePacificClusterControlPlaneMutex.RUnlock()
	argsForCall := fake.scalePacificClusterControlPlaneArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *ClusterClient) ScalePacificClusterControlPlaneReturns(result1 error) {
	fake.scalePacificClusterControlPlaneMutex.Lock()
	defer fake.scalePacificClusterControlPlaneMutex.Unlock()
	fake.ScalePacificClusterControlPlaneStub = nil
	fake.scalePacificClusterControlPlaneReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) ScalePacificClusterControlPlaneReturnsOnCall(i int, result1 error) {
	fake.scalePacificClusterControlPlaneMutex.Lock()
	defer fake.scalePacificClusterControlPlaneMutex.Unlock()
	fake.ScalePacificClusterControlPlaneStub = nil
	if fake.scalePacificClusterControlPlaneReturnsOnCall == nil {
		fake.scalePacificClusterControlPlaneReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.scalePacificClusterControlPlaneReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) ScalePacificClusterWorkerNodes(arg1 string, arg2 string, arg3 int32) error {
	fake.scalePacificClusterWorkerNodesMutex.Lock()
	ret, specificReturn := fake.scalePacificClusterWorkerNodesReturnsOnCall[len(fake.scalePacificClusterWorkerNodesArgsForCall)]
	fake.scalePacificClusterWorkerNodesArgsForCall = append(fake.scalePacificClusterWorkerNodesArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 int32
	}{arg1, arg2, arg3})
	fake.recordInvocation("ScalePacificClusterWorkerNodes", []interface{}{arg1, arg2, arg3})
	fake.scalePacificClusterWorkerNodesMutex.Unlock()
	if fake.ScalePacificClusterWorkerNodesStub != nil {
		return fake.ScalePacificClusterWorkerNodesStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.scalePacificClusterWorkerNodesReturns
	return fakeReturns.result1
}

func (fake *ClusterClient) ScalePacificClusterWorkerNodesCallCount() int {
	fake.scalePacificClusterWorkerNodesMutex.RLock()
	defer fake.scalePacificClusterWorkerNodesMutex.RUnlock()
	return len(fake.scalePacificClusterWorkerNodesArgsForCall)
}

func (fake *ClusterClient) ScalePacificClusterWorkerNodesCalls(stub func(string, string, int32) error) {
	fake.scalePacificClusterWorkerNodesMutex.Lock()
	defer fake.scalePacificClusterWorkerNodesMutex.Unlock()
	fake.ScalePacificClusterWorkerNodesStub = stub
}

func (fake *ClusterClient) ScalePacificClusterWorkerNodesArgsForCall(i int) (string, string, int32) {
	fake.scalePacificClusterWorkerNodesMutex.RLock()
	defer fake.scalePacificClusterWorkerNodesMutex.RUnlock()
	argsForCall := fake.scalePacificClusterWorkerNodesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *ClusterClient) ScalePacificClusterWorkerNodesReturns(result1 error) {
	fake.scalePacificClusterWorkerNodesMutex.Lock()
	defer fake.scalePacificClusterWorkerNodesMutex.Unlock()
	fake.ScalePacificClusterWorkerNodesStub = nil
	fake.scalePacificClusterWorkerNodesReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) ScalePacificClusterWorkerNodesReturnsOnCall(i int, result1 error) {
	fake.scalePacificClusterWorkerNodesMutex.Lock()
	defer fake.scalePacificClusterWorkerNodesMutex.Unlock()
	fake.ScalePacificClusterWorkerNodesStub = nil
	if fake.scalePacificClusterWorkerNodesReturnsOnCall == nil {
		fake.scalePacificClusterWorkerNodesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.scalePacificClusterWorkerNodesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) UpdateAWSCNIIngressRules(arg1 string, arg2 string) error {
	fake.updateAWSCNIIngressRulesMutex.Lock()
	ret, specificReturn := fake.updateAWSCNIIngressRulesReturnsOnCall[len(fake.updateAWSCNIIngressRulesArgsForCall)]
	fake.updateAWSCNIIngressRulesArgsForCall = append(fake.updateAWSCNIIngressRulesArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("UpdateAWSCNIIngressRules", []interface{}{arg1, arg2})
	fake.updateAWSCNIIngressRulesMutex.Unlock()
	if fake.UpdateAWSCNIIngressRulesStub != nil {
		return fake.UpdateAWSCNIIngressRulesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.updateAWSCNIIngressRulesReturns
	return fakeReturns.result1
}

func (fake *ClusterClient) UpdateAWSCNIIngressRulesCallCount() int {
	fake.updateAWSCNIIngressRulesMutex.RLock()
	defer fake.updateAWSCNIIngressRulesMutex.RUnlock()
	return len(fake.updateAWSCNIIngressRulesArgsForCall)
}

func (fake *ClusterClient) UpdateAWSCNIIngressRulesCalls(stub func(string, string) error) {
	fake.updateAWSCNIIngressRulesMutex.Lock()
	defer fake.updateAWSCNIIngressRulesMutex.Unlock()
	fake.UpdateAWSCNIIngressRulesStub = stub
}

func (fake *ClusterClient) UpdateAWSCNIIngressRulesArgsForCall(i int) (string, string) {
	fake.updateAWSCNIIngressRulesMutex.RLock()
	defer fake.updateAWSCNIIngressRulesMutex.RUnlock()
	argsForCall := fake.updateAWSCNIIngressRulesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ClusterClient) UpdateAWSCNIIngressRulesReturns(result1 error) {
	fake.updateAWSCNIIngressRulesMutex.Lock()
	defer fake.updateAWSCNIIngressRulesMutex.Unlock()
	fake.UpdateAWSCNIIngressRulesStub = nil
	fake.updateAWSCNIIngressRulesReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) UpdateAWSCNIIngressRulesReturnsOnCall(i int, result1 error) {
	fake.updateAWSCNIIngressRulesMutex.Lock()
	defer fake.updateAWSCNIIngressRulesMutex.Unlock()
	fake.UpdateAWSCNIIngressRulesStub = nil
	if fake.updateAWSCNIIngressRulesReturnsOnCall == nil {
		fake.updateAWSCNIIngressRulesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateAWSCNIIngressRulesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) UpdateCapvManagerBootstrapCredentialsSecret(arg1 string, arg2 string) error {
	fake.updateCapvManagerBootstrapCredentialsSecretMutex.Lock()
	ret, specificReturn := fake.updateCapvManagerBootstrapCredentialsSecretReturnsOnCall[len(fake.updateCapvManagerBootstrapCredentialsSecretArgsForCall)]
	fake.updateCapvManagerBootstrapCredentialsSecretArgsForCall = append(fake.updateCapvManagerBootstrapCredentialsSecretArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("UpdateCapvManagerBootstrapCredentialsSecret", []interface{}{arg1, arg2})
	fake.updateCapvManagerBootstrapCredentialsSecretMutex.Unlock()
	if fake.UpdateCapvManagerBootstrapCredentialsSecretStub != nil {
		return fake.UpdateCapvManagerBootstrapCredentialsSecretStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.updateCapvManagerBootstrapCredentialsSecretReturns
	return fakeReturns.result1
}

func (fake *ClusterClient) UpdateCapvManagerBootstrapCredentialsSecretCallCount() int {
	fake.updateCapvManagerBootstrapCredentialsSecretMutex.RLock()
	defer fake.updateCapvManagerBootstrapCredentialsSecretMutex.RUnlock()
	return len(fake.updateCapvManagerBootstrapCredentialsSecretArgsForCall)
}

func (fake *ClusterClient) UpdateCapvManagerBootstrapCredentialsSecretCalls(stub func(string, string) error) {
	fake.updateCapvManagerBootstrapCredentialsSecretMutex.Lock()
	defer fake.updateCapvManagerBootstrapCredentialsSecretMutex.Unlock()
	fake.UpdateCapvManagerBootstrapCredentialsSecretStub = stub
}

func (fake *ClusterClient) UpdateCapvManagerBootstrapCredentialsSecretArgsForCall(i int) (string, string) {
	fake.updateCapvManagerBootstrapCredentialsSecretMutex.RLock()
	defer fake.updateCapvManagerBootstrapCredentialsSecretMutex.RUnlock()
	argsForCall := fake.updateCapvManagerBootstrapCredentialsSecretArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ClusterClient) UpdateCapvManagerBootstrapCredentialsSecretReturns(result1 error) {
	fake.updateCapvManagerBootstrapCredentialsSecretMutex.Lock()
	defer fake.updateCapvManagerBootstrapCredentialsSecretMutex.Unlock()
	fake.UpdateCapvManagerBootstrapCredentialsSecretStub = nil
	fake.updateCapvManagerBootstrapCredentialsSecretReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) UpdateCapvManagerBootstrapCredentialsSecretReturnsOnCall(i int, result1 error) {
	fake.updateCapvManagerBootstrapCredentialsSecretMutex.Lock()
	defer fake.updateCapvManagerBootstrapCredentialsSecretMutex.Unlock()
	fake.UpdateCapvManagerBootstrapCredentialsSecretStub = nil
	if fake.updateCapvManagerBootstrapCredentialsSecretReturnsOnCall == nil {
		fake.updateCapvManagerBootstrapCredentialsSecretReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateCapvManagerBootstrapCredentialsSecretReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) UpdateReplicas(arg1 interface{}, arg2 string, arg3 string, arg4 int32) error {
	fake.updateReplicasMutex.Lock()
	ret, specificReturn := fake.updateReplicasReturnsOnCall[len(fake.updateReplicasArgsForCall)]
	fake.updateReplicasArgsForCall = append(fake.updateReplicasArgsForCall, struct {
		arg1 interface{}
		arg2 string
		arg3 string
		arg4 int32
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("UpdateReplicas", []interface{}{arg1, arg2, arg3, arg4})
	fake.updateReplicasMutex.Unlock()
	if fake.UpdateReplicasStub != nil {
		return fake.UpdateReplicasStub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.updateReplicasReturns
	return fakeReturns.result1
}

func (fake *ClusterClient) UpdateReplicasCallCount() int {
	fake.updateReplicasMutex.RLock()
	defer fake.updateReplicasMutex.RUnlock()
	return len(fake.updateReplicasArgsForCall)
}

func (fake *ClusterClient) UpdateReplicasCalls(stub func(interface{}, string, string, int32) error) {
	fake.updateReplicasMutex.Lock()
	defer fake.updateReplicasMutex.Unlock()
	fake.UpdateReplicasStub = stub
}

func (fake *ClusterClient) UpdateReplicasArgsForCall(i int) (interface{}, string, string, int32) {
	fake.updateReplicasMutex.RLock()
	defer fake.updateReplicasMutex.RUnlock()
	argsForCall := fake.updateReplicasArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *ClusterClient) UpdateReplicasReturns(result1 error) {
	fake.updateReplicasMutex.Lock()
	defer fake.updateReplicasMutex.Unlock()
	fake.UpdateReplicasStub = nil
	fake.updateReplicasReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) UpdateReplicasReturnsOnCall(i int, result1 error) {
	fake.updateReplicasMutex.Lock()
	defer fake.updateReplicasMutex.Unlock()
	fake.UpdateReplicasStub = nil
	if fake.updateReplicasReturnsOnCall == nil {
		fake.updateReplicasReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateReplicasReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) UpdateResource(arg1 interface{}, arg2 string, arg3 string, arg4 ...client.UpdateOption) error {
	fake.updateResourceMutex.Lock()
	ret, specificReturn := fake.updateResourceReturnsOnCall[len(fake.updateResourceArgsForCall)]
	fake.updateResourceArgsForCall = append(fake.updateResourceArgsForCall, struct {
		arg1 interface{}
		arg2 string
		arg3 string
		arg4 []client.UpdateOption
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("UpdateResource", []interface{}{arg1, arg2, arg3, arg4})
	fake.updateResourceMutex.Unlock()
	if fake.UpdateResourceStub != nil {
		return fake.UpdateResourceStub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.updateResourceReturns
	return fakeReturns.result1
}

func (fake *ClusterClient) UpdateResourceCallCount() int {
	fake.updateResourceMutex.RLock()
	defer fake.updateResourceMutex.RUnlock()
	return len(fake.updateResourceArgsForCall)
}

func (fake *ClusterClient) UpdateResourceCalls(stub func(interface{}, string, string, ...client.UpdateOption) error) {
	fake.updateResourceMutex.Lock()
	defer fake.updateResourceMutex.Unlock()
	fake.UpdateResourceStub = stub
}

func (fake *ClusterClient) UpdateResourceArgsForCall(i int) (interface{}, string, string, []client.UpdateOption) {
	fake.updateResourceMutex.RLock()
	defer fake.updateResourceMutex.RUnlock()
	argsForCall := fake.updateResourceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *ClusterClient) UpdateResourceReturns(result1 error) {
	fake.updateResourceMutex.Lock()
	defer fake.updateResourceMutex.Unlock()
	fake.UpdateResourceStub = nil
	fake.updateResourceReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) UpdateResourceReturnsOnCall(i int, result1 error) {
	fake.updateResourceMutex.Lock()
	defer fake.updateResourceMutex.Unlock()
	fake.UpdateResourceStub = nil
	if fake.updateResourceReturnsOnCall == nil {
		fake.updateResourceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateResourceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) UpdateVsphereCloudProviderCredentialsSecret(arg1 string, arg2 string, arg3 string, arg4 string) error {
	fake.updateVsphereCloudProviderCredentialsSecretMutex.Lock()
	ret, specificReturn := fake.updateVsphereCloudProviderCredentialsSecretReturnsOnCall[len(fake.updateVsphereCloudProviderCredentialsSecretArgsForCall)]
	fake.updateVsphereCloudProviderCredentialsSecretArgsForCall = append(fake.updateVsphereCloudProviderCredentialsSecretArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("UpdateVsphereCloudProviderCredentialsSecret", []interface{}{arg1, arg2, arg3, arg4})
	fake.updateVsphereCloudProviderCredentialsSecretMutex.Unlock()
	if fake.UpdateVsphereCloudProviderCredentialsSecretStub != nil {
		return fake.UpdateVsphereCloudProviderCredentialsSecretStub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.updateVsphereCloudProviderCredentialsSecretReturns
	return fakeReturns.result1
}

func (fake *ClusterClient) UpdateVsphereCloudProviderCredentialsSecretCallCount() int {
	fake.updateVsphereCloudProviderCredentialsSecretMutex.RLock()
	defer fake.updateVsphereCloudProviderCredentialsSecretMutex.RUnlock()
	return len(fake.updateVsphereCloudProviderCredentialsSecretArgsForCall)
}

func (fake *ClusterClient) UpdateVsphereCloudProviderCredentialsSecretCalls(stub func(string, string, string, string) error) {
	fake.updateVsphereCloudProviderCredentialsSecretMutex.Lock()
	defer fake.updateVsphereCloudProviderCredentialsSecretMutex.Unlock()
	fake.UpdateVsphereCloudProviderCredentialsSecretStub = stub
}

func (fake *ClusterClient) UpdateVsphereCloudProviderCredentialsSecretArgsForCall(i int) (string, string, string, string) {
	fake.updateVsphereCloudProviderCredentialsSecretMutex.RLock()
	defer fake.updateVsphereCloudProviderCredentialsSecretMutex.RUnlock()
	argsForCall := fake.updateVsphereCloudProviderCredentialsSecretArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *ClusterClient) UpdateVsphereCloudProviderCredentialsSecretReturns(result1 error) {
	fake.updateVsphereCloudProviderCredentialsSecretMutex.Lock()
	defer fake.updateVsphereCloudProviderCredentialsSecretMutex.Unlock()
	fake.UpdateVsphereCloudProviderCredentialsSecretStub = nil
	fake.updateVsphereCloudProviderCredentialsSecretReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) UpdateVsphereCloudProviderCredentialsSecretReturnsOnCall(i int, result1 error) {
	fake.updateVsphereCloudProviderCredentialsSecretMutex.Lock()
	defer fake.updateVsphereCloudProviderCredentialsSecretMutex.Unlock()
	fake.UpdateVsphereCloudProviderCredentialsSecretStub = nil
	if fake.updateVsphereCloudProviderCredentialsSecretReturnsOnCall == nil {
		fake.updateVsphereCloudProviderCredentialsSecretReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateVsphereCloudProviderCredentialsSecretReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) UpdateVsphereCsiConfigSecret(arg1 string, arg2 string, arg3 string, arg4 string) error {
	fake.updateVsphereCsiConfigSecretMutex.Lock()
	ret, specificReturn := fake.updateVsphereCsiConfigSecretReturnsOnCall[len(fake.updateVsphereCsiConfigSecretArgsForCall)]
	fake.updateVsphereCsiConfigSecretArgsForCall = append(fake.updateVsphereCsiConfigSecretArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("UpdateVsphereCsiConfigSecret", []interface{}{arg1, arg2, arg3, arg4})
	fake.updateVsphereCsiConfigSecretMutex.Unlock()
	if fake.UpdateVsphereCsiConfigSecretStub != nil {
		return fake.UpdateVsphereCsiConfigSecretStub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.updateVsphereCsiConfigSecretReturns
	return fakeReturns.result1
}

func (fake *ClusterClient) UpdateVsphereCsiConfigSecretCallCount() int {
	fake.updateVsphereCsiConfigSecretMutex.RLock()
	defer fake.updateVsphereCsiConfigSecretMutex.RUnlock()
	return len(fake.updateVsphereCsiConfigSecretArgsForCall)
}

func (fake *ClusterClient) UpdateVsphereCsiConfigSecretCalls(stub func(string, string, string, string) error) {
	fake.updateVsphereCsiConfigSecretMutex.Lock()
	defer fake.updateVsphereCsiConfigSecretMutex.Unlock()
	fake.UpdateVsphereCsiConfigSecretStub = stub
}

func (fake *ClusterClient) UpdateVsphereCsiConfigSecretArgsForCall(i int) (string, string, string, string) {
	fake.updateVsphereCsiConfigSecretMutex.RLock()
	defer fake.updateVsphereCsiConfigSecretMutex.RUnlock()
	argsForCall := fake.updateVsphereCsiConfigSecretArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *ClusterClient) UpdateVsphereCsiConfigSecretReturns(result1 error) {
	fake.updateVsphereCsiConfigSecretMutex.Lock()
	defer fake.updateVsphereCsiConfigSecretMutex.Unlock()
	fake.UpdateVsphereCsiConfigSecretStub = nil
	fake.updateVsphereCsiConfigSecretReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) UpdateVsphereCsiConfigSecretReturnsOnCall(i int, result1 error) {
	fake.updateVsphereCsiConfigSecretMutex.Lock()
	defer fake.updateVsphereCsiConfigSecretMutex.Unlock()
	fake.UpdateVsphereCsiConfigSecretStub = nil
	if fake.updateVsphereCsiConfigSecretReturnsOnCall == nil {
		fake.updateVsphereCsiConfigSecretReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateVsphereCsiConfigSecretReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) UpdateVsphereIdentityRefSecret(arg1 string, arg2 string, arg3 string, arg4 string) error {
	fake.updateVsphereIdentityRefSecretMutex.Lock()
	ret, specificReturn := fake.updateVsphereIdentityRefSecretReturnsOnCall[len(fake.updateVsphereIdentityRefSecretArgsForCall)]
	fake.updateVsphereIdentityRefSecretArgsForCall = append(fake.updateVsphereIdentityRefSecretArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("UpdateVsphereIdentityRefSecret", []interface{}{arg1, arg2, arg3, arg4})
	fake.updateVsphereIdentityRefSecretMutex.Unlock()
	if fake.UpdateVsphereIdentityRefSecretStub != nil {
		return fake.UpdateVsphereIdentityRefSecretStub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.updateVsphereIdentityRefSecretReturns
	return fakeReturns.result1
}

func (fake *ClusterClient) UpdateVsphereIdentityRefSecretCallCount() int {
	fake.updateVsphereIdentityRefSecretMutex.RLock()
	defer fake.updateVsphereIdentityRefSecretMutex.RUnlock()
	return len(fake.updateVsphereIdentityRefSecretArgsForCall)
}

func (fake *ClusterClient) UpdateVsphereIdentityRefSecretCalls(stub func(string, string, string, string) error) {
	fake.updateVsphereIdentityRefSecretMutex.Lock()
	defer fake.updateVsphereIdentityRefSecretMutex.Unlock()
	fake.UpdateVsphereIdentityRefSecretStub = stub
}

func (fake *ClusterClient) UpdateVsphereIdentityRefSecretArgsForCall(i int) (string, string, string, string) {
	fake.updateVsphereIdentityRefSecretMutex.RLock()
	defer fake.updateVsphereIdentityRefSecretMutex.RUnlock()
	argsForCall := fake.updateVsphereIdentityRefSecretArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *ClusterClient) UpdateVsphereIdentityRefSecretReturns(result1 error) {
	fake.updateVsphereIdentityRefSecretMutex.Lock()
	defer fake.updateVsphereIdentityRefSecretMutex.Unlock()
	fake.UpdateVsphereIdentityRefSecretStub = nil
	fake.updateVsphereIdentityRefSecretReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) UpdateVsphereIdentityRefSecretReturnsOnCall(i int, result1 error) {
	fake.updateVsphereIdentityRefSecretMutex.Lock()
	defer fake.updateVsphereIdentityRefSecretMutex.Unlock()
	fake.UpdateVsphereIdentityRefSecretStub = nil
	if fake.updateVsphereIdentityRefSecretReturnsOnCall == nil {
		fake.updateVsphereIdentityRefSecretReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateVsphereIdentityRefSecretReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) UseContext(arg1 string) error {
	fake.useContextMutex.Lock()
	ret, specificReturn := fake.useContextReturnsOnCall[len(fake.useContextArgsForCall)]
	fake.useContextArgsForCall = append(fake.useContextArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.recordInvocation("UseContext", []interface{}{arg1})
	fake.useContextMutex.Unlock()
	if fake.UseContextStub != nil {
		return fake.UseContextStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.useContextReturns
	return fakeReturns.result1
}

func (fake *ClusterClient) UseContextCallCount() int {
	fake.useContextMutex.RLock()
	defer fake.useContextMutex.RUnlock()
	return len(fake.useContextArgsForCall)
}

func (fake *ClusterClient) UseContextCalls(stub func(string) error) {
	fake.useContextMutex.Lock()
	defer fake.useContextMutex.Unlock()
	fake.UseContextStub = stub
}

func (fake *ClusterClient) UseContextArgsForCall(i int) string {
	fake.useContextMutex.RLock()
	defer fake.useContextMutex.RUnlock()
	argsForCall := fake.useContextArgsForCall[i]
	return argsForCall.arg1
}

func (fake *ClusterClient) UseContextReturns(result1 error) {
	fake.useContextMutex.Lock()
	defer fake.useContextMutex.Unlock()
	fake.UseContextStub = nil
	fake.useContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) UseContextReturnsOnCall(i int, result1 error) {
	fake.useContextMutex.Lock()
	defer fake.useContextMutex.Unlock()
	fake.UseContextStub = nil
	if fake.useContextReturnsOnCall == nil {
		fake.useContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.useContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) WaitForAVIResourceCleanUp(arg1 string, arg2 string) error {
	fake.waitForAVIResourceCleanUpMutex.Lock()
	ret, specificReturn := fake.waitForAVIResourceCleanUpReturnsOnCall[len(fake.waitForAVIResourceCleanUpArgsForCall)]
	fake.waitForAVIResourceCleanUpArgsForCall = append(fake.waitForAVIResourceCleanUpArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("WaitForAVIResourceCleanUp", []interface{}{arg1, arg2})
	fake.waitForAVIResourceCleanUpMutex.Unlock()
	if fake.WaitForAVIResourceCleanUpStub != nil {
		return fake.WaitForAVIResourceCleanUpStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitForAVIResourceCleanUpReturns
	return fakeReturns.result1
}

func (fake *ClusterClient) WaitForAVIResourceCleanUpCallCount() int {
	fake.waitForAVIResourceCleanUpMutex.RLock()
	defer fake.waitForAVIResourceCleanUpMutex.RUnlock()
	return len(fake.waitForAVIResourceCleanUpArgsForCall)
}

func (fake *ClusterClient) WaitForAVIResourceCleanUpCalls(stub func(string, string) error) {
	fake.waitForAVIResourceCleanUpMutex.Lock()
	defer fake.waitForAVIResourceCleanUpMutex.Unlock()
	fake.WaitForAVIResourceCleanUpStub = stub
}

func (fake *ClusterClient) WaitForAVIResourceCleanUpArgsForCall(i int) (string, string) {
	fake.waitForAVIResourceCleanUpMutex.RLock()
	defer fake.waitForAVIResourceCleanUpMutex.RUnlock()
	argsForCall := fake.waitForAVIResourceCleanUpArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ClusterClient) WaitForAVIResourceCleanUpReturns(result1 error) {
	fake.waitForAVIResourceCleanUpMutex.Lock()
	defer fake.waitForAVIResourceCleanUpMutex.Unlock()
	fake.WaitForAVIResourceCleanUpStub = nil
	fake.waitForAVIResourceCleanUpReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) WaitForAVIResourceCleanUpReturnsOnCall(i int, result1 error) {
	fake.waitForAVIResourceCleanUpMutex.Lock()
	defer fake.waitForAVIResourceCleanUpMutex.Unlock()
	fake.WaitForAVIResourceCleanUpStub = nil
	if fake.waitForAVIResourceCleanUpReturnsOnCall == nil {
		fake.waitForAVIResourceCleanUpReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitForAVIResourceCleanUpReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) WaitForAutoscalerDeployment(arg1 string, arg2 string) error {
	fake.waitForAutoscalerDeploymentMutex.Lock()
	ret, specificReturn := fake.waitForAutoscalerDeploymentReturnsOnCall[len(fake.waitForAutoscalerDeploymentArgsForCall)]
	fake.waitForAutoscalerDeploymentArgsForCall = append(fake.waitForAutoscalerDeploymentArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("WaitForAutoscalerDeployment", []interface{}{arg1, arg2})
	fake.waitForAutoscalerDeploymentMutex.Unlock()
	if fake.WaitForAutoscalerDeploymentStub != nil {
		return fake.WaitForAutoscalerDeploymentStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitForAutoscalerDeploymentReturns
	return fakeReturns.result1
}

func (fake *ClusterClient) WaitForAutoscalerDeploymentCallCount() int {
	fake.waitForAutoscalerDeploymentMutex.RLock()
	defer fake.waitForAutoscalerDeploymentMutex.RUnlock()
	return len(fake.waitForAutoscalerDeploymentArgsForCall)
}

func (fake *ClusterClient) WaitForAutoscalerDeploymentCalls(stub func(string, string) error) {
	fake.waitForAutoscalerDeploymentMutex.Lock()
	defer fake.waitForAutoscalerDeploymentMutex.Unlock()
	fake.WaitForAutoscalerDeploymentStub = stub
}

func (fake *ClusterClient) WaitForAutoscalerDeploymentArgsForCall(i int) (string, string) {
	fake.waitForAutoscalerDeploymentMutex.RLock()
	defer fake.waitForAutoscalerDeploymentMutex.RUnlock()
	argsForCall := fake.waitForAutoscalerDeploymentArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ClusterClient) WaitForAutoscalerDeploymentReturns(result1 error) {
	fake.waitForAutoscalerDeploymentMutex.Lock()
	defer fake.waitForAutoscalerDeploymentMutex.Unlock()
	fake.WaitForAutoscalerDeploymentStub = nil
	fake.waitForAutoscalerDeploymentReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) WaitForAutoscalerDeploymentReturnsOnCall(i int, result1 error) {
	fake.waitForAutoscalerDeploymentMutex.Lock()
	defer fake.waitForAutoscalerDeploymentMutex.Unlock()
	fake.WaitForAutoscalerDeploymentStub = nil
	if fake.waitForAutoscalerDeploymentReturnsOnCall == nil {
		fake.waitForAutoscalerDeploymentReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitForAutoscalerDeploymentReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) WaitForClusterDeletion(arg1 string, arg2 string) error {
	fake.waitForClusterDeletionMutex.Lock()
	ret, specificReturn := fake.waitForClusterDeletionReturnsOnCall[len(fake.waitForClusterDeletionArgsForCall)]
	fake.waitForClusterDeletionArgsForCall = append(fake.waitForClusterDeletionArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("WaitForClusterDeletion", []interface{}{arg1, arg2})
	fake.waitForClusterDeletionMutex.Unlock()
	if fake.WaitForClusterDeletionStub != nil {
		return fake.WaitForClusterDeletionStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitForClusterDeletionReturns
	return fakeReturns.result1
}

func (fake *ClusterClient) WaitForClusterDeletionCallCount() int {
	fake.waitForClusterDeletionMutex.RLock()
	defer fake.waitForClusterDeletionMutex.RUnlock()
	return len(fake.waitForClusterDeletionArgsForCall)
}

func (fake *ClusterClient) WaitForClusterDeletionCalls(stub func(string, string) error) {
	fake.waitForClusterDeletionMutex.Lock()
	defer fake.waitForClusterDeletionMutex.Unlock()
	fake.WaitForClusterDeletionStub = stub
}

func (fake *ClusterClient) WaitForClusterDeletionArgsForCall(i int) (string, string) {
	fake.waitForClusterDeletionMutex.RLock()
	defer fake.waitForClusterDeletionMutex.RUnlock()
	argsForCall := fake.waitForClusterDeletionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ClusterClient) WaitForClusterDeletionReturns(result1 error) {
	fake.waitForClusterDeletionMutex.Lock()
	defer fake.waitForClusterDeletionMutex.Unlock()
	fake.WaitForClusterDeletionStub = nil
	fake.waitForClusterDeletionReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) WaitForClusterDeletionReturnsOnCall(i int, result1 error) {
	fake.waitForClusterDeletionMutex.Lock()
	defer fake.waitForClusterDeletionMutex.Unlock()
	fake.WaitForClusterDeletionStub = nil
	if fake.waitForClusterDeletionReturnsOnCall == nil {
		fake.waitForClusterDeletionReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitForClusterDeletionReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) WaitForClusterInitialized(arg1 string, arg2 string) error {
	fake.waitForClusterInitializedMutex.Lock()
	ret, specificReturn := fake.waitForClusterInitializedReturnsOnCall[len(fake.waitForClusterInitializedArgsForCall)]
	fake.waitForClusterInitializedArgsForCall = append(fake.waitForClusterInitializedArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("WaitForClusterInitialized", []interface{}{arg1, arg2})
	fake.waitForClusterInitializedMutex.Unlock()
	if fake.WaitForClusterInitializedStub != nil {
		return fake.WaitForClusterInitializedStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitForClusterInitializedReturns
	return fakeReturns.result1
}

func (fake *ClusterClient) WaitForClusterInitializedCallCount() int {
	fake.waitForClusterInitializedMutex.RLock()
	defer fake.waitForClusterInitializedMutex.RUnlock()
	return len(fake.waitForClusterInitializedArgsForCall)
}

func (fake *ClusterClient) WaitForClusterInitializedCalls(stub func(string, string) error) {
	fake.waitForClusterInitializedMutex.Lock()
	defer fake.waitForClusterInitializedMutex.Unlock()
	fake.WaitForClusterInitializedStub = stub
}

func (fake *ClusterClient) WaitForClusterInitializedArgsForCall(i int) (string, string) {
	fake.waitForClusterInitializedMutex.RLock()
	defer fake.waitForClusterInitializedMutex.RUnlock()
	argsForCall := fake.waitForClusterInitializedArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ClusterClient) WaitForClusterInitializedReturns(result1 error) {
	fake.waitForClusterInitializedMutex.Lock()
	defer fake.waitForClusterInitializedMutex.Unlock()
	fake.WaitForClusterInitializedStub = nil
	fake.waitForClusterInitializedReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) WaitForClusterInitializedReturnsOnCall(i int, result1 error) {
	fake.waitForClusterInitializedMutex.Lock()
	defer fake.waitForClusterInitializedMutex.Unlock()
	fake.WaitForClusterInitializedStub = nil
	if fake.waitForClusterInitializedReturnsOnCall == nil {
		fake.waitForClusterInitializedReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitForClusterInitializedReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) WaitForClusterReady(arg1 string, arg2 string, arg3 bool) error {
	fake.waitForClusterReadyMutex.Lock()
	ret, specificReturn := fake.waitForClusterReadyReturnsOnCall[len(fake.waitForClusterReadyArgsForCall)]
	fake.waitForClusterReadyArgsForCall = append(fake.waitForClusterReadyArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 bool
	}{arg1, arg2, arg3})
	fake.recordInvocation("WaitForClusterReady", []interface{}{arg1, arg2, arg3})
	fake.waitForClusterReadyMutex.Unlock()
	if fake.WaitForClusterReadyStub != nil {
		return fake.WaitForClusterReadyStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitForClusterReadyReturns
	return fakeReturns.result1
}

func (fake *ClusterClient) WaitForClusterReadyCallCount() int {
	fake.waitForClusterReadyMutex.RLock()
	defer fake.waitForClusterReadyMutex.RUnlock()
	return len(fake.waitForClusterReadyArgsForCall)
}

func (fake *ClusterClient) WaitForClusterReadyCalls(stub func(string, string, bool) error) {
	fake.waitForClusterReadyMutex.Lock()
	defer fake.waitForClusterReadyMutex.Unlock()
	fake.WaitForClusterReadyStub = stub
}

func (fake *ClusterClient) WaitForClusterReadyArgsForCall(i int) (string, string, bool) {
	fake.waitForClusterReadyMutex.RLock()
	defer fake.waitForClusterReadyMutex.RUnlock()
	argsForCall := fake.waitForClusterReadyArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *ClusterClient) WaitForClusterReadyReturns(result1 error) {
	fake.waitForClusterReadyMutex.Lock()
	defer fake.waitForClusterReadyMutex.Unlock()
	fake.WaitForClusterReadyStub = nil
	fake.waitForClusterReadyReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) WaitForClusterReadyReturnsOnCall(i int, result1 error) {
	fake.waitForClusterReadyMutex.Lock()
	defer fake.waitForClusterReadyMutex.Unlock()
	fake.WaitForClusterReadyStub = nil
	if fake.waitForClusterReadyReturnsOnCall == nil {
		fake.waitForClusterReadyReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitForClusterReadyReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) WaitForDeployment(arg1 string, arg2 string) error {
	fake.waitForDeploymentMutex.Lock()
	ret, specificReturn := fake.waitForDeploymentReturnsOnCall[len(fake.waitForDeploymentArgsForCall)]
	fake.waitForDeploymentArgsForCall = append(fake.waitForDeploymentArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("WaitForDeployment", []interface{}{arg1, arg2})
	fake.waitForDeploymentMutex.Unlock()
	if fake.WaitForDeploymentStub != nil {
		return fake.WaitForDeploymentStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitForDeploymentReturns
	return fakeReturns.result1
}

func (fake *ClusterClient) WaitForDeploymentCallCount() int {
	fake.waitForDeploymentMutex.RLock()
	defer fake.waitForDeploymentMutex.RUnlock()
	return len(fake.waitForDeploymentArgsForCall)
}

func (fake *ClusterClient) WaitForDeploymentCalls(stub func(string, string) error) {
	fake.waitForDeploymentMutex.Lock()
	defer fake.waitForDeploymentMutex.Unlock()
	fake.WaitForDeploymentStub = stub
}

func (fake *ClusterClient) WaitForDeploymentArgsForCall(i int) (string, string) {
	fake.waitForDeploymentMutex.RLock()
	defer fake.waitForDeploymentMutex.RUnlock()
	argsForCall := fake.waitForDeploymentArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ClusterClient) WaitForDeploymentReturns(result1 error) {
	fake.waitForDeploymentMutex.Lock()
	defer fake.waitForDeploymentMutex.Unlock()
	fake.WaitForDeploymentStub = nil
	fake.waitForDeploymentReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) WaitForDeploymentReturnsOnCall(i int, result1 error) {
	fake.waitForDeploymentMutex.Lock()
	defer fake.waitForDeploymentMutex.Unlock()
	fake.WaitForDeploymentStub = nil
	if fake.waitForDeploymentReturnsOnCall == nil {
		fake.waitForDeploymentReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitForDeploymentReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) WaitForPacificCluster(arg1 string, arg2 string) error {
	fake.waitForPacificClusterMutex.Lock()
	ret, specificReturn := fake.waitForPacificClusterReturnsOnCall[len(fake.waitForPacificClusterArgsForCall)]
	fake.waitForPacificClusterArgsForCall = append(fake.waitForPacificClusterArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("WaitForPacificCluster", []interface{}{arg1, arg2})
	fake.waitForPacificClusterMutex.Unlock()
	if fake.WaitForPacificClusterStub != nil {
		return fake.WaitForPacificClusterStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitForPacificClusterReturns
	return fakeReturns.result1
}

func (fake *ClusterClient) WaitForPacificClusterCallCount() int {
	fake.waitForPacificClusterMutex.RLock()
	defer fake.waitForPacificClusterMutex.RUnlock()
	return len(fake.waitForPacificClusterArgsForCall)
}

func (fake *ClusterClient) WaitForPacificClusterCalls(stub func(string, string) error) {
	fake.waitForPacificClusterMutex.Lock()
	defer fake.waitForPacificClusterMutex.Unlock()
	fake.WaitForPacificClusterStub = stub
}

func (fake *ClusterClient) WaitForPacificClusterArgsForCall(i int) (string, string) {
	fake.waitForPacificClusterMutex.RLock()
	defer fake.waitForPacificClusterMutex.RUnlock()
	argsForCall := fake.waitForPacificClusterArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ClusterClient) WaitForPacificClusterReturns(result1 error) {
	fake.waitForPacificClusterMutex.Lock()
	defer fake.waitForPacificClusterMutex.Unlock()
	fake.WaitForPacificClusterStub = nil
	fake.waitForPacificClusterReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) WaitForPacificClusterReturnsOnCall(i int, result1 error) {
	fake.waitForPacificClusterMutex.Lock()
	defer fake.waitForPacificClusterMutex.Unlock()
	fake.WaitForPacificClusterStub = nil
	if fake.waitForPacificClusterReturnsOnCall == nil {
		fake.waitForPacificClusterReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitForPacificClusterReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) WaitForPacificClusterK8sVersionUpdate(arg1 string, arg2 string, arg3 string) error {
	fake.waitForPacificClusterK8sVersionUpdateMutex.Lock()
	ret, specificReturn := fake.waitForPacificClusterK8sVersionUpdateReturnsOnCall[len(fake.waitForPacificClusterK8sVersionUpdateArgsForCall)]
	fake.waitForPacificClusterK8sVersionUpdateArgsForCall = append(fake.waitForPacificClusterK8sVersionUpdateArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	fake.recordInvocation("WaitForPacificClusterK8sVersionUpdate", []interface{}{arg1, arg2, arg3})
	fake.waitForPacificClusterK8sVersionUpdateMutex.Unlock()
	if fake.WaitForPacificClusterK8sVersionUpdateStub != nil {
		return fake.WaitForPacificClusterK8sVersionUpdateStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitForPacificClusterK8sVersionUpdateReturns
	return fakeReturns.result1
}

func (fake *ClusterClient) WaitForPacificClusterK8sVersionUpdateCallCount() int {
	fake.waitForPacificClusterK8sVersionUpdateMutex.RLock()
	defer fake.waitForPacificClusterK8sVersionUpdateMutex.RUnlock()
	return len(fake.waitForPacificClusterK8sVersionUpdateArgsForCall)
}

func (fake *ClusterClient) WaitForPacificClusterK8sVersionUpdateCalls(stub func(string, string, string) error) {
	fake.waitForPacificClusterK8sVersionUpdateMutex.Lock()
	defer fake.waitForPacificClusterK8sVersionUpdateMutex.Unlock()
	fake.WaitForPacificClusterK8sVersionUpdateStub = stub
}

func (fake *ClusterClient) WaitForPacificClusterK8sVersionUpdateArgsForCall(i int) (string, string, string) {
	fake.waitForPacificClusterK8sVersionUpdateMutex.RLock()
	defer fake.waitForPacificClusterK8sVersionUpdateMutex.RUnlock()
	argsForCall := fake.waitForPacificClusterK8sVersionUpdateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *ClusterClient) WaitForPacificClusterK8sVersionUpdateReturns(result1 error) {
	fake.waitForPacificClusterK8sVersionUpdateMutex.Lock()
	defer fake.waitForPacificClusterK8sVersionUpdateMutex.Unlock()
	fake.WaitForPacificClusterK8sVersionUpdateStub = nil
	fake.waitForPacificClusterK8sVersionUpdateReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) WaitForPacificClusterK8sVersionUpdateReturnsOnCall(i int, result1 error) {
	fake.waitForPacificClusterK8sVersionUpdateMutex.Lock()
	defer fake.waitForPacificClusterK8sVersionUpdateMutex.Unlock()
	fake.WaitForPacificClusterK8sVersionUpdateStub = nil
	if fake.waitForPacificClusterK8sVersionUpdateReturnsOnCall == nil {
		fake.waitForPacificClusterK8sVersionUpdateReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitForPacificClusterK8sVersionUpdateReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) WaitForPackageInstall(arg1 string, arg2 string, arg3 time.Duration) error {
	fake.waitForPackageInstallMutex.Lock()
	ret, specificReturn := fake.waitForPackageInstallReturnsOnCall[len(fake.waitForPackageInstallArgsForCall)]
	fake.waitForPackageInstallArgsForCall = append(fake.waitForPackageInstallArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 time.Duration
	}{arg1, arg2, arg3})
	fake.recordInvocation("WaitForPackageInstall", []interface{}{arg1, arg2, arg3})
	fake.waitForPackageInstallMutex.Unlock()
	if fake.WaitForPackageInstallStub != nil {
		return fake.WaitForPackageInstallStub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitForPackageInstallReturns
	return fakeReturns.result1
}

func (fake *ClusterClient) WaitForPackageInstallCallCount() int {
	fake.waitForPackageInstallMutex.RLock()
	defer fake.waitForPackageInstallMutex.RUnlock()
	return len(fake.waitForPackageInstallArgsForCall)
}

func (fake *ClusterClient) WaitForPackageInstallCalls(stub func(string, string, time.Duration) error) {
	fake.waitForPackageInstallMutex.Lock()
	defer fake.waitForPackageInstallMutex.Unlock()
	fake.WaitForPackageInstallStub = stub
}

func (fake *ClusterClient) WaitForPackageInstallArgsForCall(i int) (string, string, time.Duration) {
	fake.waitForPackageInstallMutex.RLock()
	defer fake.waitForPackageInstallMutex.RUnlock()
	argsForCall := fake.waitForPackageInstallArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *ClusterClient) WaitForPackageInstallReturns(result1 error) {
	fake.waitForPackageInstallMutex.Lock()
	defer fake.waitForPackageInstallMutex.Unlock()
	fake.WaitForPackageInstallStub = nil
	fake.waitForPackageInstallReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) WaitForPackageInstallReturnsOnCall(i int, result1 error) {
	fake.waitForPackageInstallMutex.Lock()
	defer fake.waitForPackageInstallMutex.Unlock()
	fake.WaitForPackageInstallStub = nil
	if fake.waitForPackageInstallReturnsOnCall == nil {
		fake.waitForPackageInstallReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitForPackageInstallReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) WaitK8sVersionUpdateForCPNodes(arg1 string, arg2 string, arg3 string, arg4 clusterclient.Client) error {
	fake.waitK8sVersionUpdateForCPNodesMutex.Lock()
	ret, specificReturn := fake.waitK8sVersionUpdateForCPNodesReturnsOnCall[len(fake.waitK8sVersionUpdateForCPNodesArgsForCall)]
	fake.waitK8sVersionUpdateForCPNodesArgsForCall = append(fake.waitK8sVersionUpdateForCPNodesArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 clusterclient.Client
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("WaitK8sVersionUpdateForCPNodes", []interface{}{arg1, arg2, arg3, arg4})
	fake.waitK8sVersionUpdateForCPNodesMutex.Unlock()
	if fake.WaitK8sVersionUpdateForCPNodesStub != nil {
		return fake.WaitK8sVersionUpdateForCPNodesStub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitK8sVersionUpdateForCPNodesReturns
	return fakeReturns.result1
}

func (fake *ClusterClient) WaitK8sVersionUpdateForCPNodesCallCount() int {
	fake.waitK8sVersionUpdateForCPNodesMutex.RLock()
	defer fake.waitK8sVersionUpdateForCPNodesMutex.RUnlock()
	return len(fake.waitK8sVersionUpdateForCPNodesArgsForCall)
}

func (fake *ClusterClient) WaitK8sVersionUpdateForCPNodesCalls(stub func(string, string, string, clusterclient.Client) error) {
	fake.waitK8sVersionUpdateForCPNodesMutex.Lock()
	defer fake.waitK8sVersionUpdateForCPNodesMutex.Unlock()
	fake.WaitK8sVersionUpdateForCPNodesStub = stub
}

func (fake *ClusterClient) WaitK8sVersionUpdateForCPNodesArgsForCall(i int) (string, string, string, clusterclient.Client) {
	fake.waitK8sVersionUpdateForCPNodesMutex.RLock()
	defer fake.waitK8sVersionUpdateForCPNodesMutex.RUnlock()
	argsForCall := fake.waitK8sVersionUpdateForCPNodesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *ClusterClient) WaitK8sVersionUpdateForCPNodesReturns(result1 error) {
	fake.waitK8sVersionUpdateForCPNodesMutex.Lock()
	defer fake.waitK8sVersionUpdateForCPNodesMutex.Unlock()
	fake.WaitK8sVersionUpdateForCPNodesStub = nil
	fake.waitK8sVersionUpdateForCPNodesReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) WaitK8sVersionUpdateForCPNodesReturnsOnCall(i int, result1 error) {
	fake.waitK8sVersionUpdateForCPNodesMutex.Lock()
	defer fake.waitK8sVersionUpdateForCPNodesMutex.Unlock()
	fake.WaitK8sVersionUpdateForCPNodesStub = nil
	if fake.waitK8sVersionUpdateForCPNodesReturnsOnCall == nil {
		fake.waitK8sVersionUpdateForCPNodesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitK8sVersionUpdateForCPNodesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) WaitK8sVersionUpdateForWorkerNodes(arg1 string, arg2 string, arg3 string, arg4 clusterclient.Client) error {
	fake.waitK8sVersionUpdateForWorkerNodesMutex.Lock()
	ret, specificReturn := fake.waitK8sVersionUpdateForWorkerNodesReturnsOnCall[len(fake.waitK8sVersionUpdateForWorkerNodesArgsForCall)]
	fake.waitK8sVersionUpdateForWorkerNodesArgsForCall = append(fake.waitK8sVersionUpdateForWorkerNodesArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 clusterclient.Client
	}{arg1, arg2, arg3, arg4})
	fake.recordInvocation("WaitK8sVersionUpdateForWorkerNodes", []interface{}{arg1, arg2, arg3, arg4})
	fake.waitK8sVersionUpdateForWorkerNodesMutex.Unlock()
	if fake.WaitK8sVersionUpdateForWorkerNodesStub != nil {
		return fake.WaitK8sVersionUpdateForWorkerNodesStub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.waitK8sVersionUpdateForWorkerNodesReturns
	return fakeReturns.result1
}

func (fake *ClusterClient) WaitK8sVersionUpdateForWorkerNodesCallCount() int {
	fake.waitK8sVersionUpdateForWorkerNodesMutex.RLock()
	defer fake.waitK8sVersionUpdateForWorkerNodesMutex.RUnlock()
	return len(fake.waitK8sVersionUpdateForWorkerNodesArgsForCall)
}

func (fake *ClusterClient) WaitK8sVersionUpdateForWorkerNodesCalls(stub func(string, string, string, clusterclient.Client) error) {
	fake.waitK8sVersionUpdateForWorkerNodesMutex.Lock()
	defer fake.waitK8sVersionUpdateForWorkerNodesMutex.Unlock()
	fake.WaitK8sVersionUpdateForWorkerNodesStub = stub
}

func (fake *ClusterClient) WaitK8sVersionUpdateForWorkerNodesArgsForCall(i int) (string, string, string, clusterclient.Client) {
	fake.waitK8sVersionUpdateForWorkerNodesMutex.RLock()
	defer fake.waitK8sVersionUpdateForWorkerNodesMutex.RUnlock()
	argsForCall := fake.waitK8sVersionUpdateForWorkerNodesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *ClusterClient) WaitK8sVersionUpdateForWorkerNodesReturns(result1 error) {
	fake.waitK8sVersionUpdateForWorkerNodesMutex.Lock()
	defer fake.waitK8sVersionUpdateForWorkerNodesMutex.Unlock()
	fake.WaitK8sVersionUpdateForWorkerNodesStub = nil
	fake.waitK8sVersionUpdateForWorkerNodesReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) WaitK8sVersionUpdateForWorkerNodesReturnsOnCall(i int, result1 error) {
	fake.waitK8sVersionUpdateForWorkerNodesMutex.Lock()
	defer fake.waitK8sVersionUpdateForWorkerNodesMutex.Unlock()
	fake.WaitK8sVersionUpdateForWorkerNodesStub = nil
	if fake.waitK8sVersionUpdateForWorkerNodesReturnsOnCall == nil {
		fake.waitK8sVersionUpdateForWorkerNodesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitK8sVersionUpdateForWorkerNodesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.activateTanzuKubernetesReleasesMutex.RLock()
	defer fake.activateTanzuKubernetesReleasesMutex.RUnlock()
	fake.addCEIPTelemetryJobMutex.RLock()
	defer fake.addCEIPTelemetryJobMutex.RUnlock()
	fake.applyMutex.RLock()
	defer fake.applyMutex.RUnlock()
	fake.applyFileMutex.RLock()
	defer fake.applyFileMutex.RUnlock()
	fake.cloneWithTimeoutMutex.RLock()
	defer fake.cloneWithTimeoutMutex.RUnlock()
	fake.createNamespaceMutex.RLock()
	defer fake.createNamespaceMutex.RUnlock()
	fake.createResourceMutex.RLock()
	defer fake.createResourceMutex.RUnlock()
	fake.deactivateTanzuKubernetesReleasesMutex.RLock()
	defer fake.deactivateTanzuKubernetesReleasesMutex.RUnlock()
	fake.deleteClusterMutex.RLock()
	defer fake.deleteClusterMutex.RUnlock()
	fake.deleteExistingKappControllerMutex.RLock()
	defer fake.deleteExistingKappControllerMutex.RUnlock()
	fake.deleteResourceMutex.RLock()
	defer fake.deleteResourceMutex.RUnlock()
	fake.exportCurrentKubeconfigToFileMutex.RLock()
	defer fake.exportCurrentKubeconfigToFileMutex.RUnlock()
	fake.getAWSCredentialsFromSecretMutex.RLock()
	defer fake.getAWSCredentialsFromSecretMutex.RUnlock()
	fake.getAzureCredentialsFromSecretMutex.RLock()
	defer fake.getAzureCredentialsFromSecretMutex.RUnlock()
	fake.getBomConfigMapMutex.RLock()
	defer fake.getBomConfigMapMutex.RUnlock()
	fake.getClientSetMutex.RLock()
	defer fake.getClientSetMutex.RUnlock()
	fake.getClusterInfrastructureMutex.RLock()
	defer fake.getClusterInfrastructureMutex.RUnlock()
	fake.getCurrentClusterNameMutex.RLock()
	defer fake.getCurrentClusterNameMutex.RUnlock()
	fake.getCurrentKubeContextMutex.RLock()
	defer fake.getCurrentKubeContextMutex.RUnlock()
	fake.getCurrentKubeconfigFileMutex.RLock()
	defer fake.getCurrentKubeconfigFileMutex.RUnlock()
	fake.getCurrentNamespaceMutex.RLock()
	defer fake.getCurrentNamespaceMutex.RUnlock()
	fake.getKCPObjectForClusterMutex.RLock()
	defer fake.getKCPObjectForClusterMutex.RUnlock()
	fake.getKubeConfigForClusterMutex.RLock()
	defer fake.getKubeConfigForClusterMutex.RUnlock()
	fake.getKubernetesVersionMutex.RLock()
	defer fake.getKubernetesVersionMutex.RUnlock()
	fake.getMDObjectForClusterMutex.RLock()
	defer fake.getMDObjectForClusterMutex.RUnlock()
	fake.getMachineObjectsForClusterMutex.RLock()
	defer fake.getMachineObjectsForClusterMutex.RUnlock()
	fake.getManagementClusterTKGVersionMutex.RLock()
	defer fake.getManagementClusterTKGVersionMutex.RUnlock()
	fake.getPacificTKCAPIVersionMutex.RLock()
	defer fake.getPacificTKCAPIVersionMutex.RUnlock()
	fake.getPacificTanzuKubernetesReleasesMutex.RLock()
	defer fake.getPacificTanzuKubernetesReleasesMutex.RUnlock()
	fake.getPinnipedIssuerURLAndCAMutex.RLock()
	defer fake.getPinnipedIssuerURLAndCAMutex.RUnlock()
	fake.getRegionalClusterDefaultProviderNameMutex.RLock()
	defer fake.getRegionalClusterDefaultProviderNameMutex.RUnlock()
	fake.getResourceMutex.RLock()
	defer fake.getResourceMutex.RUnlock()
	fake.getResourceListMutex.RLock()
	defer fake.getResourceListMutex.RUnlock()
	fake.getSecretValueMutex.RLock()
	defer fake.getSecretValueMutex.RUnlock()
	fake.getTanzuKubernetesReleasesMutex.RLock()
	defer fake.getTanzuKubernetesReleasesMutex.RUnlock()
	fake.getVCClientAndDataCenterMutex.RLock()
	defer fake.getVCClientAndDataCenterMutex.RUnlock()
	fake.getVCCredentialsFromSecretMutex.RLock()
	defer fake.getVCCredentialsFromSecretMutex.RUnlock()
	fake.getVCServerMutex.RLock()
	defer fake.getVCServerMutex.RUnlock()
	fake.hasCEIPTelemetryJobMutex.RLock()
	defer fake.hasCEIPTelemetryJobMutex.RUnlock()
	fake.isClusterRegisteredToTMCMutex.RLock()
	defer fake.isClusterRegisteredToTMCMutex.RUnlock()
	fake.isPacificRegionalClusterMutex.RLock()
	defer fake.isPacificRegionalClusterMutex.RUnlock()
	fake.isRegionalClusterMutex.RLock()
	defer fake.isRegionalClusterMutex.RUnlock()
	fake.listClustersMutex.RLock()
	defer fake.listClustersMutex.RUnlock()
	fake.listPacificClusterObjectsMutex.RLock()
	defer fake.listPacificClusterObjectsMutex.RUnlock()
	fake.listResourcesMutex.RLock()
	defer fake.listResourcesMutex.RUnlock()
	fake.loadCurrentKubeconfigBytesMutex.RLock()
	defer fake.loadCurrentKubeconfigBytesMutex.RUnlock()
	fake.mergeAndUseConfigForClusterMutex.RLock()
	defer fake.mergeAndUseConfigForClusterMutex.RUnlock()
	fake.mergeConfigForClusterMutex.RLock()
	defer fake.mergeConfigForClusterMutex.RUnlock()
	fake.patchCalicoKubeControllerDeploymentWithNewNodeSelectorMutex.RLock()
	defer fake.patchCalicoKubeControllerDeploymentWithNewNodeSelectorMutex.RUnlock()
	fake.patchCalicoNodeDaemonSetWithNewNodeSelectorMutex.RLock()
	defer fake.patchCalicoNodeDaemonSetWithNewNodeSelectorMutex.RUnlock()
	fake.patchClusterAPIAWSControllersToUseEC2CredentialsMutex.RLock()
	defer fake.patchClusterAPIAWSControllersToUseEC2CredentialsMutex.RUnlock()
	fake.patchClusterObjectMutex.RLock()
	defer fake.patchClusterObjectMutex.RUnlock()
	fake.patchClusterObjectWithOptionalMetadataMutex.RLock()
	defer fake.patchClusterObjectWithOptionalMetadataMutex.RUnlock()
	fake.patchClusterObjectWithTKGVersionMutex.RLock()
	defer fake.patchClusterObjectWithTKGVersionMutex.RUnlock()
	fake.patchClusterWithOperationStartedStatusMutex.RLock()
	defer fake.patchClusterWithOperationStartedStatusMutex.RUnlock()
	fake.patchCoreDNSImageRepositoryInKubeadmConfigMapMutex.RLock()
	defer fake.patchCoreDNSImageRepositoryInKubeadmConfigMapMutex.RUnlock()
	fake.patchImageRepositoryInKubeProxyDaemonSetMutex.RLock()
	defer fake.patchImageRepositoryInKubeProxyDaemonSetMutex.RUnlock()
	fake.patchK8SVersionToPacificClusterMutex.RLock()
	defer fake.patchK8SVersionToPacificClusterMutex.RUnlock()
	fake.patchResourceMutex.RLock()
	defer fake.patchResourceMutex.RUnlock()
	fake.removeCEIPTelemetryJobMutex.RLock()
	defer fake.removeCEIPTelemetryJobMutex.RUnlock()
	fake.scalePacificClusterControlPlaneMutex.RLock()
	defer fake.scalePacificClusterControlPlaneMutex.RUnlock()
	fake.scalePacificClusterWorkerNodesMutex.RLock()
	defer fake.scalePacificClusterWorkerNodesMutex.RUnlock()
	fake.updateAWSCNIIngressRulesMutex.RLock()
	defer fake.updateAWSCNIIngressRulesMutex.RUnlock()
	fake.updateCapvManagerBootstrapCredentialsSecretMutex.RLock()
	defer fake.updateCapvManagerBootstrapCredentialsSecretMutex.RUnlock()
	fake.updateReplicasMutex.RLock()
	defer fake.updateReplicasMutex.RUnlock()
	fake.updateResourceMutex.RLock()
	defer fake.updateResourceMutex.RUnlock()
	fake.updateVsphereCloudProviderCredentialsSecretMutex.RLock()
	defer fake.updateVsphereCloudProviderCredentialsSecretMutex.RUnlock()
	fake.updateVsphereCsiConfigSecretMutex.RLock()
	defer fake.updateVsphereCsiConfigSecretMutex.RUnlock()
	fake.updateVsphereIdentityRefSecretMutex.RLock()
	defer fake.updateVsphereIdentityRefSecretMutex.RUnlock()
	fake.useContextMutex.RLock()
	defer fake.useContextMutex.RUnlock()
	fake.waitForAVIResourceCleanUpMutex.RLock()
	defer fake.waitForAVIResourceCleanUpMutex.RUnlock()
	fake.waitForAutoscalerDeploymentMutex.RLock()
	defer fake.waitForAutoscalerDeploymentMutex.RUnlock()
	fake.waitForClusterDeletionMutex.RLock()
	defer fake.waitForClusterDeletionMutex.RUnlock()
	fake.waitForClusterInitializedMutex.RLock()
	defer fake.waitForClusterInitializedMutex.RUnlock()
	fake.waitForClusterReadyMutex.RLock()
	defer fake.waitForClusterReadyMutex.RUnlock()
	fake.waitForDeploymentMutex.RLock()
	defer fake.waitForDeploymentMutex.RUnlock()
	fake.waitForPacificClusterMutex.RLock()
	defer fake.waitForPacificClusterMutex.RUnlock()
	fake.waitForPacificClusterK8sVersionUpdateMutex.RLock()
	defer fake.waitForPacificClusterK8sVersionUpdateMutex.RUnlock()
	fake.waitForPackageInstallMutex.RLock()
	defer fake.waitForPackageInstallMutex.RUnlock()
	fake.waitK8sVersionUpdateForCPNodesMutex.RLock()
	defer fake.waitK8sVersionUpdateForCPNodesMutex.RUnlock()
	fake.waitK8sVersionUpdateForWorkerNodesMutex.RLock()
	defer fake.waitK8sVersionUpdateForWorkerNodesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *ClusterClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ clusterclient.Client = new(ClusterClient)
