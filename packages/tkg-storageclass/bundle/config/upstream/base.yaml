#@ load("@ytt:overlay", "overlay")
#@ load("@ytt:yaml", "yaml")
#@ load("@ytt:data", "data")

#@ if data.values.infraProvider == "aws":
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: default
  annotations:
    storageclass.kubernetes.io/is-default-class: "true"
    kapp.k14s.io/update-strategy: always-replace
provisioner: ebs.csi.aws.com
allowVolumeExpansion: true
#@ end

#@ if data.values.infraProvider == "azure":
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: default
  annotations:
    storageclass.kubernetes.io/is-default-class: "true"
    kapp.k14s.io/update-strategy: always-replace
  labels:
    kubernetes.io/cluster-service: "true"
provisioner: disk.csi.azure.com
allowVolumeExpansion: true
parameters:
  kind: Managed
  storageaccounttype: Standard_LRS
  cachingmode: ReadOnly
volumeBindingMode: WaitForFirstConsumer
---
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: azure-file
  annotations:
    kapp.k14s.io/update-strategy: always-replace
  labels:
    kubernetes.io/cluster-service: "true"
provisioner: file.csi.azure.com
mountOptions:
  - dir_mode=0777
  - file_mode=0777
  - uid=0
  - gid=0
  - mfsymlinks
  - cache=strict
  - actimeo=30
allowVolumeExpansion: true
parameters:
  skuName: Premium_LRS
#@ end

#@ if data.values.infraProvider == "vsphere":
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: default
  annotations:
    storageclass.kubernetes.io/is-default-class: "true"
    kapp.k14s.io/update-strategy: always-replace
provisioner: csi.vsphere.vmware.com
allowVolumeExpansion: true
#@ if data.values.VSPHERE_STORAGE_POLICY_ID != "":
parameters:
  storagepolicyname: #@ data.values.VSPHERE_STORAGE_POLICY_ID
#@ end
#@ end
