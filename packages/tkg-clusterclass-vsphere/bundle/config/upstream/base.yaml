#@ load("@ytt:overlay", "overlay")
#@ load("@ytt:data", "data")
#@ load("@ytt:regexp", "regexp")

apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: VSphereClusterTemplate
metadata:
  name: #@ "tkg-vsphere-default-{}-cluster".format(data.values.VSPHERE_CLUSTER_CLASS_VERSION)
  namespace: #@ data.values.NAMESPACE
spec:
  template:
    spec:
      server: #@ data.values.VSPHERE_SERVER
      thumbprint: #@ data.values.VSPHERE_TLS_THUMBPRINT
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: VSphereMachineTemplate
metadata:
  name: #@ "tkg-vsphere-default-{}-control-plane".format(data.values.VSPHERE_CLUSTER_CLASS_VERSION)
  namespace: #@ data.values.NAMESPACE
spec:
  template:
    spec:
      cloneMode: #@ data.values.VSPHERE_CLONE_MODE
      datacenter: #@ data.values.VSPHERE_DATACENTER
      datastore: #@ data.values.VSPHERE_DATASTORE
      storagePolicyName: #@ data.values.VSPHERE_STORAGE_POLICY_ID
      diskGiB: #@ data.values.VSPHERE_CONTROL_PLANE_DISK_GIB
      folder: #@ data.values.VSPHERE_FOLDER
      memoryMiB: #@ data.values.VSPHERE_CONTROL_PLANE_MEM_MIB
      network:
        devices:
        - dhcp4: true
          networkName: #@ data.values.VSPHERE_NETWORK
      numCPUs:  #@ data.values.VSPHERE_CONTROL_PLANE_NUM_CPUS
      resourcePool: #@ data.values.VSPHERE_RESOURCE_POOL
      server: #@ data.values.VSPHERE_SERVER
      template: #@ data.values.VSPHERE_TEMPLATE
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: VSphereMachineTemplate
metadata:
  name: #@ "tkg-vsphere-default-{}-worker".format(data.values.VSPHERE_CLUSTER_CLASS_VERSION)
  namespace: #@ data.values.NAMESPACE
spec:
  template:
    spec:
      cloneMode: #@ data.values.VSPHERE_CLONE_MODE
      datacenter: #@ data.values.VSPHERE_DATACENTER
      datastore: #@ data.values.VSPHERE_DATASTORE
      storagePolicyName: #@ data.values.VSPHERE_STORAGE_POLICY_ID
      diskGiB: #@ data.values.VSPHERE_WORKER_DISK_GIB
      folder: #@ data.values.VSPHERE_FOLDER
      memoryMiB: #@ data.values.VSPHERE_WORKER_MEM_MIB
      network:
        devices:
        - dhcp4: true
          networkName: #@ data.values.VSPHERE_NETWORK
      numCPUs:  #@ data.values.VSPHERE_WORKER_NUM_CPUS
      resourcePool: #@ data.values.VSPHERE_RESOURCE_POOL
      server: #@ data.values.VSPHERE_SERVER
      template: #@ data.values.VSPHERE_TEMPLATE
---
apiVersion: controlplane.cluster.x-k8s.io/v1beta1
kind: KubeadmControlPlaneTemplate
metadata:
  name: #@ "tkg-vsphere-default-{}-kcp".format(data.values.VSPHERE_CLUSTER_CLASS_VERSION)
  namespace: #@ data.values.NAMESPACE
spec:
  template:
    spec:
      kubeadmConfigSpec:
        useExperimentalRetryJoin: true
        clusterConfiguration:
          imageRepository: dummy.registry.vmware.com
          etcd:
            local:
              dataDir: /var/lib/etcd
              imageRepository: dummy.registry.vmware.com
              imageTag: 1.8.4_dummy.5
              extraArgs: {}
          dns:
            imageRepository: dummy.registry.vmware.com
            imageTag: 1.8.4_dummy.5
          apiServer:
            timeoutForControlPlane: "8m0s"
            extraVolumes: []
            extraArgs: {}
          controllerManager:
            extraArgs: {}
          scheduler:
            extraArgs: {}
        files:
        - path: /tmp/empty.txt
          owner: "root:root"
          permissions: "0600"
          content: |
            default file
        initConfiguration:
          nodeRegistration:
            criSocket: /var/run/containerd/containerd.sock
            kubeletExtraArgs: {}
            name: '{{ ds.meta_data.hostname }}'
        joinConfiguration:
          nodeRegistration:
            criSocket: /var/run/containerd/containerd.sock
            kubeletExtraArgs: {}
            name: '{{ ds.meta_data.hostname }}'
        preKubeadmCommands:
        - hostname "{{ ds.meta_data.hostname }}"
        - echo "::1         ipv6-localhost ipv6-loopback" >/etc/hosts
        - echo "127.0.0.1   localhost" >>/etc/hosts
        - echo "127.0.0.1   {{ ds.meta_data.hostname }}" >>/etc/hosts
        - echo "{{ ds.meta_data.hostname }}" >/etc/hostname
        users:
        - name: capv
          sshAuthorizedKeys:
          - #@ data.values.VSPHERE_SSH_AUTHORIZED_KEY
          sudo: ALL=(ALL) NOPASSWD:ALL
---
apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
kind: KubeadmConfigTemplate
metadata:
  name: #@ "tkg-vsphere-default-{}-md-config".format(data.values.VSPHERE_CLUSTER_CLASS_VERSION)
  namespace: #@ data.values.NAMESPACE
spec:
  template:
    spec:
      useExperimentalRetryJoin: true
      joinConfiguration:
        nodeRegistration:
          criSocket: /var/run/containerd/containerd.sock
          kubeletExtraArgs: {}
          name: '{{ ds.meta_data.hostname }}'
      preKubeadmCommands:
      - hostname "{{ ds.meta_data.hostname }}"
      - echo "::1         ipv6-localhost ipv6-loopback" >/etc/hosts
      - echo "127.0.0.1   localhost" >>/etc/hosts
      - echo "127.0.0.1   {{ ds.meta_data.hostname }}" >>/etc/hosts
      - echo "{{ ds.meta_data.hostname }}" >/etc/hostname
      postKubeadmCommands:
      - echo "running postKubeadmCommands..."
      files:
      - path: /tmp/empty.txt
        owner: "root:root"
        permissions: "0600"
        content: |
          default file
      users:
      - name: capv
        sshAuthorizedKeys:
        - #@ data.values.VSPHERE_SSH_AUTHORIZED_KEY
        sudo: ALL=(ALL) NOPASSWD:ALL
---
apiVersion: cluster.x-k8s.io/v1beta1
kind: ClusterClass
metadata:
  name: #@ "tkg-vsphere-default-{}".format(data.values.VSPHERE_CLUSTER_CLASS_VERSION)
  namespace: #@ data.values.NAMESPACE
  annotations:
    run.tanzu.vmware.com/resolve-tkr: ""
spec:
  controlPlane:
    ref:
      apiVersion: controlplane.cluster.x-k8s.io/v1beta1
      kind: KubeadmControlPlaneTemplate
      name: #@ "tkg-vsphere-default-{}-kcp".format(data.values.VSPHERE_CLUSTER_CLASS_VERSION)
      namespace: #@ data.values.NAMESPACE
    machineInfrastructure:
      ref:
        kind: VSphereMachineTemplate
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        name: #@ "tkg-vsphere-default-{}-control-plane".format(data.values.VSPHERE_CLUSTER_CLASS_VERSION)
        namespace: #@ data.values.NAMESPACE
  infrastructure:
    ref:
      apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
      kind: VSphereClusterTemplate
      name: #@ "tkg-vsphere-default-{}-cluster".format(data.values.VSPHERE_CLUSTER_CLASS_VERSION)
      namespace: #@ data.values.NAMESPACE
  workers:
    machineDeployments:
    - class: tkg-worker
      template:
        bootstrap:
          ref:
            kind: KubeadmConfigTemplate
            apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
            name: #@ "tkg-vsphere-default-{}-md-config".format(data.values.VSPHERE_CLUSTER_CLASS_VERSION)
            namespace: #@ data.values.NAMESPACE
        infrastructure:
          ref:
            kind: VSphereMachineTemplate
            apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
            name: #@ "tkg-vsphere-default-{}-worker".format(data.values.VSPHERE_CLUSTER_CLASS_VERSION)
            namespace: #@ data.values.NAMESPACE
    - class: tkg-worker-windows
      template:
        bootstrap:
          ref:
            kind: KubeadmConfigTemplate
            apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
            name: #@ "tkg-vsphere-default-{}-md-config".format(data.values.VSPHERE_CLUSTER_CLASS_VERSION)
            namespace: #@ data.values.NAMESPACE
        infrastructure:
          ref:
            kind: VSphereMachineTemplate
            apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
            name: #@ "tkg-vsphere-default-{}-worker".format(data.values.VSPHERE_CLUSTER_CLASS_VERSION)
            namespace: #@ data.values.NAMESPACE
  variables:
  - name: vcenter
    required: true
    schema:
      openAPIV3Schema:
        type: object
        properties:
          cloneMode:
            type: string
            default: fullClone
          network:
            type: string
            default: VMNetwork
          datacenter:
            type: string
            default: ""
          datastore:
            type: string
            default: ""
          folder:
            type: string
            default: ""
          resourcePool:
            type: string
            default: ""
          storagePolicyID:
            type: string
            default: ""
          server:
            type: string
            default: ""
          tlsThumbprint:
            type: string
            default: ""
          template:
            type: string
            default: ""
        required:
        - datacenter
        - datastore
        - folder
        - resourcePool
        - server
  - name: VSPHERE_WINDOWS_TEMPLATE
    required: false
    schema:
      openAPIV3Schema:
        type: string
        default: ""
  - name: vipNetworkInterface
    required: true
    schema:
      openAPIV3Schema:
        type: string
        default: eth0
  - name: cni
    required: true
    schema:
      openAPIV3Schema:
        type: string
        #@ if data.values.CNI:
        default: #@ data.values.CNI
        #@ else:
        default: "none"
        #@ end
  - name: network
    required: false
    schema:
      openAPIV3Schema:
        type: object
        properties:
          ipv6Primary:
            type: boolean
            default: false
          addressesFromPools:
            type: array
            items:
              type: object
              properties:
                apiGroup:
                  type: string
                kind:
                  type: string
                name:
                  type: string
              required:
              - apiGroup
              - kind
              - name
            default: []
        default:
          ipv6Primary: false
  - name: proxy
    required: false
    schema:
      openAPIV3Schema:
        type: object
        properties:
          httpProxy:
            type: string
          httpsProxy:
            type: string
          noProxy:
            type: array
            items:
              type: string
            default: []
        required:
        - httpProxy
        - httpsProxy
  - name: imageRepository
    required: false
    schema:
      openAPIV3Schema:
        type: object
        properties:
          host:
            type: string
          tlsCertificateValidation:
            type: boolean
            default: true
  - name: aviAPIServerHAProvider
    required: false
    schema:
      openAPIV3Schema:
        type: boolean
        default: false
  - name: apiServerEndpoint
    required: false
    schema:
      openAPIV3Schema:
        type: string
        default: ""
  - name: apiServerPort
    required: false
    schema:
      openAPIV3Schema:
        type: integer
  - name: kubeVipLoadBalancerProvider
    required: false
    schema:
      openAPIV3Schema:
        type: boolean
        default: false
  - name: trust
    required: false
    schema:
      openAPIV3Schema:
        type: object
        properties:
          additionalTrustedCAs:
            type: array
            items:
              type: object
              properties:
                name:
                  type: string
                data:
                  type: string
              required:
              - name
              - data
  - name: auditLogging
    required: false
    schema:
      openAPIV3Schema:
        type: object
        properties:
          enabled:
            type: boolean
            default: false
        default:
          enabled: false
  - name: user
    required: false
    schema:
      openAPIV3Schema:
        type: object
        properties:
          sshAuthorizedKeys:
            type: array
            items:
              type: string
            default: []
  - name: controlPlane
    required: true
    schema:
      openAPIV3Schema:
        type: object
        properties:
          machine:
            type: object
            properties:
              numCPUs:
                type: integer
                default: 2
              diskGiB:
                type: integer
                default: 40
              memoryMiB:
                type: integer
                default: 8192
          network:
            type: object
            properties:
              nameservers:
                type: array
                items:
                  type: string
                default: []
              searchDomains:
                type: array
                items:
                  type: string
                default: []
          nodeLabels:
            type: array
            items:
              type: object
              properties:
                key:
                  type: string
                value:
                  type: string
            default: []
  - name: worker
    required: false
    schema:
      openAPIV3Schema:
        type: object
        properties:
          machine:
            type: object
            properties:
              numCPUs:
                type: integer
                default: 2
              diskGiB:
                type: integer
                default: 40
              memoryMiB:
                type: integer
                default: 4096
          network:
            type: object
            properties:
              nameservers:
                type: array
                items:
                  type: string
                default: []
              searchDomains:
                type: array
                items:
                  type: string
                default: []
  - name: nodePoolLabels
    required: false
    schema:
      openAPIV3Schema:
        type: array
        items:
          type: object
          properties:
            key:
              type: string
            value:
              type: string
        default: []
  - name: ntpServers
    required: false
    schema:
      openAPIV3Schema:
        type: array
        items:
          type: string
        default: []
  - name: additionalFQDN
    required: false
    schema:
      openAPIV3Schema:
        type: array
        items:
          type: string
        default: []
  - name: TKR_DATA
    required: false
    schema:
      openAPIV3Schema:
        type: object
        properties: {}
  - name: controlPlaneTaint
    required: false
    schema:
      openAPIV3Schema:
        type: boolean
        default: true
  - name: etcdExtraArgs
    required: false
    schema:
      openAPIV3Schema:
        type: object
        additionalProperties:
          type: string
        default: {}
  - name: apiServerExtraArgs
    required: false
    schema:
      openAPIV3Schema:
        type: object
        additionalProperties:
          type: string
        default: {}
  - name: kubeSchedulerExtraArgs
    required: false
    schema:
      openAPIV3Schema:
        type: object
        additionalProperties:
          type: string
        default: {}
  - name: kubeControllerManagerExtraArgs
    required: false
    schema:
      openAPIV3Schema:
        type: object
        additionalProperties:
          type: string
        default: {}
  - name: controlPlaneKubeletExtraArgs
    required: false
    schema:
      openAPIV3Schema:
        type: object
        additionalProperties:
          type: string
        default: {}
  - name: workerKubeletExtraArgs
    required: false
    schema:
      openAPIV3Schema:
        type: object
        additionalProperties:
          type: string
        default: {}
  - name: tlsCipherSuites
    required: false
    schema:
      openAPIV3Schema:
        type: string
        default: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
  - name: identityRef
    required: false
    schema:
      openAPIV3Schema:
        type: object
        properties:
          name:
            type: string
          kind:
            type: string
        required:
        - name
        - kind
  - name: controlPlaneCertificateRotation
    required: false
    schema:
      openAPIV3Schema:
        type: object
        properties:
          activate:
            type: boolean
            default: true
          daysBefore:
            type: integer
            format: int32
            minimum: 7
            default: 90
        default:
          activate: true
          daysBefore: 90
  patches:
  - name: etcdExtraArgs
    definitions:
    - selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
      jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/etcd/local/extraArgs
        valueFrom:
          template: |
            {{ $containCipherSuites := false }}
            {{- range $key, $val := .etcdExtraArgs }}
            {{- if eq $key "cipher-suites" }}
              {{- $containCipherSuites = true }}
            {{- end }}
            {{ $key -}} : "{{ $val }}"
            {{- end }}
            {{- if not $containCipherSuites }}
            cipher-suites: "{{ .tlsCipherSuites }}"
            {{- end }}
  - name: apiServerExtraArgs
    definitions:
    - selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
      jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
        valueFrom:
          template: |
            {{ $containCipherSuites := false }}
            {{ $containCloudProvider := false }}
            {{- range $key, $val := .apiServerExtraArgs }}
            {{- if eq $key "tls-cipher-suites" }}
              {{- $containCipherSuites = true }}
            {{- end }}
            {{- if eq $key "cloud-provider" }}
              {{- $containCloudProvider = true }}
            {{- end }}
            {{ $key -}} : "{{ $val }}"
            {{- end }}
            {{- if not $containCipherSuites }}
            tls-cipher-suites: "{{ .tlsCipherSuites }}"
            {{- end }}
            {{- if not $containCloudProvider }}
            cloud-provider: external
            {{- end }}
  - name: kubeSchedulerExtraArgs
    definitions:
    - selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
      jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/scheduler/extraArgs
        valueFrom:
          template: |
            {{ $containCipherSuites := false }}
            {{- range $key, $val := .kubeSchedulerExtraArgs }}
            {{- if eq $key "tls-cipher-suites" }}
              {{- $containCipherSuites = true }}
            {{- end }}
            {{ $key -}} : "{{ $val }}"
            {{- end }}
            {{- if not $containCipherSuites }}
            tls-cipher-suites: "{{ .tlsCipherSuites }}"
            {{- end }}
  - name: kubeControllerManagerExtraArgs
    definitions:
    - selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
      jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/controllerManager/extraArgs
        valueFrom:
          template: |
            {{ $containCipherSuites := false }}
            {{ $containCloudProvider := false }}
            {{- range $key, $val := .kubeControllerManagerExtraArgs }}
            {{- if eq $key "tls-cipher-suites" }}
              {{- $containCipherSuites = true }}
            {{- end }}
            {{- if eq $key "cloud-provider" }}
              {{- $containCloudProvider = true }}
            {{- end }}
            {{ $key -}} : "{{ $val }}"
            {{- end }}
            {{- if not $containCipherSuites }}
            tls-cipher-suites: "{{ .tlsCipherSuites }}"
            {{- end }}
            {{- if not $containCloudProvider }}
            cloud-provider: external
            {{- end }}
  - name: controlPlaneKubeletExtraArgs
    definitions:
    - selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
      jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/initConfiguration/nodeRegistration/kubeletExtraArgs
        valueFrom:
          template: |
            {{ $containCipherSuites := false }}
            {{ $containCloudProvider := false }}
            {{- range $key, $val := .controlPlaneKubeletExtraArgs }}
            {{- if eq $key "tls-cipher-suites" }}
              {{- $containCipherSuites = true }}
            {{- end }}
            {{- if eq $key "cloud-provider" }}
              {{- $containCloudProvider = true }}
            {{- end }}
            {{ $key -}} : "{{ $val }}"
            {{- end }}
            {{- if not $containCipherSuites }}
            tls-cipher-suites: "{{ .tlsCipherSuites }}"
            {{- end }}
            {{- if not $containCloudProvider }}
            cloud-provider: external
            {{- end }}
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/joinConfiguration/nodeRegistration/kubeletExtraArgs
        valueFrom:
          template: |
            {{ $containCipherSuites := false }}
            {{ $containCloudProvider := false }}
            {{- range $key, $val := .controlPlaneKubeletExtraArgs }}
            {{- if eq $key "tls-cipher-suites" }}
              {{- $containCipherSuites = true }}
            {{- end }}
            {{- if eq $key "cloud-provider" }}
              {{- $containCloudProvider = true }}
            {{- end }}
            {{ $key -}} : "{{ $val }}"
            {{- end }}
            {{- if not $containCipherSuites }}
            tls-cipher-suites: "{{ .tlsCipherSuites }}"
            {{- end }}
            {{- if not $containCloudProvider }}
            cloud-provider: external
            {{- end }}
  - name: workerKubeletExtraArgs
    definitions:
    - selector:
        apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
        kind: KubeadmConfigTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - tkg-worker
            - tkg-worker-windows
      jsonPatches:
      - op: add
        path: /spec/template/spec/joinConfiguration/nodeRegistration/kubeletExtraArgs
        valueFrom:
          template: |
            {{ $containCipherSuites := false }}
            {{ $containCloudProvider := false }}
            {{- range $key, $val := .workerKubeletExtraArgs }}
            {{- if eq $key "tls-cipher-suites" }}
              {{- $containCipherSuites = true }}
            {{- end }}
            {{- if eq $key "cloud-provider" }}
              {{- $containCloudProvider = true }}
            {{- end }}
            {{ $key -}} : "{{ $val }}"
            {{- end }}
            {{- if not $containCipherSuites }}
            tls-cipher-suites: "{{ .tlsCipherSuites }}"
            {{- end }}
            {{- if not $containCloudProvider }}
            cloud-provider: external
            {{- end }}
  - name: vsphereClusterTemplate
    definitions:
    - selector:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: VSphereClusterTemplate
        matchResources:
          infrastructureCluster: true
      jsonPatches:
      - op: add
        path: /spec/template/spec/controlPlaneEndpoint
        valueFrom:
          template: |
            host: '{{ .apiServerEndpoint }}'
            port: 6443
      - op: replace
        path: /spec/template/spec/thumbprint
        valueFrom:
          variable: vcenter.tlsThumbprint
      - op: replace
        path: /spec/template/spec/server
        valueFrom:
          variable: vcenter.server
  - name: vSphereClusterIdentityRef
    definitions:
    - selector:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: VSphereClusterTemplate
        matchResources:
          infrastructureCluster: true
      jsonPatches:
      - op: add
        path: /spec/template/spec/identityRef
        valueFrom:
          template: |
            {{ if .identityRef -}}
            kind: {{ .identityRef.kind }}
            name: {{ .identityRef.name }}
            {{- else -}}
            kind: Secret
            name: '{{ .builtin.cluster.name }}'
            {{- end }}
  - name: controlPlaneMachineTemplate
    definitions:
    - selector:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: VSphereMachineTemplate
        matchResources:
          controlPlane: true
      jsonPatches:
      - op: replace
        path: /spec/template/spec/numCPUs
        valueFrom:
          variable: controlPlane.machine.numCPUs
      - op: replace
        path: /spec/template/spec/diskGiB
        valueFrom:
          variable: controlPlane.machine.diskGiB
      - op: replace
        path: /spec/template/spec/memoryMiB
        valueFrom:
          variable: controlPlane.machine.memoryMiB
      - op: replace
        path: /spec/template/spec/cloneMode
        valueFrom:
          variable: vcenter.cloneMode
      - op: replace
        path: /spec/template/spec/network
        valueFrom:
          variable: vcenter.network
      - op: replace
        path: /spec/template/spec/datacenter
        valueFrom:
          variable: vcenter.datacenter
      - op: replace
        path: /spec/template/spec/datastore
        valueFrom:
          variable: vcenter.datastore
      - op: replace
        path: /spec/template/spec/folder
        valueFrom:
          variable: vcenter.folder
      - op: replace
        path: /spec/template/spec/resourcePool
        valueFrom:
          variable: vcenter.resourcePool
      - op: replace
        path: /spec/template/spec/storagePolicyName
        valueFrom:
          variable: vcenter.storagePolicyID
      - op: replace
        path: /spec/template/spec/server
        valueFrom:
          variable: vcenter.server
      - op: replace
        path: /spec/template/spec/template
        valueFrom:
          template: '{{ (index .TKR_DATA .builtin.controlPlane.version).osImageRef.template }}'
  - name: workerMachineTemplate
    definitions:
    - selector:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: VSphereMachineTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - tkg-worker
            - tkg-worker-windows
      jsonPatches:
      - op: replace
        path: /spec/template/spec/numCPUs
        valueFrom:
          variable: worker.machine.numCPUs
      - op: replace
        path: /spec/template/spec/diskGiB
        valueFrom:
          variable: worker.machine.diskGiB
      - op: replace
        path: /spec/template/spec/memoryMiB
        valueFrom:
          variable: worker.machine.memoryMiB
      - op: replace
        path: /spec/template/spec/cloneMode
        valueFrom:
          variable: vcenter.cloneMode
      - op: replace
        path: /spec/template/spec/network
        valueFrom:
          variable: vcenter.network
      - op: replace
        path: /spec/template/spec/datacenter
        valueFrom:
          variable: vcenter.datacenter
      - op: replace
        path: /spec/template/spec/datastore
        valueFrom:
          variable: vcenter.datastore
      - op: replace
        path: /spec/template/spec/folder
        valueFrom:
          variable: vcenter.folder
      - op: replace
        path: /spec/template/spec/resourcePool
        valueFrom:
          variable: vcenter.resourcePool
      - op: replace
        path: /spec/template/spec/storagePolicyName
        valueFrom:
          variable: vcenter.storagePolicyID
      - op: replace
        path: /spec/template/spec/server
        valueFrom:
          variable: vcenter.server
      - op: replace
        path: /spec/template/spec/template
        valueFrom:
          template: '{{ (index .TKR_DATA .builtin.machineDeployment.version).osImageRef.template }}'
  - name: kubeadmControlPlaneTemplate
    definitions:
    - selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
      jsonPatches:
      - op: replace
        path: /spec/template/spec/kubeadmConfigSpec/users
        valueFrom:
          template: |
            - name: capv
              sshAuthorizedKeys:
              {{- range .user.sshAuthorizedKeys }}
              - ' {{- . -}} '
              {{- end }}
              sudo: ALL=(ALL) NOPASSWD:ALL
      - op: replace
        path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/imageRepository
        valueFrom:
          template: '{{(index .TKR_DATA .builtin.controlPlane.version).kubernetesSpec.imageRepository}}'
      - op: replace
        path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/etcd/local/imageRepository
        valueFrom:
          template: '{{(index .TKR_DATA .builtin.controlPlane.version).kubernetesSpec.imageRepository}}'
      - op: replace
        path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/etcd/local/imageTag
        valueFrom:
          template: '{{(index .TKR_DATA .builtin.controlPlane.version).kubernetesSpec.etcd.imageTag}}'
      - op: replace
        path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/dns/imageRepository
        valueFrom:
          template: '{{(index .TKR_DATA .builtin.controlPlane.version).kubernetesSpec.imageRepository}}'
      - op: replace
        path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/dns/imageTag
        valueFrom:
          template: '{{(index .TKR_DATA .builtin.controlPlane.version).kubernetesSpec.coredns.imageTag}}'
  - name: KubeadmConfigTemplate
    definitions:
    - selector:
        apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
        kind: KubeadmConfigTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - tkg-worker
      jsonPatches:
      - op: replace
        path: /spec/template/spec/users
        valueFrom:
          template: |
            - name: capv
              sshAuthorizedKeys:
              {{- range .user.sshAuthorizedKeys }}
              - ' {{- . -}} '
              {{- end }}
              sudo: ALL=(ALL) NOPASSWD:ALL
  - name: kubeVIPPod
    enabledIf: '{{ not .aviAPIServerHAProvider }}'
    definitions:
    - selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
      jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/files/-
        valueFrom:
          template: |
            owner: root:root
            path: /etc/kubernetes/manifests/kube-vip.yaml
            content: |
              ---
              apiVersion: v1
              kind: Pod
              metadata:
                creationTimestamp: null
                name: kube-vip
                namespace: kube-system
              spec:
                containers:
                - args:
                  - manager
                  env:
                  - name: cp_enable
                    value: "true"
                  - name: svc_enable
                    value: "{{ .kubeVipLoadBalancerProvider }}"
                  - name: vip_arp
                    value: "true"
                  - name: vip_leaderelection
                    value: "true"
                  - name: address
                    value: {{ .apiServerEndpoint }}
                  {{- if and (not .aviControlPlaneHAProvider) .apiServerPort }}
                  - name: port
                    value: "{{ .apiServerPort }}"
                  {{- end }}
                  - name: vip_interface
                    value: {{ .vipNetworkInterface }}
                  - name: vip_leaseduration
                    value: "30"
                  - name: vip_renewdeadline
                    value: "20"
                  - name: vip_retryperiod
                    value: "4"
                  image: {{(index (index .TKR_DATA .builtin.controlPlane.version).kubernetesSpec "kube-vip").imageRepository}}/kube-vip:{{(index (index .TKR_DATA .builtin.controlPlane.version).kubernetesSpec "kube-vip").imageTag}}
                  imagePullPolicy: IfNotPresent
                  name: kube-vip
                  resources: {}
                  securityContext:
                    capabilities:
                      add:
                      - NET_ADMIN
                      - NET_RAW
                  volumeMounts:
                  - mountPath: /etc/kubernetes/admin.conf
                    name: kubeconfig
                hostNetwork: true
                hostAliases:
                - hostnames:
                  - kubernetes
                  ip: 127.0.0.1
                volumes:
                - hostPath:
                    path: /etc/kubernetes/admin.conf
                    type: FileOrCreate
                  name: kubeconfig
              status: {}
  - name: networkConfiguration
    definitions:
    - selector:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: VSphereMachineTemplate
        matchResources:
          controlPlane: true
      jsonPatches:
      - op: replace
        path: /spec/template/spec/network
        valueFrom:
          template: |
            devices:
            - networkName: {{ .vcenter.network }}
              {{ if .controlPlane.network.nameservers -}}
              nameservers:
                {{- range .controlPlane.network.nameservers }}
              - {{ . }}
                {{- end }}
              {{- end }}
              {{ if .controlPlane.network.searchDomains -}}
              searchDomains:
                {{- range .controlPlane.network.searchDomains }}
              - {{ . }}
                {{- end }}
              {{- end }}
              {{ if list "IPv4" "DualStack" | has .builtin.cluster.network.ipFamily | and (empty .network.addressesFromPools) -}} dhcp4: true {{- end }}
              {{ if list "IPv6" "DualStack" | has .builtin.cluster.network.ipFamily | and (empty .network.addressesFromPools) -}} dhcp6: true {{- end }}
              {{ if .network.addressesFromPools  -}}
              addressesFromPools:
                {{- range .network.addressesFromPools }}
              - apiGroup: {{ .apiGroup }}
                kind: {{ .kind }}
                name: {{ .name }}
                {{- end }}
              {{- end }}
    - selector:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: VSphereMachineTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - tkg-worker
            - tkg-worker-windows
      jsonPatches:
      - op: add
        path: /spec/template/spec/network
        valueFrom:
          template: |
            devices:
            - networkName: {{ .vcenter.network }}
              {{ if .worker.network.nameservers -}}
              nameservers:
                {{- range .worker.network.nameservers }}
              - {{ . }}
                {{- end }}
              {{- end }}
              {{ if .controlPlane.network.searchDomains -}}
              searchDomains:
                {{- range .controlPlane.network.searchDomains }}
              - {{ . }}
                {{- end }}
              {{- end }}
              {{ if list "IPv4" "DualStack" | has .builtin.cluster.network.ipFamily | and (empty .network.addressesFromPools) -}} dhcp4: true {{- end }}
              {{ if list "IPv6" "DualStack" | has .builtin.cluster.network.ipFamily | and (empty .network.addressesFromPools) -}} dhcp6: true {{- end }}
              {{ if .network.addressesFromPools  -}}
              addressesFromPools:
                {{- range .network.addressesFromPools }}
              - apiGroup: {{ .apiGroup }}
                kind: {{ .kind }}
                name: {{ .name }}
                {{- end }}
              {{- end }}
  - name: ipv6localhost
    enabledIf: '{{ list "IPv6" "DualStack" | has .builtin.cluster.network.ipFamily }}'
    definitions:
    - selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
      jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        value: echo "::1         localhost" >> /etc/hosts
    - selector:
        apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
        kind: KubeadmConfigTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - tkg-worker
      jsonPatches:
      - op: add
        path: /spec/template/spec/preKubeadmCommands/-
        value: echo "::1         localhost" >> /etc/hosts
  - name: clusterApiServerPort
    enabledIf: '{{ not (empty .apiServerPort) }}'
    definitions:
    - selector:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: VSphereClusterTemplate
        matchResources:
          infrastructureCluster: true
      jsonPatches:
      - op: replace
        path: /spec/template/spec/controlPlaneEndpoint/port
        valueFrom:
          variable: apiServerPort
  - name: apiServerEndpointConfiguration
    enabledIf: '{{ and (not .aviAPIServerHAProvider) (not (empty .apiServerPort)) }}'
    definitions:
    - selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
      jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/initConfiguration/localAPIEndpoint
        valueFrom:
          template: |
            {{ if .builtin.cluster.network.ipFamily | eq "IPv6" | or (.builtin.cluster.network.ipFamily | eq "DualStack" | and (.network.ipv6Primary | default false)) -}}
              advertiseAddress: '::/0'
            {{- else -}}
              advertiseAddress: '0.0.0.0'
            {{- end }}
            bindPort: {{ .apiServerPort }}
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/joinConfiguration/controlPlane
        valueFrom:
          template: |
            localAPIEndpoint:
              {{ if .builtin.cluster.network.ipFamily | eq "IPv6" | or (.builtin.cluster.network.ipFamily | eq "DualStack" | and (.network.ipv6Primary | default false)) -}}
                advertiseAddress: '::/0'
              {{- else -}}
                advertiseAddress: '0.0.0.0'
              {{- end }}
              bindPort: {{ .apiServerPort }}
  - name: bindAddressConfiguration
    enabledIf: '{{ .builtin.cluster.network.ipFamily | eq "DualStack" | and (.network.ipv6Primary | default false) }}'
    definitions:
    - selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
      jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/initConfiguration/nodeRegistration/kubeletExtraArgs/node-ip
        value: "::"
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/joinConfiguration/nodeRegistration/kubeletExtraArgs/node-ip
        value: "::"
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs/advertise-address
        valueFrom:
          variable: apiServerEndpoint
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs/bind-address
        value: "::"
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/controllerManager/extraArgs/bind-address
        value: "::"
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/scheduler/extraArgs/bind-address
        value: "::"
    - selector:
        apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
        kind: KubeadmConfigTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - tkg-worker
      jsonPatches:
      - op: add
        path: /spec/template/spec/joinConfiguration/nodeRegistration/kubeletExtraArgs/node-ip
        value: "::"
  - name: ipv6KubeletNodeIPConfiguration
    enabledIf: '{{ and (.builtin.cluster.network.ipFamily | eq "IPv6" | or (.builtin.cluster.network.ipFamily | eq "DualStack" | and (.network.ipv6Primary | default false))) (not .aviAPIServerHAProvider) }}'
    definitions:
    - selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
      jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/files/-
        value:
          content: ""
          owner: root:root
          path: /etc/sysconfig/kubelet
          permissions: "0640"
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        value: echo "KUBELET_EXTRA_ARGS=--node-ip=$(ip -6 -json addr show dev eth0 scope global | jq -r .[0].addr_info[0].local)" >> /etc/sysconfig/kubelet
  - name: nodeLabels
    definitions:
    - selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
      jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/initConfiguration/nodeRegistration/kubeletExtraArgs/node-labels
        valueFrom:
          template: |
            {{ $first := true }}
            {{- range $key, $val := (index .TKR_DATA .builtin.controlPlane.version).labels }}
            {{- if regexMatch "^(?:[a-zA-z])(?:[-\\w\\.]*[a-zA-z])$" $val }}
            {{- if $first }}
              {{- $first = false }}
            {{- else -}}
              ,
            {{- end }}
            {{- $key -}} = {{- $val }}
            {{- end }}
            {{- end }}
            {{- if .controlPlane.nodeLabels -}}
              {{- if (index .TKR_DATA .builtin.controlPlane.version).labels -}}
              ,
              {{- end -}}
              {{- $first := true }}
              {{- range .controlPlane.nodeLabels }}
                {{- if $first }}
                  {{- $first = false }}
                {{- else -}}
                  ,
                {{- end }}
                {{- .key -}} = {{- .value -}}
              {{ end }}
            {{ end }}
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/joinConfiguration/nodeRegistration/kubeletExtraArgs/node-labels
        valueFrom:
          template: |
            {{ $first := true }}
            {{- range $key, $val := (index .TKR_DATA .builtin.controlPlane.version).labels }}
            {{- if regexMatch "^(?:[a-zA-z])(?:[-\\w\\.]*[a-zA-z])$" $val }}
            {{- if $first }}
              {{- $first = false }}
            {{- else -}}
              ,
            {{- end }}
            {{- $key -}} = {{- $val }}
            {{- end }}
            {{- end }}
            {{- if .controlPlane.nodeLabels -}}
              {{- if (index .TKR_DATA .builtin.controlPlane.version).labels -}}
              ,
              {{- end -}}
              {{- $first := true }}
              {{- range .controlPlane.nodeLabels }}
                {{- if $first }}
                  {{- $first = false }}
                {{- else -}}
                  ,
                {{- end }}
                {{- .key -}} = {{- .value -}}
              {{ end }}
            {{ end }}
    - selector:
        apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
        kind: KubeadmConfigTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - tkg-worker
            - tkg-worker-windows
      jsonPatches:
      - op: add
        path: /spec/template/spec/joinConfiguration/nodeRegistration/kubeletExtraArgs/node-labels
        valueFrom:
          template: |
            {{ $first := true }}
            {{- range $key, $val := (index .TKR_DATA .builtin.machineDeployment.version).labels }}
            {{- if regexMatch "^(?:[a-zA-z])(?:[-\\w\\.]*[a-zA-z])$" $val }}
            {{- if $first }}
              {{- $first = false }}
            {{- else -}}
              ,
            {{- end }}
            {{- $key -}} = {{- $val }}
            {{- end }}
            {{- end }}
            {{- if .nodePoolLabels -}}
              ,
              {{- $first := true }}
              {{- range .nodePoolLabels }}
                {{- if $first }}
                  {{- $first = false }}
                {{- else -}}
                  ,
                {{- end }}
                {{- .key -}} = {{- .value -}}
              {{ end }}
            {{ end }}
  - name: httpProxy
    enabledIf: '{{ not (empty .proxy) }}'
    definitions:
    - selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
      jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/files/-
        valueFrom:
          template: &containerdProxyConf |
            content: |
              [Service]
              Environment="HTTP_PROXY= {{- .proxy.httpProxy -}} "
              Environment="HTTPS_PROXY= {{- .proxy.httpsProxy -}} "
              Environment="NO_PROXY= {{- list "localhost" "127.0.0.1" ".svc" ".svc.cluster.local" ((list "IPv6" "DualStack" | has .builtin.cluster.network.ipFamily) | ternary  "::1" nil) | concat .proxy.noProxy .builtin.cluster.network.services .builtin.cluster.network.pods | uniq | sortAlpha | join "," -}} "
            owner: root:root
            path: /etc/systemd/system/containerd.service.d/http-proxy.conf
            permissions: "0640"
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/files/-
        valueFrom:
          template: &kubeletProxyConf |
            content: |
              [Service]
              Environment="HTTP_PROXY= {{- .proxy.httpProxy -}} "
              Environment="HTTPS_PROXY= {{- .proxy.httpsProxy -}} "
              Environment="NO_PROXY= {{- list "localhost" "127.0.0.1" ".svc" ".svc.cluster.local" ((list "IPv6" "DualStack" | has .builtin.cluster.network.ipFamily) | ternary  "::1" nil) | concat .proxy.noProxy .builtin.cluster.network.services .builtin.cluster.network.pods | uniq | sortAlpha | join "," -}} "
            owner: root:root
            path: /usr/lib/systemd/system/kubelet.service.d/http-proxy.conf
            permissions: "0640"
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        value: systemctl daemon-reload
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        value: systemctl stop containerd
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        value: systemctl start containerd
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        valueFrom:
          template: &exportHTTPProxy |
            export HTTP_PROXY= {{- .proxy.httpProxy }}
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        valueFrom:
          template: &exportHTTPSProxy |
            export HTTPS_PROXY= {{- .proxy.httpsProxy }}
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        valueFrom:
          template: &exportNoProxy |
            export NO_PROXY= {{- list "localhost" "127.0.0.1" ".svc" ".svc.cluster.local" ((list "IPv6" "DualStack" | has .builtin.cluster.network.ipFamily) | ternary  "::1" nil) | concat .proxy.noProxy .builtin.cluster.network.services .builtin.cluster.network.pods | uniq | sortAlpha | join "," }}
    - selector:
        apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
        kind: KubeadmConfigTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - tkg-worker
      jsonPatches:
      - op: add
        path: /spec/template/spec/files/-
        valueFrom:
          template: *containerdProxyConf
      - op: add
        path: /spec/template/spec/files/-
        valueFrom:
          template: *kubeletProxyConf
      - op: add
        path: /spec/template/spec/preKubeadmCommands/-
        value: systemctl daemon-reload
      - op: add
        path: /spec/template/spec/preKubeadmCommands/-
        value: systemctl restart containerd
      - op: add
        path: /spec/template/spec/preKubeadmCommands/-
        valueFrom:
          template: *exportHTTPProxy
      - op: add
        path: /spec/template/spec/preKubeadmCommands/-
        valueFrom:
          template: *exportHTTPSProxy
      - op: add
        path: /spec/template/spec/preKubeadmCommands/-
        valueFrom:
          template: *exportNoProxy
  - name: httpProxyCACert
    enabledIf: '{{ $hasProxyCert := false }} {{- range .trust.additionalTrustedCAs }} {{- if .name | eq "proxy" }} {{- $hasProxyCert = true }} {{- end }} {{- end }} {{- $hasProxyCert }}'
    definitions:
    - selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
      jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        value: '! which rehash_ca_certificates.sh 2>/dev/null || rehash_ca_certificates.sh'
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        value: '! which update-ca-certificates 2>/dev/null || (mv /etc/ssl/certs/tkg-custom-ca.pem /usr/local/share/ca-certificates/tkg-custom-ca.crt && update-ca-certificates)'
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        value: '! which update-ca-trust 2>/dev/null || (update-ca-trust force-enable && mv /etc/ssl/certs/tkg-custom-ca.pem /etc/pki/ca-trust/source/anchors/tkg-custom-ca.crt && update-ca-trust extract)'
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        value: systemctl restart containerd
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/files/-
        valueFrom:
          template: |
            path: /etc/ssl/certs/tkg-custom-ca.pem
            {{- $proxy := "" }}
            {{- range .trust.additionalTrustedCAs }}
              {{- if eq .name "proxy" }}
                {{- $proxy = .data }}
              {{- end }}
            {{- end }}
            content: {{ $proxy }}
            encoding: base64
            permissions: "0444"
    - selector:
        apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
        kind: KubeadmConfigTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - tkg-worker
      jsonPatches:
      - op: add
        path: /spec/template/spec/preKubeadmCommands/-
        value: '! which rehash_ca_certificates.sh 2>/dev/null || rehash_ca_certificates.sh'
      - op: add
        path: /spec/template/spec/preKubeadmCommands/-
        value: '! which update-ca-certificates 2>/dev/null || (mv /etc/ssl/certs/tkg-custom-ca.pem /usr/local/share/ca-certificates/tkg-custom-ca.crt && update-ca-certificates)'
      - op: add
        path: /spec/template/spec/preKubeadmCommands/-
        value: '! which update-ca-trust 2>/dev/null || (update-ca-trust force-enable && mv /etc/ssl/certs/tkg-custom-ca.pem /etc/pki/ca-trust/source/anchors/tkg-custom-ca.crt && update-ca-trust extract)'
      - op: add
        path: /spec/template/spec/preKubeadmCommands/-
        value: systemctl restart containerd
      - op: add
        path: /spec/template/spec/files/-
        valueFrom:
          template: |
            path: /etc/ssl/certs/tkg-custom-ca.pem
            {{- $proxy := "" }}
            {{- range .trust.additionalTrustedCAs }}
              {{- if eq .name "proxy" }}
                {{- $proxy = .data }}
              {{- end }}
            {{- end }}
            content: {{ $proxy }}
            encoding: base64
            permissions: "0444"
  - name: customizedImageRepo
    enabledIf: '{{ not (empty .imageRepository.host) }}'
    definitions:
    - selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
      jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        valueFrom:
          template: |
            sed -i 's|".*/pause|" {{- or .imageRepository.host (index .TKR_DATA .builtin.controlPlane.version).kubernetesSpec.imageRepository -}} /pause|' /etc/containerd/config.toml
    - selector:
        apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
        kind: KubeadmConfigTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - tkg-worker
      jsonPatches:
      - op: add
        path: /spec/template/spec/preKubeadmCommands/-
        valueFrom:
          template: |
            sed -i 's|".*/pause|" {{- or .imageRepository.host (index .TKR_DATA .builtin.machineDeployment.version).kubernetesSpec.imageRepository -}} /pause|' /etc/containerd/config.toml
  - name: registryCACert
    enabledIf: '{{ not (empty .trust.additionalTrustedCAs) }}'
    definitions:
    - selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
      jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        valueFrom:
          template: |
            {{- $host := index (or .imageRepository.host (index .TKR_DATA .builtin.controlPlane.version).kubernetesSpec.imageRepository | splitList "/") 0 -}}
            echo '[plugins."io.containerd.grpc.v1.cri".registry.configs." {{- $host -}} ".tls]' >> /etc/containerd/config.toml
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        valueFrom:
          template: |
            {{- $host := index (or .imageRepository.host (index .TKR_DATA .builtin.controlPlane.version).kubernetesSpec.imageRepository | splitList "/") 0 }}
            {{- $val := list "ca_file = \"/etc/containerd/" $host ".crt\"" | join "" }}
            {{- with .imageRepository }}
              {{- if .tlsCertificateValidation | eq false }}
                {{- $val = "insecure_skip_verify = true" }}
              {{- end }}
            {{- end -}}
            {{- define "echo" -}}
              echo '  {{ . -}} ' >> /etc/containerd/config.toml
            {{- end }}
            {{- template "echo" $val -}}
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        value: systemctl restart containerd
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/files/-
        valueFrom:
          template: |
            path: /etc/containerd/ {{- index (or .imageRepository.host (index .TKR_DATA .builtin.controlPlane.version).kubernetesSpec.imageRepository | splitList "/") 0 -}} .crt
            {{- $proxy := "" }}
            {{- $image := "" }}
            {{- range .trust.additionalTrustedCAs }}
              {{- if eq .name "proxy" }}
                {{- $proxy = .data }}
              {{- end }}
              {{- if eq .name "imageRepository" }}
                {{- $image = .data }}
              {{- end }}
            {{- end }}
            content: {{or $proxy $image}}
            encoding: base64
            permissions: "0444"
    - selector:
        apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
        kind: KubeadmConfigTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - tkg-worker
      jsonPatches:
      - op: add
        path: /spec/template/spec/preKubeadmCommands/-
        valueFrom:
          template: |
            {{- $host := index (or .imageRepository.host (index .TKR_DATA .builtin.machineDeployment.version).kubernetesSpec.imageRepository | splitList "/") 0 -}}
            echo '[plugins."io.containerd.grpc.v1.cri".registry.configs." {{- $host -}} ".tls]' >> /etc/containerd/config.toml
      - op: add
        path: /spec/template/spec/preKubeadmCommands/-
        valueFrom:
          template: |
            {{- $host := index (or .imageRepository.host (index .TKR_DATA .builtin.machineDeployment.version).kubernetesSpec.imageRepository | splitList "/") 0 }}
            {{- $val := list "ca_file = \"/etc/containerd/" $host ".crt\"" | join "" }}
            {{- with .imageRepository }}
              {{- if .tlsCertificateValidation | eq false }}
                {{- $val = "insecure_skip_verify = true" }}
              {{- end }}
            {{- end -}}
            {{- define "echo" -}}
              echo '  {{ . -}} ' >> /etc/containerd/config.toml
            {{- end }}
            {{- template "echo" $val -}}
      - op: add
        path: /spec/template/spec/preKubeadmCommands/-
        value: systemctl restart containerd
      - op: add
        path: /spec/template/spec/files/-
        valueFrom:
          template: |
            path: /etc/containerd/{{ index (or .imageRepository.host (index .TKR_DATA .builtin.machineDeployment.version).kubernetesSpec.imageRepository | splitList "/") 0 }}.crt
            {{- $proxy := "" }}
            {{- $image := "" }}
            {{- range .trust.additionalTrustedCAs }}
              {{- if eq .name "proxy" }}
                {{- $proxy = .data }}
              {{- end }}
              {{- if eq .name "imageRepository" }}
                {{- $image = .data }}
              {{- end }}
            {{- end }}
            content: {{or $proxy $image}}
            encoding: base64
            permissions: "0444"
  - name: auditLogging
    enabledIf: '{{ .auditLogging.enabled }}'
    definitions:
    - selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
      jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs/audit-log-path
        value: /var/log/kubernetes/audit.log
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs/audit-policy-file
        value: /etc/kubernetes/audit-policy.yaml
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs/audit-log-maxage
        value: "30"
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs/audit-log-maxbackup
        value: "10"
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs/audit-log-maxsize
        value: "100"
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes/-
        value:
          name: audit-policy
          hostPath: /etc/kubernetes/audit-policy.yaml
          mountPath: /etc/kubernetes/audit-policy.yaml
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes/-
        value:
          name: audit-logs
          hostPath: /var/log/kubernetes
          mountPath: /var/log/kubernetes
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/files/-
        value:
          path: /etc/kubernetes/audit-policy.yaml
          owner: "root:root"
          permissions: "0600"
          content: |
            ---
            apiVersion: audit.k8s.io/v1
            kind: Policy
            rules:
              #! The following requests were manually identified as high-volume and low-risk,
              #! so drop them.
              - level: None
                users: ["system:serviceaccount:kube-system:kube-proxy"]
                verbs: ["watch"]
                resources:
                  - group: "" #! core
                    resources: ["endpoints", "services", "services/status"]
              - level: None
                userGroups: ["system:nodes"]
                verbs: ["get"]
                resources:
                  - group: "" #! core
                    resources: ["nodes", "nodes/status"]
              - level: None
                users:
                  - system:kube-controller-manager
                  - system:kube-scheduler
                  - system:serviceaccount:kube-system:endpoint-controller
                verbs: ["get", "update"]
                namespaces: ["kube-system"]
                resources:
                  - group: "" #! core
                    resources: ["endpoints"]
              - level: None
                users: ["system:apiserver"]
                verbs: ["get"]
                resources:
                  - group: "" #! core
                    resources: ["namespaces", "namespaces/status", "namespaces/finalize"]
              #! Don't log HPA fetching metrics.
              - level: None
                users:
                  - system:kube-controller-manager
                verbs: ["get", "list"]
                resources:
                  - group: "metrics.k8s.io"
              #! Don't log these read-only URLs.
              - level: None
                nonResourceURLs:
                  - /healthz*
                  - /version
                  - /swagger*
              #! Don't log events requests.
              - level: None
                resources:
                  - group: "" #! core
                    resources: ["events"]
              #! Don't log TMC service account performing read operations because they are high-volume.
              - level: None
                userGroups: ["system:serviceaccounts:vmware-system-tmc"]
                verbs: ["get", "list", "watch"]
              #! Don't log read requests from garbage collector because they are high-volume.
              - level: None
                users: ["system:serviceaccount:kube-system:generic-garbage-collector"]
                verbs: ["get", "list", "watch"]
              #! node and pod status calls from nodes are high-volume and can be large, don't log responses for expected updates from nodes
              - level: Request
                userGroups: ["system:nodes"]
                verbs: ["update","patch"]
                resources:
                  - group: "" #! core
                    resources: ["nodes/status", "pods/status"]
                omitStages:
                  - "RequestReceived"
              #! deletecollection calls can be large, don't log responses for expected namespace deletions
              - level: Request
                users: ["system:serviceaccount:kube-system:namespace-controller"]
                verbs: ["deletecollection"]
                omitStages:
                  - "RequestReceived"
              #! Secrets, ConfigMaps, and TokenReviews can contain sensitive & binary data,
              #! so only log at the Metadata level.
              - level: Metadata
                resources:
                  - group: "" #! core
                    resources: ["secrets", "configmaps"]
                  - group: authentication.k8s.io
                    resources: ["tokenreviews"]
                omitStages:
                  - "RequestReceived"
              #! Get repsonses can be large; skip them.
              - level: Request
                verbs: ["get", "list", "watch"]
                resources:
                  - group: "" #! core
                  - group: "admissionregistration.k8s.io"
                  - group: "apiextensions.k8s.io"
                  - group: "apiregistration.k8s.io"
                  - group: "apps"
                  - group: "authentication.k8s.io"
                  - group: "authorization.k8s.io"
                  - group: "autoscaling"
                  - group: "batch"
                  - group: "certificates.k8s.io"
                  - group: "extensions"
                  - group: "metrics.k8s.io"
                  - group: "networking.k8s.io"
                  - group: "policy"
                  - group: "rbac.authorization.k8s.io"
                  - group: "settings.k8s.io"
                  - group: "storage.k8s.io"
                omitStages:
                  - "RequestReceived"
              #! Default level for known APIs
              - level: RequestResponse
                resources:
                  - group: "" #! core
                  - group: "admissionregistration.k8s.io"
                  - group: "apiextensions.k8s.io"
                  - group: "apiregistration.k8s.io"
                  - group: "apps"
                  - group: "authentication.k8s.io"
                  - group: "authorization.k8s.io"
                  - group: "autoscaling"
                  - group: "batch"
                  - group: "certificates.k8s.io"
                  - group: "extensions"
                  - group: "metrics.k8s.io"
                  - group: "networking.k8s.io"
                  - group: "policy"
                  - group: "rbac.authorization.k8s.io"
                  - group: "settings.k8s.io"
                  - group: "storage.k8s.io"
                omitStages:
                  - "RequestReceived"
              #! Default level for all other requests.
              - level: Metadata
                omitStages:
                  - "RequestReceived"
  - name: controlPlaneTaint
    enabledIf: '{{ not .controlPlaneTaint }}'
    definitions:
    - selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
      jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/initConfiguration/nodeRegistration/taints
        value: []
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/joinConfiguration/nodeRegistration/taints
        value: []
  - name: kcptCertificateRotation
    enabledIf: '{{ .controlPlaneCertificateRotation.activate }}'
    definitions:
    - selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
      jsonPatches:
      - op: add
        path: /spec/template/spec/rolloutBefore
        valueFrom:
          template: |
            certificatesExpiryDays: {{ .controlPlaneCertificateRotation.daysBefore }}
  - name: windows
    definitions:
    - selector:
        apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
        kind: KubeadmConfigTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - tkg-worker-windows
      jsonPatches:
      - op: remove
        path: /spec/template/spec/useExperimentalRetryJoin
      - op: add
        path: /spec/template/spec/joinConfiguration/nodeRegistration/criSocket
        value: npipe:////./pipe/containerd-containerd
      - op: remove
        path: /spec/template/spec/joinConfiguration/nodeRegistration/kubeletExtraArgs/tls-cipher-suites
      - op: add
        path: /spec/template/spec/joinConfiguration/nodeRegistration/kubeletExtraArgs/register-with-taints
        value: os=windows:NoSchedule
      - op: replace
        path: /spec/template/spec/joinConfiguration/nodeRegistration/name
        value: '{{ ds.meta_data.hostname }}'
      - op: replace
        path: /spec/template/spec/preKubeadmCommands
        valueFrom:
          template: |
            - echo | set /p="::1         ipv6-localhost ipv6-loopback localhost6 localhost6.localdomain6" > C:\etc\hosts & echo. >> C:\etc\hosts
            - echo | set /p="127.0.0.1   {{" {{ ds.meta_data.hostname }} "}} localhost localhost.localdomain localhost4 localhost4.localdomain4" >> C:\etc\hosts
      - op: add
        path: /spec/template/spec/files/-
        value:
          path: 'C:\k\prevent_windows_updates.ps1'
          content: |
            Set-Service -Name "wuauserv" -StartupType Disabled -Status Stopped
      - op: add
        path: /spec/template/spec/postKubeadmCommands/-
        value: powershell c:/k/prevent_windows_updates.ps1 -ExecutionPolicy Bypass
      - op: replace
        path: /spec/template/spec/users
        valueFrom:
          template: |
            - name: capv
              groups: Administrators
              sshAuthorizedKeys:
              {{- range .user.sshAuthorizedKeys }}
              - ' {{- . -}} '
              {{- end }}
              sudo: ALL=(ALL) NOPASSWD:ALL
  - name: windows-antrea
    enabledIf: '{{ .cni | eq "antrea" }}'
    definitions:
    - selector:
        apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
        kind: KubeadmConfigTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - tkg-worker-windows
      jsonPatches:
      - op: add
        path: /spec/template/spec/files/-
        value:
          path: 'C:\Temp\antrea.ps1'
          content: |
            function WaitForSaToken($KubeCfgFile, $ServiceAcctName) {
                $SaToken = $null
                $LoopCount = 400
                do {
                    $LoopCount = $LoopCount - 1
                    if ($LoopCount -eq 0) {
                        break
                    }
                    sleep 5
                    $SaToken=$(kubectl --kubeconfig=$KubeCfgFile get secrets -n kube-system -o jsonpath="{.items[?(@.metadata.annotations['kubernetes\.io/service-account\.name']=='$ServiceAcctName')].data.token}")
                } while ($SaToken -eq $null)
                return $SaToken
            }

            # Disable firewall temporarily for SSH and other internal ports access
            Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled False

            $TempFolder = 'C:\programdata\temp'
            $AntreaInTempFolder = "$TempFolder\antrea-windows-advanced.zip"
            $KubeproxyInTempFolder = "$TempFolder\kube-proxy.exe"

            # Create Folders
            $folders = @('C:\k\antrea', 'C:\var\log\antrea', 'C:\k\antrea\bin', 'C:\var\log\kube-proxy', 'C:\opt\cni\bin', 'C:\etc\cni\net.d')
            foreach ($f in $folders) {
                New-Item -ItemType Directory -Force -Path $f
            }

            # Add Windows Defender Options
            $avexceptions = @('C:\program files\containerd\ctr.exe', 'C:\program files\containerd\containerd.exe')
            foreach ($e in $avexceptions) {
                  Add-MpPreference -ExclusionProcess $e
            }

            # Extract Antrea, Antrea binary should be packed into windows OVA already
            $antreaZipFile = 'C:\k\antrea\antrea-windows-advanced.zip'
            if (!(Test-Path $antreaZipFile)) {
                cp $AntreaInTempFolder $antreaZipFile
            }
            Expand-Archive -Force -Path $antreaZipFile -DestinationPath C:\k\antrea
            cp C:\k\antrea\bin\antrea-cni.exe C:\opt\cni\bin\antrea.exe -Force
            cp C:\k\antrea\bin\host-local.exe C:\opt\cni\bin\host-local.exe -Force
            cp C:\k\antrea\etc\antrea-cni.conflist C:\etc\cni\net.d\10-antrea.conflist -Force

            # Get HostIP and set in kubeadm-flags.env
            [Environment]::SetEnvironmentVariable("NODE_NAME", (hostname).ToLower())
            $env:HostIP = (
                Get-NetIPConfiguration |
                Where-Object {
                    $_.IPv4DefaultGateway -ne $null -and $_.NetAdapter.Status -ne "Disconnected"
                }
            ).IPv4Address.IPAddress
            $file = 'C:\var\lib\kubelet\kubeadm-flags.env'
            $newstr = "--node-ip=" + $env:HostIP
            $raw = Get-Content -Path $file -TotalCount 1
            $raw = $raw -replace ".$"
            $new = "$($raw) $($newstr)`""
            Set-Content $file $new

            $KubeConfigFile = 'C:\etc\kubernetes\kubelet.conf'

            # Wait for antrea-agent token to be ready, the token will be used by Install-AntreaAgent
            $AntreaAgentToken = (WaitForSaToken $KubeConfigFile 'antrea-agent')

            # Setup Kube-Proxy config file
            $KubeProxyToken = (WaitForSaToken $KubeConfigFile 'kube-proxy-windows')
            $KubeProxyConfig = 'C:\k\antrea\etc\kube-proxy.conf'
            $KubeAPIServer = $(kubectl --kubeconfig=$KubeConfigFile config view -o jsonpath='{.clusters[0].cluster.server}')
            $KubeProxyToken = $([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($KubeProxyToken)))
            kubectl config --kubeconfig=$KubeProxyConfig set-cluster kubernetes --server=$KubeAPIServer --insecure-skip-tls-verify
            kubectl config --kubeconfig=$KubeProxyConfig set-credentials kube-proxy-windows --token=$KubeProxyToken
            kubectl config --kubeconfig=$KubeProxyConfig set-context kube-proxy-windows@kubernetes --cluster=kubernetes --user=kube-proxy-windows
            kubectl config --kubeconfig=$KubeProxyConfig use-context kube-proxy-windows@kubernetes

            # kube-proxy.exe should be packed into windows OVA
            if (!(Test-Path 'C:\k\kube-proxy.exe')) {
                cp $KubeproxyInTempFolder 'C:\k\kube-proxy.exe'
            }

            # Install antrea-agent & OVS
            Import-Module C:\k\antrea\helper.psm1
            & Install-AntreaAgent -KubernetesHome "C:\k" -KubeConfig "C:\etc\kubernetes\kubelet.conf" -AntreaHome "C:\k\antrea" -AntreaVersion "1.7.1"
            New-KubeProxyServiceInterface
            & C:\k\antrea\Install-OVS.ps1 -ImportCertificate $false -LocalFile C:\k\antrea\ovs-win64.zip

            # Setup Services
            $nssm = (Get-Command nssm).Source
            & $nssm set kubelet start SERVICE_AUTO_START
            & $nssm install kube-proxy "C:\k\kube-proxy.exe" "--proxy-mode=userspace --kubeconfig=$KubeProxyConfig --log-dir=C:\var\log\kube-proxy --logtostderr=false --alsologtostderr"
            & $nssm install antrea-agent "C:\k\antrea\bin\antrea-agent.exe" "--config=C:\k\antrea\etc\antrea-agent.conf --logtostderr=false --log_dir=C:\var\log\antrea --alsologtostderr --log_file_max_size=100 --log_file_max_num=4"
            & $nssm set antrea-agent DependOnService kube-proxy ovs-vswitchd
            & $nssm set antrea-agent Start SERVICE_AUTO_START

            # Start Services
            start-service kubelet
            start-service kube-proxy
            start-service antrea-agent
      - op: add
        path: /spec/template/spec/postKubeadmCommands/-
        value: powershell C:/Temp/antrea.ps1 -ExecutionPolicy Bypass
  - name: ntpServers
    enabledIf: '{{ not (empty .ntpServers) }}'
    definitions:
    - selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
      jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/ntp
        valueFrom:
          template: |
            enabled: true
            servers:
              {{- range .ntpServers }}
            - {{ . }}
              {{- end }}
    - selector:
        apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
        kind: KubeadmConfigTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - tkg-worker
      jsonPatches:
      - op: add
        path: /spec/template/spec/ntp
        valueFrom:
          template: |
            enabled: true
            servers:
              {{- range .ntpServers }}
            - {{ . }}
              {{- end }}
  - name: additionalFQDN
    enabledIf: '{{ not (empty .additionalFQDN) }}'
    definitions:
    - selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
      jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/certSANs
        valueFrom:
          template: |
            {{- range .additionalFQDN }}
            - {{ . }}
            {{- end }}
