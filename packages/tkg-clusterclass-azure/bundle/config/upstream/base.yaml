#@ load("@ytt:overlay", "overlay")
#@ load("@ytt:yaml", "yaml")
#@ load("@ytt:data", "data")

apiVersion: cluster.x-k8s.io/v1beta1
kind: ClusterClass
metadata:
  name: tkg-azure-default
  namespace: #@ data.values.NAMESPACE
  annotations:
    identifier.cc.vmware.com: tanzu-azure-default-0.0.1
spec:
  controlPlane:
    ref:
      apiVersion: controlplane.cluster.x-k8s.io/v1beta1
      kind: KubeadmControlPlaneTemplate
      name: tkg-kcp
    machineInfrastructure:
      ref:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: AzureMachineTemplate
        name: tkg-controlplane-azure-template
  workers:
    machineDeployments:
    - class: tkg-worker
      template:
        bootstrap:
          ref:
            apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
            kind: KubeadmConfigTemplate
            name: tkg-bootstrap-template
        infrastructure:
          ref:
            apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
            kind: AzureMachineTemplate
            name: tkg-azure-template
  infrastructure:
    ref:
      apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
      kind: AzureClusterTemplate
      name: azure-cluster-template
  variables:
  - name: location
    required: true
    schema:
      openAPIV3Schema:
        type: string
  - name: resourceGroup
    required: false
    schema:
      openAPIV3Schema:
        type: string
  - name: subscriptionID
    required: true
    schema:
      openAPIV3Schema:
        type: string
  - name: identityRef
    required: false
    schema:
      openAPIV3Schema:
        type: object
        properties:
          name:
            type: string
            default: ''
          namespace:
            type: string
            default: default
        default:
          namespace: default
  - name: environment
    required: false
    schema:
      openAPIV3Schema:
        type: string
        default: AzurePublicCloud
  - name: sshPublicKey
    required: true
    schema:
      openAPIV3Schema:
        type: string
        format: base64
  - name: acceleratedNetworking
    required: false
    schema:
      openAPIV3Schema:
        type: object
        properties:
          enabled:
            type: boolean
            default: true
        required:
        - enabled
        default:
          enabled: true
  - name: privateCluster
    required: false
    schema:
      openAPIV3Schema:
        type: object
        properties:
          enabled:
            type: boolean
            default: false
        required:
        - enabled
        default:
          enabled: false
  - name: frontendPrivateIP
    required: false
    schema:
      openAPIV3Schema:
        type: string
        default: 10.0.0.10
  - name: apiServerPort
    required: false
    schema:
      openAPIV3Schema:
        type: integer
  - name: network
    required: true
    schema:
      openAPIV3Schema:
        type: object
        properties:
          vnet:
            type: object
            properties:
              name:
                type: string
              cidrBlocks:
                type: array
                items:
                  type: string
                  format: cidr
              resourceGroup:
                type: string
            required:
            - cidrBlocks
          proxy:
            type: object
            properties:
              httpProxy:
                type: string
              httpsProxy:
                type: string
              noProxy:
                type: array
                items:
                  type: string
                default: []
            required:
            - httpProxy
            - httpsProxy
        required:
        - vnet
  - name: clusterRole
    required: true
    schema:
      openAPIV3Schema:
        type: string
  - name: controlPlane
    required: false
    schema:
      openAPIV3Schema:
        type: object
        properties:
          vmSize:
            type: string
            default: Standard_D2s_v3
          osDisk:
            type: object
            properties:
              storageAccountType:
                type: string
                default: Premium_LRS
              sizeGiB:
                type: integer
                default: 128
          dataDisk:
            type: object
            properties:
              sizeGiB:
                type: integer
                default: 256
          subnet:
            type: object
            properties:
              name:
                type: string
              cidr:
                type: string
                default: 10.0.0.0/24
              securityGroup:
                type: string
          outboundLB:
            type: object
            properties:
              enabled:
                type: boolean
                default: false
              frontendIPCount:
                type: integer
                default: 1
  - name: worker
    required: false
    schema:
      openAPIV3Schema:
        type: object
        properties:
          vmSize:
            type: string
            default: Standard_D2s_v3
          osDisk:
            type: object
            properties:
              storageAccountType:
                type: string
                default: Premium_LRS
              sizeGiB:
                type: integer
                default: 128
          dataDisks:
            type: array
            items:
              type: object
              properties:
                sizeGiB:
                  type: integer
                  default: 256
            default: []
          subnet:
            type: object
            properties:
              name:
                type: string
              cidr:
                type: string
                format: cidr
                default: 10.0.1.0/24
              securityGroup:
                type: string
          outboundLB:
            type: object
            properties:
              enabled:
                type: boolean
                default: false
              frontendIPCount:
                type: integer
                default: 1
              idleTimeoutInMinutes:
                type: integer
                default: 4
  - name: imageRepository
    required: false
    schema:
      openAPIV3Schema:
        type: object
        properties:
          host:
            type: string
          tlsCertificateValidation:
            type: boolean
            default: true
  - name: trust
    required: false
    schema:
      openAPIV3Schema:
        type: array
        items:
          type: object
          properties:
            name:
              type: string
            data:
              type: string
          required:
          - name
          - data
  - name: auditLogging
    required: false
    schema:
      openAPIV3Schema:
        type: object
        properties:
          enabled:
            type: boolean
            default: false
        required:
        - enabled
        default:
          enabled: false
  - name: customTags
    required: false
    schema:
      openAPIV3Schema:
        type: string
        default: ""
  - name: nodePoolLabels
    required: false
    schema:
      openAPIV3Schema:
        type: array
        items:
          type: object
          properties:
            key:
              type: string
            value:
              type: string
        default: []
  - name: TKR_DATA
    required: false
    schema:
      openAPIV3Schema:
        type: object
        properties: {}
  patches:
  - name: AzureClusterCustomTags
    enabledIf: '{{ not (empty .customTags) }}'
    definitions:
    - selector:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: AzureClusterTemplate
        matchResources:
          infrastructureCluster: true
      jsonPatches:
      - op: add
        path: /spec/template/spec/additionalTags
        valueFrom:
          template: |
            {{ $azureTags := split "," .customTags }} {{- range $azureTag := $azureTags }} {{- $azureTag = trim $azureTag}} {{- $azureTagSplit := split "=" $azureTag }} {{- $azureTagSplit._0 -}} : {{ $azureTagSplit._1 }}
            {{ end }}
  - name: AzureClusterIdentityRef
    enabledIf: '{{ (not (empty .identityRef.name)) | or (.clusterRole | eq "management") }}'
    definitions:
    - selector:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: AzureClusterTemplate
        matchResources:
          infrastructureCluster: true
      jsonPatches:
      - op: add
        path: /spec/template/spec/identityRef
        valueFrom:
          template: |
            apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
            kind: AzureClusterIdentity
            name: {{.builtin.cluster.name}}-identity
            namespace: tkg-system
  - name: AzureClusterIdentityName
    enabledIf: '{{ with .identityRef }} {{- all .name .namespace }} {{- else -}} false {{- end }}'
    definitions:
    - selector:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: AzureClusterTemplate
        matchResources:
          infrastructureCluster: true
      jsonPatches:
      - op: replace
        path: /spec/template/spec/identityRef/name
        valueFrom:
          variable: identityRef.name
      - op: replace
        path: /spec/template/spec/identityRef/namespace
        valueFrom:
          variable: identityRef.namespace
  - name: ACT_main
    definitions:
    - selector:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: AzureClusterTemplate
        matchResources:
          infrastructureCluster: true
      jsonPatches:
      - op: replace
        path: /spec/template/spec/azureEnvironment
        valueFrom:
          variable: environment
      - op: replace
        path: /spec/template/spec/location
        valueFrom:
          variable: location
      - op: replace
        path: /spec/template/spec/networkSpec/vnet
        valueFrom:
          template: |
            name: {{ if .network.vnet.name }} {{- .network.vnet.name }} {{- else }} {{- .builtin.cluster.name -}} -vnet {{- end }}
            resourceGroup: {{ if .network.vnet.resourceGroup }} {{- .network.vnet.resourceGroup }} {{- else if .resourceGroup }} {{- .resourceGroup }} {{- else }} {{- .builtin.cluster.name }} {{- end }}
            cidrBlocks:
              {{ range .network.vnet.cidrBlocks -}}
                - {{ . }}
              {{- end }}
      - op: replace
        path: /spec/template/spec/resourceGroup
        valueFrom:
          template: |
            {{ if .resourceGroup }} {{- .resourceGroup }} {{- else }} {{- .builtin.cluster.name }} {{- end }}
      - op: replace
        path: /spec/template/spec/subscriptionID
        valueFrom:
          variable: subscriptionID
      - op: replace
        path: /spec/template/spec/networkSpec/subnets
        valueFrom:
          template: |
            - name: '{{ .controlPlane.subnet.name | default "" }}'
              role: control-plane
              cidrBlocks: [ {{- .controlPlane.subnet.cidr -}} ]
              {{ if .controlPlane.subnet.securityGroup -}} securityGroup: {{ .controlPlane.subnet.securityGroup }} {{- end }}
            - name: '{{ .worker.subnet.name | default "" }}'
              role: node
              cidrBlocks: [ {{- .worker.subnet.cidr -}} ]
              {{ if .worker.subnet.securityGroup -}} securityGroup: {{ .worker.subnet.securityGroup }} {{- end }}
  - name: AMT_ControlPlane_Main
    definitions:
    - selector:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: AzureMachineTemplate
        matchResources:
          controlPlane: true
      jsonPatches:
      - op: replace
        path: /spec/template/spec/sshPublicKey
        valueFrom:
          variable: sshPublicKey
      - op: replace
        path: /spec/template/spec/vmSize
        valueFrom:
          variable: controlPlane.vmSize
      - op: add
        path: /spec/template/spec/acceleratedNetworking
        valueFrom:
          variable: acceleratedNetworking.enabled
      - op: replace
        path: /spec/template/spec/dataDisks
        valueFrom:
          template: |
            {{ range .controlPlane.dataDisks }}
            - diskSizeGB: {{ .sizeGiB }}
              lun: 0
              nameSuffix: etcddisk
            {{- end }}
      - op: replace
        path: /spec/template/spec/osDisk
        valueFrom:
          template: |
            osType: Linux
            diskSizeGB: {{ .controlPlane.osDisk.sizeGiB }}
            managedDisk:
              storageAccountType: {{ .controlPlane.osDisk.storageAccountType }}
      - op: replace
        path: /spec/template/spec/image
        valueFrom:
          template: |
            {{- $osImageRef := (index .TKR_DATA .builtin.controlPlane.version).osImageRef -}}
            {{- if index $osImageRef "gallery" }}
            sharedGallery:
              resourceGroup: {{ index $osImageRef "resourceGroup" }}
              name: {{ index $osImageRef "name" }}
              subscriptionID: {{ index $osImageRef "subscriptionID" }}
              gallery: {{ index $osImageRef "gallery" }}
              version: {{ index $osImageRef "version" }}
            {{- end }}
            {{- if index $osImageRef "sku" }}
            marketplace:
              sku: {{ index $osImageRef "sku" }}
              publisher: {{ index $osImageRef "publisher" }}
              offer: {{ index $osImageRef "offer" }}
              version: {{ index $osImageRef "version" }}
              thirdPartyImage: {{ index $osImageRef "thirdPartyImage" }}
            {{- end -}}
  - name: KCPT_ControlPlane_Main
    definitions:
    - selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
      jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/files/-
        valueFrom:
          template: |
            contentFrom:
              secret:
                key: control-plane-azure.json
                name: {{ .builtin.cluster.name -}} -control-plane-azure-json
            owner: root:root
            path: /etc/kubernetes/azure.json
            permissions: "0644"
      - op: replace
        path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/imageRepository
        valueFrom:
          template: '{{ (index .TKR_DATA .builtin.controlPlane.version).kubernetesSpec.imageRepository }}'
      - op: replace
        path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/etcd/local/imageRepository
        valueFrom:
          template: '{{ (index .TKR_DATA .builtin.controlPlane.version).kubernetesSpec.imageRepository }}'
      - op: replace
        path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/etcd/local/imageTag
        valueFrom:
          template: '{{ (index .TKR_DATA .builtin.controlPlane.version).kubernetesSpec.etcd.imageTag }}'
      - op: replace
        path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/dns/imageRepository
        valueFrom:
          template: '{{ (index .TKR_DATA .builtin.controlPlane.version).kubernetesSpec.imageRepository }}'
      - op: replace
        path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/dns/imageTag
        valueFrom:
          template: '{{ (index .TKR_DATA .builtin.controlPlane.version).kubernetesSpec.coredns.imageTag }}'
      - op: replace
        path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/controllerManager/extraArgs/cluster-name
        valueFrom:
          template: '{{ .builtin.cluster.name }}'

  - name: apiServerBindPort
    enabledIf: '{{ not (empty .apiServerPort) }}'
    definitions:
    - selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
      jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/initConfiguration/localAPIEndpoint
        valueFrom:
          template: |
            advertiseAddress: '0.0.0.0'
            bindPort: {{ .apiServerPort }}
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/joinConfiguration/controlPlane
        valueFrom:
          template: |
            localAPIEndpoint:
              advertiseAddress: '0.0.0.0'
              bindPort: {{ .apiServerPort }}
  - name: AMT_MachineDeployment_Main
    definitions:
    - selector:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: AzureMachineTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - tkg-worker
      jsonPatches:
      - op: replace
        path: "/spec/template/spec/sshPublicKey"
        valueFrom:
          variable: sshPublicKey
      - op: replace
        path: /spec/template/spec/vmSize
        valueFrom:
          variable: worker.vmSize
      - op: add
        path: /spec/template/spec/acceleratedNetworking
        valueFrom:
          variable: acceleratedNetworking.enabled
      - op: replace
        path: /spec/template/spec/osDisk
        valueFrom:
          template: |
            osType: Linux
            diskSizeGB: {{ .worker.osDisk.sizeGiB }}
            managedDisk:
              storageAccountType: {{ .worker.osDisk.storageAccountType }}
      - op: replace
        path: /spec/template/spec/image
        valueFrom:
          template: |
            {{- $osImageRef := (index .TKR_DATA .builtin.machineDeployment.version).osImageRef -}}
            {{- if index $osImageRef "gallery" }}
            sharedGallery:
              resourceGroup: {{ index $osImageRef "resourceGroup" }}
              name: {{ index $osImageRef "name" }}
              subscriptionID: {{ index $osImageRef "subscriptionID" }}
              gallery: {{ index $osImageRef "gallery" }}
              version: {{ index $osImageRef "version" }}
            {{- end }}
            {{- if index $osImageRef "sku" }}
            marketplace:
              sku: {{ index $osImageRef "sku" }}
              publisher: {{ index $osImageRef "publisher" }}
              offer: {{ index $osImageRef "offer" }}
              version: {{ index $osImageRef "version" }}
              thirdPartyImage: {{ index $osImageRef "thirdPartyImage" }}
            {{- end -}}
  - name: KCT_Worker_Main
    definitions:
    - selector:
        apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
        kind: KubeadmConfigTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - tkg-worker
      jsonPatches:
      - op: add
        path: /spec/template/spec/files/-
        valueFrom:
          template: |
            contentFrom:
              secret:
                key: worker-node-azure.json
                name: {{ .builtin.cluster.name -}} - {{- .builtin.machineDeployment.topologyName -}} -azure-json
            owner: root:root
            path: /etc/kubernetes/azure.json
            permissions: "0644"
  - name: enableNodeDataDisk
    enabledIf: '{{ gt (.worker.dataDisks | len) 0 }}'
    definitions:
    - selector:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: AzureMachineTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - tkg-worker
      jsonPatches:
      - op: add
        path: "/spec/template/spec/dataDisks"
        valueFrom:
          template: |
            {{ range .worker.dataDisks -}}
            - diskSizeGB: {{ .sizeGiB }}
              lun: 0
              nameSuffix: nodedisk
            {{- end }}
    - selector:
        apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
        kind: KubeadmConfigTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - tkg-worker
      jsonPatches:
      - op: add
        path: /spec/template/spec/diskSetup
        valueFrom:
          template: |
            filesystems:
            - device: /dev/disk/azure/scsi1/lun0
              extraOpts:
              - -E
              - lazy_itable_init=1,lazy_journal_init=1
              filesystem: ext4
              label: node_disk
            partitions:
            - device: /dev/disk/azure/scsi1/lun0
              layout: true
              overwrite: false
              tableType: gpt
      - op: add
        path: /spec/template/spec/mounts
        valueFrom:
          template: |
            - - LABEL=node_disk
              - /var/lib/nodedisk
  - name: ACT_EnablePrivateCluster
    enabledIf: '{{ .privateCluster.enabled }}'
    definitions:
    - selector:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: AzureClusterTemplate
        matchResources:
          infrastructureCluster: true
      jsonPatches:
      - op: add
        path: /spec/template/spec/networkSpec/apiServerLB
        valueFrom:
          template: |
            type: Internal
            frontendIPs:
            - name: lb- {{- .builtin.cluster.name -}} -ip-frontend
              privateIP: {{ .frontendPrivateIP }}
    - selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
      jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands
        valueFrom:
          template: |
            - "if [ -f /tmp/kubeadm.yaml ] || [ -f /run/kubeadm/kubeadm.yaml ]; then echo '127.0.0.1   apiserver. {{- .builtin.cluster.name -}} .capz.io apiserver' >> /etc/hosts; fi"
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/postKubeadmCommands
        valueFrom:
          template: |
            - "if [ -f /tmp/kubeadm-join-config.yaml ] || [ -f /run/kubeadm/kubeadm-join-config.yaml ]; then echo '127.0.0.1   apiserver. {{- .builtin.cluster.name -}} .capz.io apiserver' >> /etc/hosts; fi"
  - name: ACT_EnableControlPlaneOutboundLB
    enabledIf: '{{ and .privateCluster.enabled .controlPlane.outboundLB.enabled }}'
    definitions:
    - selector:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: AzureClusterTemplate
        matchResources:
          infrastructureCluster: true
      jsonPatches:
      - op: add
        path: /spec/template/spec/networkSpec/controlPlaneOutboundLB
        valueFrom:
          template: |
            frontendIPsCount: {{ .controlPlane.outboundLB.frontendIPCount }}
  - name: ACT_EnableNodeOutboundLB
    enabledIf: '{{ and .privateCluster.enabled .worker.outboundLB.enabled }}'
    definitions:
    - selector:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: AzureClusterTemplate
        matchResources:
          infrastructureCluster: true
      jsonPatches:
      - op: add
        path: /spec/template/spec/networkSpec/nodeOutboundLB
        valueFrom:
          template: |
            frontendIPsCount: {{ .worker.outboundLB.frontendIPCount }}
            idleTimeoutInMinutes: {{ .worker.outboundLB.idleTimeoutInMinutes }}
  - name: nodeLabels
    definitions:
    - selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
      jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/joinConfiguration/nodeRegistration/kubeletExtraArgs/node-labels
        valueFrom:
          template: |
            {{ $first := true }}
            {{- range $key, $val := (index .TKR_DATA .builtin.controlPlane.version).labels }}
            {{- if $first }}
              {{- $first = false }}
            {{- else -}}
              ,
            {{- end }}
            {{- $key -}} = {{- $val }}
            {{- end }}
    - selector:
        apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
        kind: KubeadmConfigTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - "tkg-worker"
      jsonPatches:
      - op: add
        path: /spec/template/spec/joinConfiguration/nodeRegistration/kubeletExtraArgs/node-labels
        valueFrom:
          template: |
            {{ $first := true }}
            {{- range $key, $val := (index .TKR_DATA .builtin.machineDeployment.version).labels }}
            {{- if $first }}
              {{- $first = false }}
            {{- else -}}
              ,
            {{- end }}
            {{- $key -}} = {{- $val }}
            {{- end}}
            {{- if .nodePoolLabels -}}
              ,
              {{- $first := true }}
              {{- range .nodePoolLabels }}
                {{- if $first }}
                  {{- $first = false }}
                {{- else -}}
                  ,
                {{- end }}
                {{- .key -}} = {{- .value -}}
              {{ end }}
            {{ end }}
  - name: httpProxy
    enabledIf: '{{ not (empty .network.proxy) }}'
    definitions:
    - selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
      jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/files/-
        valueFrom:
          template: &containerdProxyConf |
            content: |
              [Service]
              Environment="HTTP_PROXY= {{- .network.proxy.httpProxy -}} "
              Environment="HTTPS_PROXY= {{- .network.proxy.httpsProxy -}} "
              Environment="NO_PROXY= {{- list .network.vnet.cidr "169.254.0.0/16" "168.63.129.16" "localhost" "127.0.0.1" ".svc" ".svc.cluster.local" | concat .network.proxy.noProxy .builtin.cluster.network.services .builtin.cluster.network.pods | uniq | sortAlpha | join "," -}} "
            owner: root:root
            path: /etc/systemd/system/containerd.service.d/http-proxy.conf
            permissions: "0640"
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/files/-
        valueFrom:
          template: &kubeletProxyConf |
            content: |
              [Service]
              Environment="HTTP_PROXY= {{- .network.proxy.httpProxy -}} "
              Environment="HTTPS_PROXY= {{- .network.proxy.httpsProxy -}} "
              Environment="NO_PROXY= {{- list .network.vnet.cidr "169.254.0.0/16" "168.63.129.16" "localhost" "127.0.0.1" ".svc" ".svc.cluster.local" | concat .network.proxy.noProxy .builtin.cluster.network.services .builtin.cluster.network.pods | uniq | sortAlpha | join "," -}} "
            owner: root:root
            path: /usr/lib/systemd/system/kubelet.service.d/http-proxy.conf
            permissions: "0640"
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        value: systemctl daemon-reload
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        value: systemctl stop containerd
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        value: systemctl start containerd
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        valueFrom:
          template: &exportHTTPProxy |
            export HTTP_PROXY= {{- .network.proxy.httpProxy }}
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        valueFrom:
          template: &exportHTTPSProxy |
            export HTTPS_PROXY= {{- .network.proxy.httpsProxy }}
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        valueFrom:
          template: &exportNoProxy |
            export NO_PROXY= {{- list .network.vnet.cidr "169.254.0.0/16" "168.63.129.16" "localhost" "127.0.0.1" ".svc" ".svc.cluster.local" | concat .network.proxy.noProxy .builtin.cluster.network.services .builtin.cluster.network.pods | uniq | sortAlpha | join "," }}
    - selector:
        apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
        kind: KubeadmConfigTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - tkg-worker
      jsonPatches:
      - op: add
        path: /spec/template/spec/files/-
        valueFrom:
          template: *containerdProxyConf
      - op: add
        path: /spec/template/spec/files/-
        valueFrom:
          template: *kubeletProxyConf
      - op: add
        path: /spec/template/spec/preKubeadmCommands/-
        value: systemctl daemon-reload
      - op: add
        path: /spec/template/spec/preKubeadmCommands/-
        value: systemctl restart containerd
      - op: add
        path: /spec/template/spec/preKubeadmCommands/-
        valueFrom:
          template: *exportHTTPProxy
      - op: add
        path: /spec/template/spec/preKubeadmCommands/-
        valueFrom:
          template: *exportHTTPSProxy
      - op: add
        path: /spec/template/spec/preKubeadmCommands/-
        valueFrom:
          template: *exportNoProxy
  - name: httpProxyCACert
    enabledIf: '{{ $hasProxyCert := false }} {{- range .trust }} {{- if .name | eq "proxy" }} {{- $hasProxyCert = true }} {{- end }} {{- end }} {{- $hasProxyCert }}'
    definitions:
    - selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
      jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        value: '! which rehash_ca_certificates.sh 2>/dev/null || rehash_ca_certificates.sh'
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        value: '! which update-ca-certificates 2>/dev/null || (mv /etc/ssl/certs/tkg-custom-ca.pem /usr/local/share/ca-certificates/tkg-custom-ca.crt && update-ca-certificates)'
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        value: '! which update-ca-trust 2>/dev/null || (update-ca-trust force-enable && mv /etc/ssl/certs/tkg-custom-ca.pem /etc/pki/ca-trust/source/anchors/tkg-custom-ca.crt && update-ca-trust extract)'
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        value: systemctl restart containerd
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/files/-
        valueFrom:
          template: |
            path: /etc/ssl/certs/tkg-custom-ca.pem
            {{- $proxy := "" }}
            {{- range .trust }}
              {{- if eq .name "proxy" }}
                {{- $proxy = .data }}
              {{- end }}
            {{- end }}
            content: {{ $proxy }}
            encoding: base64
            permissions: "0444"
    - selector:
        apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
        kind: KubeadmConfigTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - tkg-worker
      jsonPatches:
      - op: add
        path: /spec/template/spec/preKubeadmCommands/-
        value: '! which rehash_ca_certificates.sh 2>/dev/null || rehash_ca_certificates.sh'
      - op: add
        path: /spec/template/spec/preKubeadmCommands/-
        value: '! which update-ca-certificates 2>/dev/null || (mv /etc/ssl/certs/tkg-custom-ca.pem /usr/local/share/ca-certificates/tkg-custom-ca.crt && update-ca-certificates)'
      - op: add
        path: /spec/template/spec/preKubeadmCommands/-
        value: '! which update-ca-trust 2>/dev/null || (update-ca-trust force-enable && mv /etc/ssl/certs/tkg-custom-ca.pem /etc/pki/ca-trust/source/anchors/tkg-custom-ca.crt && update-ca-trust extract)'
      - op: add
        path: /spec/template/spec/preKubeadmCommands/-
        value: systemctl restart containerd
      - op: add
        path: /spec/template/spec/files/-
        valueFrom:
          template: |
            path: /etc/ssl/certs/tkg-custom-ca.pem
            {{- $proxy := "" }}
            {{- range .trust }}
              {{- if eq .name "proxy" }}
                {{- $proxy = .data }}
              {{- end }}
            {{- end }}
            content: {{ $proxy }}
            encoding: base64
            permissions: "0444"
  - name: customizedImageRepo
    enabledIf: '{{ not (empty .imageRepository.host) }}'
    definitions:
    - selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
      jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        valueFrom:
          template: |
            sed -i 's|".*/pause|" {{- or .imageRepository.host (index .TKR_DATA .builtin.controlPlane.version).kubernetesSpec.imageRepository -}} /pause|' /etc/containerd/config.toml
    - selector:
        apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
        kind: KubeadmConfigTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - tkg-worker
      jsonPatches:
      - op: add
        path: /spec/template/spec/preKubeadmCommands/-
        valueFrom:
          template: |
            sed -i 's|".*/pause|" {{- or .imageRepository.host (index .TKR_DATA .builtin.machineDeployment.version).kubernetesSpec.imageRepository -}} /pause|' /etc/containerd/config.toml
  - name: registryCACert
    enabledIf: '{{ not (empty .trust) }}'
    definitions:
    - selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
      jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        valueFrom:
          template: |
            {{- $host := index (or .imageRepository.host (index .TKR_DATA .builtin.controlPlane.version).kubernetesSpec.imageRepository | splitList "/") 0 -}}
            echo '[plugins."io.containerd.grpc.v1.cri".registry.configs." {{- $host -}} ".tls]' >> /etc/containerd/config.toml
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        valueFrom:
          template: |
            {{- $host := index (or .imageRepository.host (index .TKR_DATA .builtin.controlPlane.version).kubernetesSpec.imageRepository | splitList "/") 0 }}
            {{- $val := list "ca_file = \"/etc/containerd/" $host ".crt\"" | join "" }}
            {{- with .imageRepository }}
              {{- if .tlsCertificateValidation | eq false }}
                {{- $val = "insecure_skip_verify = true" }}
              {{- end }}
            {{- end -}}
            {{- define "echo" -}}
              echo '  {{ . -}} ' >> /etc/containerd/config.toml
            {{- end }}
            {{- template "echo" $val -}}
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        value: systemctl restart containerd
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/files/-
        valueFrom:
          template: |
            path: /etc/containerd/ {{- index (or .imageRepository.host (index .TKR_DATA .builtin.controlPlane.version).kubernetesSpec.imageRepository | splitList "/") 0 -}} .crt
            {{- $proxy := "" }}
            {{- $image := "" }}
            {{- range .trust }}
              {{- if eq .name "proxy" }}
                {{- $proxy = .data }}
              {{- end }}
              {{- if eq .name "imageRepository" }}
                {{- $image = .data }}
              {{- end }}
            {{- end }}
            content: {{or $proxy $image}}
            encoding: base64
            permissions: "0444"
    - selector:
        apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
        kind: KubeadmConfigTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - tkg-worker
      jsonPatches:
      - op: add
        path: /spec/template/spec/preKubeadmCommands/-
        valueFrom:
          template: |
            {{- $host := index (or .imageRepository.host (index .TKR_DATA .builtin.machineDeployment.version).kubernetesSpec.imageRepository | splitList "/") 0 -}}
            echo '[plugins."io.containerd.grpc.v1.cri".registry.configs." {{- $host -}} ".tls]' >> /etc/containerd/config.toml
      - op: add
        path: /spec/template/spec/preKubeadmCommands/-
        valueFrom:
          template: |
            {{- $host := index (or .imageRepository.host (index .TKR_DATA .builtin.machineDeployment.version).kubernetesSpec.imageRepository | splitList "/") 0 }}
            {{- $val := list "ca_file = \"/etc/containerd/" $host ".crt\"" | join "" }}
            {{- with .imageRepository }}
              {{- if .tlsCertificateValidation | eq false }}
                {{- $val = "insecure_skip_verify = true" }}
              {{- end }}
            {{- end -}}
            {{- define "echo" -}}
              echo '  {{ . -}} ' >> /etc/containerd/config.toml
            {{- end }}
            {{- template "echo" $val -}}
      - op: add
        path: /spec/template/spec/preKubeadmCommands/-
        value: systemctl restart containerd
      - op: add
        path: /spec/template/spec/files/-
        valueFrom:
          template: |
            path: /etc/containerd/{{ index (or .imageRepository.host (index .TKR_DATA .builtin.machineDeployment.version).kubernetesSpec.imageRepository | splitList "/") 0 }}.crt
            {{- $proxy := "" }}
            {{- $image := "" }}
            {{- range .trust }}
              {{- if eq .name "proxy" }}
                {{- $proxy = .data }}
              {{- end }}
              {{- if eq .name "imageRepository" }}
                {{- $image = .data }}
              {{- end }}
            {{- end }}
            content: {{or $proxy $image}}
            encoding: base64
            permissions: "0444"
  - name: auditLogging
    enabledIf: '{{ .auditLogging.enabled }}'
    definitions:
    - selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
      jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs/-
        value:
          audit-log-path: /var/log/kubernetes/audit.log
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs/-
        value:
          audit-policy-file: /etc/kubernetes/audit-policy.yaml
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs/-
        value:
          audit-log-maxage: "30"
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs/-
        value:
          audit-log-maxbackup: "10"
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs/-
        value:
          audit-log-maxsize: "100"
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes/-
        value:
          name: audit-policy
          hostPath: /etc/kubernetes/audit-policy.yaml
          mountPath: /etc/kubernetes/audit-policy.yaml
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes/-
        value:
          name: audit-logs
          hostPath: /var/log/kubernetes
          mountPath: /var/log/kubernetes
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/files/-
        value:
          path: /etc/kubernetes/audit-policy.yaml
          owner: "root:root"
          permissions: "0600"
          content: |
            ---
            apiVersion: audit.k8s.io/v1beta1
            kind: Policy
            rules:
              #! The following requests were manually identified as high-volume and low-risk,
              #! so drop them.
              - level: None
                users: ["system:serviceaccount:kube-system:kube-proxy"]
                verbs: ["watch"]
                resources:
                  - group: "" #! core
                    resources: ["endpoints", "services", "services/status"]
              - level: None
                userGroups: ["system:nodes"]
                verbs: ["get"]
                resources:
                  - group: "" #! core
                    resources: ["nodes", "nodes/status"]
              - level: None
                users:
                  - system:kube-controller-manager
                  - system:kube-scheduler
                  - system:serviceaccount:kube-system:endpoint-controller
                verbs: ["get", "update"]
                namespaces: ["kube-system"]
                resources:
                  - group: "" #! core
                    resources: ["endpoints"]
              - level: None
                users: ["system:apiserver"]
                verbs: ["get"]
                resources:
                  - group: "" #! core
                    resources: ["namespaces", "namespaces/status", "namespaces/finalize"]
              #! Don't log HPA fetching metrics.
              - level: None
                users:
                  - system:kube-controller-manager
                verbs: ["get", "list"]
                resources:
                  - group: "metrics.k8s.io"
              #! Don't log these read-only URLs.
              - level: None
                nonResourceURLs:
                  - /healthz*
                  - /version
                  - /swagger*
              #! Don't log events requests.
              - level: None
                resources:
                  - group: "" #! core
                    resources: ["events"]
              #! Don't log TMC service account performing read operations because they are high-volume.
              - level: None
                userGroups: ["system:serviceaccounts:vmware-system-tmc"]
                verbs: ["get", "list", "watch"]
              #! Don't log read requests from garbage collector because they are high-volume.
              - level: None
                users: ["system:serviceaccount:kube-system:generic-garbage-collector"]
                verbs: ["get", "list", "watch"]
              #! node and pod status calls from nodes are high-volume and can be large, don't log responses for expected updates from nodes
              - level: Request
                userGroups: ["system:nodes"]
                verbs: ["update","patch"]
                resources:
                  - group: "" #! core
                    resources: ["nodes/status", "pods/status"]
                omitStages:
                  - "RequestReceived"
              #! deletecollection calls can be large, don't log responses for expected namespace deletions
              - level: Request
                users: ["system:serviceaccount:kube-system:namespace-controller"]
                verbs: ["deletecollection"]
                omitStages:
                  - "RequestReceived"
              #! Secrets, ConfigMaps, and TokenReviews can contain sensitive & binary data,
              #! so only log at the Metadata level.
              - level: Metadata
                resources:
                  - group: "" #! core
                    resources: ["secrets", "configmaps"]
                  - group: authentication.k8s.io
                    resources: ["tokenreviews"]
                omitStages:
                  - "RequestReceived"
              #! Get repsonses can be large; skip them.
              - level: Request
                verbs: ["get", "list", "watch"]
                resources:
                  - group: "" #! core
                  - group: "admissionregistration.k8s.io"
                  - group: "apiextensions.k8s.io"
                  - group: "apiregistration.k8s.io"
                  - group: "apps"
                  - group: "authentication.k8s.io"
                  - group: "authorization.k8s.io"
                  - group: "autoscaling"
                  - group: "batch"
                  - group: "certificates.k8s.io"
                  - group: "extensions"
                  - group: "metrics.k8s.io"
                  - group: "networking.k8s.io"
                  - group: "policy"
                  - group: "rbac.authorization.k8s.io"
                  - group: "settings.k8s.io"
                  - group: "storage.k8s.io"
                omitStages:
                  - "RequestReceived"
              #! Default level for known APIs
              - level: RequestResponse
                resources:
                  - group: "" #! core
                  - group: "admissionregistration.k8s.io"
                  - group: "apiextensions.k8s.io"
                  - group: "apiregistration.k8s.io"
                  - group: "apps"
                  - group: "authentication.k8s.io"
                  - group: "authorization.k8s.io"
                  - group: "autoscaling"
                  - group: "batch"
                  - group: "certificates.k8s.io"
                  - group: "extensions"
                  - group: "metrics.k8s.io"
                  - group: "networking.k8s.io"
                  - group: "policy"
                  - group: "rbac.authorization.k8s.io"
                  - group: "settings.k8s.io"
                  - group: "storage.k8s.io"
                omitStages:
                  - "RequestReceived"
              #! Default level for all other requests.
              - level: Metadata
                omitStages:
                  - "RequestReceived"
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AzureClusterTemplate
metadata:
  name: azure-cluster-template
  namespace: #@ data.values.NAMESPACE
spec:
  template:
    spec:
      azureEnvironment: ${AZURE_ENVIRONMENT}
      location: ${AZURE_LOCATION}
      networkSpec:
        vnet:
          name: "${AZURE_VNET_NAME:=${CLUSTER_NAME}-vnet}"
          resourceGroup: ${AZURE_VNET_RESOURCE_GROUP:=${CLUSTER_NAME}}
          cidrBlock: ${AZURE_VNET_CIDR}
        subnets:
        - name: ${AZURE_CONTROL_PLANE_SUBNET_NAME}
          role: control-plane
          cidrBlock: ${AZURE_CONTROL_PLANE_SUBNET_CIDR}
        - name: ${AZURE_NODE_SUBNET_NAME}
          role: node
          cidrBlock: ${AZURE_NODE_SUBNET_CIDR}
      resourceGroup: ${AZURE_RESOURCE_GROUP:=${CLUSTER_NAME}}
      subscriptionID: ${AZURE_SUBSCRIPTION_ID}
---
apiVersion: controlplane.cluster.x-k8s.io/v1beta1
kind: KubeadmControlPlaneTemplate
metadata:
  name: tkg-kcp
  namespace: #@ data.values.NAMESPACE
spec:
  template:
    spec:
      kubeadmConfigSpec:
        clusterConfiguration:
          apiServer:
            extraArgs:
              cloud-config: /etc/kubernetes/azure.json
              cloud-provider: azure
            extraVolumes:
            - hostPath: /etc/kubernetes/azure.json
              mountPath: /etc/kubernetes/azure.json
              name: cloud-config
              readOnly: true
            timeoutForControlPlane: 20m
          controllerManager:
            extraArgs:
              allocate-node-cidrs: "true"
              cloud-config: /etc/kubernetes/azure.json
              cloud-provider: azure
              cluster-name: ${CLUSTER_NAME}
            extraVolumes:
            - hostPath: /etc/kubernetes/azure.json
              mountPath: /etc/kubernetes/azure.json
              name: cloud-config
              readOnly: true
          dns:
            imageRepository: #! e.g. registry.tkg.vmware.run
            imageTag: #! e.g. v1.6.5_vmware.4
          etcd:
            local:
              dataDir: /var/lib/etcddisk/etcd
              extraArgs:
                cipher-suites: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
                quota-backend-bytes: "8589934592"
              imageRepository: #! e.g. registry.tkg.vmware.run
              imageTag: #! e.g v3.4.3_vmware.4
          imageRepository: #! e.g. registry.tkg.vmware.run
        diskSetup:
          filesystems:
          - device: /dev/disk/azure/scsi1/lun0
            extraOpts:
            - -E
            - lazy_itable_init=1,lazy_journal_init=1
            filesystem: ext4
            label: etcd_disk
          - device: ephemeral0.1
            filesystem: ext4
            label: ephemeral0
            replaceFS: ntfs
          partitions:
          - device: /dev/disk/azure/scsi1/lun0
            layout: true
            overwrite: false
            tableType: gpt
        files: []
        initConfiguration:
          nodeRegistration:
            criSocket: /var/run/containerd/containerd.sock
            kubeletExtraArgs:
              azure-container-registry-config: /etc/kubernetes/azure.json
              cloud-config: /etc/kubernetes/azure.json
              cloud-provider: azure
            name: '{{ ds.meta_data["local_hostname"] }}'
        joinConfiguration:
          nodeRegistration:
            criSocket: /var/run/containerd/containerd.sock
            kubeletExtraArgs:
              azure-container-registry-config: /etc/kubernetes/azure.json
              cloud-config: /etc/kubernetes/azure.json
              cloud-provider: azure
            name: '{{ ds.meta_data["local_hostname"] }}'
        mounts:
        - - LABEL=etcd_disk
          - /var/lib/etcddisk
        useExperimentalRetryJoin: true
        postKubeadmCommands: []
        preKubeadmCommands:
        #! Ensure a non-empty preKubeadmCommands array is present to facilitate patching
        - echo "running preKubeadmCommands…"
      machineTemplate:
        infrastructureRef:
          apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
          kind: AzureMachineTemplate
          name: tkg-control-plane
      replicas: ${CONTROL_PLANE_MACHINE_COUNT}
      version: ${KUBERNETES_VERSION}

---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AzureMachineTemplate
metadata:
  name: tkg-controlplane-azure-template
  namespace: #@ data.values.NAMESPACE
spec:
  template:
    spec:
      dataDisks:
      - diskSizeGB: 256
        lun: 0
        nameSuffix: etcddisk
      image:
        marketplace:
      osDisk:
        diskSizeGB: 128
        managedDisk:
          storageAccountType: Premium_LRS
        osType: Linux
      sshPublicKey: ${AZURE_SSH_PUBLIC_KEY_B64:=""}
      vmSize: ${AZURE_CONTROL_PLANE_MACHINE_TYPE}
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: AzureMachineTemplate
metadata:
  name: tkg-azure-template
  namespace: #@ data.values.NAMESPACE
spec:
  template:
    spec:
      osDisk:
        diskSizeGB: 128
        managedDisk:
          storageAccountType: Premium_LRS
        osType: Linux
      image:
        marketplace:
      sshPublicKey: ${AZURE_SSH_PUBLIC_KEY_B64:=""}
      vmSize: ${AZURE_NODE_MACHINE_TYPE}

---
apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
kind: KubeadmConfigTemplate
metadata:
  name: tkg-bootstrap-template
  namespace: #@ data.values.NAMESPACE
spec:
  template:
    spec:
      files: []
      joinConfiguration:
        nodeRegistration:
          criSocket: /var/run/containerd/containerd.sock
          kubeletExtraArgs:
            azure-container-registry-config: /etc/kubernetes/azure.json
            cloud-config: /etc/kubernetes/azure.json
            cloud-provider: azure
          name: '{{ ds.meta_data["local_hostname"] }}'
      useExperimentalRetryJoin: true
      preKubeadmCommands: []
