#@ load("@ytt:data", "data")
#@ load("@ytt:yaml", "yaml")

#@ def get_unsupported_ns():
#@   unsupported_ns = "(cert-manager, kube-node-lease, kube-public, kube-system, tanzu-auth, tkg-system-public, tkg-system-telemetry, tkr-system)"
#@   return "!cluster.x-k8s.io/provider, kubernetes.io/metadata.name notin " + unsupported_ns
#@ end

#@ def getObjectPropagationConfig():

#! generic resources from CAPI
- source:
    apiVersion: cluster.x-k8s.io/v1beta1
    kind: ClusterClass
    namespace: #@ data.values.namespaceForPackageInstallation
    labelSelector: ''
  target:
    namespaceLabelSelector: #@ get_unsupported_ns()
    detectAndReplaceSourceNSRef: true
- source:
    apiVersion: controlplane.cluster.x-k8s.io/v1beta1
    kind: KubeadmControlPlaneTemplate
    namespace: #@ data.values.namespaceForPackageInstallation
    labelSelector: ''
  target:
    namespaceLabelSelector: #@ get_unsupported_ns()
    detectAndReplaceSourceNSRef: true
- source:
    apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
    kind: KubeadmConfigTemplate
    namespace: #@ data.values.namespaceForPackageInstallation
    labelSelector: '!topology.cluster.x-k8s.io/owned'
  target:
    namespaceLabelSelector: #@ get_unsupported_ns()
    detectAndReplaceSourceNSRef: true

#@ if data.values.clusterclassInfraPackageValues.infraProvider == "docker":
#! Docker infra specific resources
- source:
    apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
    kind: DockerClusterTemplate
    namespace: #@ data.values.namespaceForPackageInstallation
    labelSelector: ''
  target:
    namespaceLabelSelector: #@ get_unsupported_ns()
    detectAndReplaceSourceNSRef: true
- source:
    apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
    kind: DockerMachineTemplate
    namespace: #@ data.values.namespaceForPackageInstallation
    labelSelector: '!topology.cluster.x-k8s.io/owned'
  target:
    namespaceLabelSelector: #@ get_unsupported_ns()
    detectAndReplaceSourceNSRef: true
#@ end

#@ if data.values.clusterclassInfraPackageValues.infraProvider == "aws":
#! AWS infra specific resources
- source:
    apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
    kind: AWSClusterTemplate
    namespace: #@ data.values.namespaceForPackageInstallation
    labelSelector: ''
  target:
    namespaceLabelSelector: #@ get_unsupported_ns()
    detectAndReplaceSourceNSRef: true
- source:
    apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
    kind: AWSMachineTemplate
    namespace: #@ data.values.namespaceForPackageInstallation
    labelSelector: '!topology.cluster.x-k8s.io/owned'
  target:
    namespaceLabelSelector: #@ get_unsupported_ns()
    detectAndReplaceSourceNSRef: true
#@ end

#@ if data.values.clusterclassInfraPackageValues.infraProvider == "azure":
#! Azure infra specific resources
- source:
    apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
    kind: AzureClusterTemplate
    namespace: #@ data.values.namespaceForPackageInstallation
    labelSelector: ''
  target:
    namespaceLabelSelector: #@ get_unsupported_ns()
    detectAndReplaceSourceNSRef: true
- source:
    apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
    kind: AzureMachineTemplate
    namespace: #@ data.values.namespaceForPackageInstallation
    labelSelector: '!topology.cluster.x-k8s.io/owned'
  target:
    namespaceLabelSelector: #@ get_unsupported_ns()
    detectAndReplaceSourceNSRef: true
#@ end


#@ if data.values.clusterclassInfraPackageValues.infraProvider == "oci":
#! Oracle Cloud infra specific resources
- source:
    apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
    kind: OCIClusterTemplate
    namespace: #@ data.values.namespaceForPackageInstallation
    labelSelector: ''
  target:
    namespaceLabelSelector: #@ get_unsupported_ns()
    detectAndReplaceSourceNSRef: true
- source:
    apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
    kind: OCIMachineTemplate
    namespace: #@ data.values.namespaceForPackageInstallation
    labelSelector: ''
  target:
    namespaceLabelSelector: #@ get_unsupported_ns()
    detectAndReplaceSourceNSRef: true
#@ end

#@ if data.values.clusterclassInfraPackageValues.infraProvider == "vsphere":
#! vSphere infra specific resources
- source:
    apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
    kind: VSphereClusterTemplate
    namespace: #@ data.values.namespaceForPackageInstallation
    labelSelector: ''
  target:
    namespaceLabelSelector: #@ get_unsupported_ns()
    detectAndReplaceSourceNSRef: true
- source:
    apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
    kind: VSphereMachineTemplate
    namespace: #@ data.values.namespaceForPackageInstallation
    labelSelector: '!topology.cluster.x-k8s.io/owned'
  target:
    namespaceLabelSelector: #@ get_unsupported_ns()
    detectAndReplaceSourceNSRef: true
#@ end

#@ end

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: object-propagation-config
  namespace: #@ data.values.namespaceForPackageInstallation
  annotations:
    kapp.k14s.io/change-group: "object-propagation-controller.tanzu.vmware.com/ConfigMap"
data:
  configData: #@ yaml.encode(getObjectPropagationConfig())
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: object-propagation-controller
  name: object-propagation-controller-manager
  namespace: #@ data.values.namespaceForPackageInstallation
  annotations:
    kapp.k14s.io/change-rule.0: "upsert after upserting object-propagation-controller.tanzu.vmware.com/ClusterRoleBinding"
    kapp.k14s.io/change-rule.1: "delete before deleting object-propagation-controller.tanzu.vmware.com/ClusterRoleBinding"
    kapp.k14s.io/change-rule.2: "upsert after upserting object-propagation-controller.tanzu.vmware.com/ConfigMap"
    kapp.k14s.io/change-rule.3: "delete before deleting object-propagation-controller.tanzu.vmware.com/ConfigMap"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: object-propagation-controller
  template:
    metadata:
      labels:
        app: object-propagation-controller
    spec:
      containers:
      - image: object-propagation-controller:latest
        imagePullPolicy: IfNotPresent
        name: manager
        command:
        - /manager
        args:
        - --metrics-bind-addr=0
        - --input=/dev/config/object-propagation-controller.config
        resources:
          limits:
            cpu: 100m
            memory: 200Mi
          requests:
            cpu: 100m
            memory: 40Mi
        volumeMounts:
          - name: config-mnt
            mountPath: /dev/config/object-propagation-controller.config
            subPath: configData
      serviceAccount: object-propagation-controller-manager-sa
      terminationGracePeriodSeconds: 10
      volumes:
      - name: config-mnt
        configMap:
          name: object-propagation-config
