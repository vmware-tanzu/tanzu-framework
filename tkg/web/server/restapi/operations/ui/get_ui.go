// Code generated by go-swagger; DO NOT EDIT.

package ui

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetUIHandlerFunc turns a function with the right signature into a get UI handler
type GetUIHandlerFunc func(GetUIParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetUIHandlerFunc) Handle(params GetUIParams) middleware.Responder {
	return fn(params)
}

// GetUIHandler interface for that can handle valid get UI params
type GetUIHandler interface {
	Handle(GetUIParams) middleware.Responder
}

// NewGetUI creates a new http.Handler for the get UI operation
func NewGetUI(ctx *middleware.Context, handler GetUIHandler) *GetUI {
	return &GetUI{Context: ctx, Handler: handler}
}

/*GetUI swagger:route GET / ui getUi

Get the kickstart UI

*/
type GetUI struct {
	Context *middleware.Context
	Handler GetUIHandler
}

func (o *GetUI) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetUIParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
