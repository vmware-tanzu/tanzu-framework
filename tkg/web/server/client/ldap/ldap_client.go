// Code generated by go-swagger; DO NOT EDIT.

package ldap

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new ldap API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for ldap API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
VerifyLdapBind validates l d a p bind or authentication
*/
func (a *Client) VerifyLdapBind(params *VerifyLdapBindParams) (*VerifyLdapBindOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVerifyLdapBindParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "verifyLdapBind",
		Method:             "POST",
		PathPattern:        "/api/ldap/bind",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &VerifyLdapBindReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VerifyLdapBindOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for verifyLdapBind: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
VerifyLdapCloseConnection validates if the l d a p connection can be closed
*/
func (a *Client) VerifyLdapCloseConnection(params *VerifyLdapCloseConnectionParams) (*VerifyLdapCloseConnectionCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVerifyLdapCloseConnectionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "verifyLdapCloseConnection",
		Method:             "POST",
		PathPattern:        "/api/ldap/disconnect",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &VerifyLdapCloseConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VerifyLdapCloseConnectionCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for verifyLdapCloseConnection: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
VerifyLdapConnect validates l d a p connection
*/
func (a *Client) VerifyLdapConnect(params *VerifyLdapConnectParams) (*VerifyLdapConnectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVerifyLdapConnectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "verifyLdapConnect",
		Method:             "POST",
		PathPattern:        "/api/ldap/connect",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &VerifyLdapConnectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VerifyLdapConnectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for verifyLdapConnect: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
VerifyLdapGroupSearch validates l d a p group search configuration
*/
func (a *Client) VerifyLdapGroupSearch(params *VerifyLdapGroupSearchParams) (*VerifyLdapGroupSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVerifyLdapGroupSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "verifyLdapGroupSearch",
		Method:             "POST",
		PathPattern:        "/api/ldap/groups/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &VerifyLdapGroupSearchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VerifyLdapGroupSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for verifyLdapGroupSearch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
VerifyLdapUserSearch validates l d a p user search configuration
*/
func (a *Client) VerifyLdapUserSearch(params *VerifyLdapUserSearchParams) (*VerifyLdapUserSearchOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVerifyLdapUserSearchParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "verifyLdapUserSearch",
		Method:             "POST",
		PathPattern:        "/api/ldap/users/search",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &VerifyLdapUserSearchReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*VerifyLdapUserSearchOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for verifyLdapUserSearch: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
