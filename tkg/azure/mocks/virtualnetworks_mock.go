// Copyright 2021 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Azure/azure-sdk-for-go/services/network/mgmt/2019-11-01/network/networkapi (interfaces: VirtualNetworksClientAPI)

// Package azure is a generated GoMock package.
package azure

import (
	context "context"
	reflect "reflect"

	network "github.com/Azure/azure-sdk-for-go/services/network/mgmt/2019-11-01/network"
	gomock "github.com/golang/mock/gomock"
)

// MockVirtualNetworksClientAPI is a mock of VirtualNetworksClientAPI interface.
type MockVirtualNetworksClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockVirtualNetworksClientAPIMockRecorder
}

// MockVirtualNetworksClientAPIMockRecorder is the mock recorder for MockVirtualNetworksClientAPI.
type MockVirtualNetworksClientAPIMockRecorder struct {
	mock *MockVirtualNetworksClientAPI
}

// NewMockVirtualNetworksClientAPI creates a new mock instance.
func NewMockVirtualNetworksClientAPI(ctrl *gomock.Controller) *MockVirtualNetworksClientAPI {
	mock := &MockVirtualNetworksClientAPI{ctrl: ctrl}
	mock.recorder = &MockVirtualNetworksClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVirtualNetworksClientAPI) EXPECT() *MockVirtualNetworksClientAPIMockRecorder {
	return m.recorder
}

// CheckIPAddressAvailability mocks base method.
func (m *MockVirtualNetworksClientAPI) CheckIPAddressAvailability(arg0 context.Context, arg1, arg2, arg3 string) (network.IPAddressAvailabilityResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIPAddressAvailability", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(network.IPAddressAvailabilityResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckIPAddressAvailability indicates an expected call of CheckIPAddressAvailability.
func (mr *MockVirtualNetworksClientAPIMockRecorder) CheckIPAddressAvailability(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIPAddressAvailability", reflect.TypeOf((*MockVirtualNetworksClientAPI)(nil).CheckIPAddressAvailability), arg0, arg1, arg2, arg3)
}

// CreateOrUpdate mocks base method.
func (m *MockVirtualNetworksClientAPI) CreateOrUpdate(arg0 context.Context, arg1, arg2 string, arg3 network.VirtualNetwork) (network.VirtualNetworksCreateOrUpdateFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdate", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(network.VirtualNetworksCreateOrUpdateFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateOrUpdate indicates an expected call of CreateOrUpdate.
func (mr *MockVirtualNetworksClientAPIMockRecorder) CreateOrUpdate(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdate", reflect.TypeOf((*MockVirtualNetworksClientAPI)(nil).CreateOrUpdate), arg0, arg1, arg2, arg3)
}

// Delete mocks base method.
func (m *MockVirtualNetworksClientAPI) Delete(arg0 context.Context, arg1, arg2 string) (network.VirtualNetworksDeleteFuture, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1, arg2)
	ret0, _ := ret[0].(network.VirtualNetworksDeleteFuture)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockVirtualNetworksClientAPIMockRecorder) Delete(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockVirtualNetworksClientAPI)(nil).Delete), arg0, arg1, arg2)
}

// Get mocks base method.
func (m *MockVirtualNetworksClientAPI) Get(arg0 context.Context, arg1, arg2, arg3 string) (network.VirtualNetwork, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(network.VirtualNetwork)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockVirtualNetworksClientAPIMockRecorder) Get(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockVirtualNetworksClientAPI)(nil).Get), arg0, arg1, arg2, arg3)
}

// List mocks base method.
func (m *MockVirtualNetworksClientAPI) List(arg0 context.Context, arg1 string) (network.VirtualNetworkListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(network.VirtualNetworkListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockVirtualNetworksClientAPIMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockVirtualNetworksClientAPI)(nil).List), arg0, arg1)
}

// ListAll mocks base method.
func (m *MockVirtualNetworksClientAPI) ListAll(arg0 context.Context) (network.VirtualNetworkListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAll", arg0)
	ret0, _ := ret[0].(network.VirtualNetworkListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAll indicates an expected call of ListAll.
func (mr *MockVirtualNetworksClientAPIMockRecorder) ListAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAll", reflect.TypeOf((*MockVirtualNetworksClientAPI)(nil).ListAll), arg0)
}

// ListAllComplete mocks base method.
func (m *MockVirtualNetworksClientAPI) ListAllComplete(arg0 context.Context) (network.VirtualNetworkListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllComplete", arg0)
	ret0, _ := ret[0].(network.VirtualNetworkListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllComplete indicates an expected call of ListAllComplete.
func (mr *MockVirtualNetworksClientAPIMockRecorder) ListAllComplete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllComplete", reflect.TypeOf((*MockVirtualNetworksClientAPI)(nil).ListAllComplete), arg0)
}

// ListComplete mocks base method.
func (m *MockVirtualNetworksClientAPI) ListComplete(arg0 context.Context, arg1 string) (network.VirtualNetworkListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", arg0, arg1)
	ret0, _ := ret[0].(network.VirtualNetworkListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete.
func (mr *MockVirtualNetworksClientAPIMockRecorder) ListComplete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockVirtualNetworksClientAPI)(nil).ListComplete), arg0, arg1)
}

// ListUsage mocks base method.
func (m *MockVirtualNetworksClientAPI) ListUsage(arg0 context.Context, arg1, arg2 string) (network.VirtualNetworkListUsageResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsage", arg0, arg1, arg2)
	ret0, _ := ret[0].(network.VirtualNetworkListUsageResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsage indicates an expected call of ListUsage.
func (mr *MockVirtualNetworksClientAPIMockRecorder) ListUsage(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsage", reflect.TypeOf((*MockVirtualNetworksClientAPI)(nil).ListUsage), arg0, arg1, arg2)
}

// ListUsageComplete mocks base method.
func (m *MockVirtualNetworksClientAPI) ListUsageComplete(arg0 context.Context, arg1, arg2 string) (network.VirtualNetworkListUsageResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsageComplete", arg0, arg1, arg2)
	ret0, _ := ret[0].(network.VirtualNetworkListUsageResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsageComplete indicates an expected call of ListUsageComplete.
func (mr *MockVirtualNetworksClientAPIMockRecorder) ListUsageComplete(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsageComplete", reflect.TypeOf((*MockVirtualNetworksClientAPI)(nil).ListUsageComplete), arg0, arg1, arg2)
}

// UpdateTags mocks base method.
func (m *MockVirtualNetworksClientAPI) UpdateTags(arg0 context.Context, arg1, arg2 string, arg3 network.TagsObject) (network.VirtualNetwork, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTags", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(network.VirtualNetwork)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateTags indicates an expected call of UpdateTags.
func (mr *MockVirtualNetworksClientAPIMockRecorder) UpdateTags(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTags", reflect.TypeOf((*MockVirtualNetworksClientAPI)(nil).UpdateTags), arg0, arg1, arg2, arg3)
}
