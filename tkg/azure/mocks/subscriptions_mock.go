// Copyright 2021 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Azure/azure-sdk-for-go/services/resources/mgmt/2019-11-01/subscriptions/subscriptionsapi (interfaces: ClientAPI)

// Package azure is a generated GoMock package.
package azure

import (
	context "context"
	reflect "reflect"

	subscriptions "github.com/Azure/azure-sdk-for-go/services/resources/mgmt/2019-11-01/subscriptions"
	gomock "github.com/golang/mock/gomock"
)

// MockClientAPI is a mock of ClientAPI interface.
type MockClientAPI struct {
	ctrl     *gomock.Controller
	recorder *MockClientAPIMockRecorder
}

// MockClientAPIMockRecorder is the mock recorder for MockClientAPI.
type MockClientAPIMockRecorder struct {
	mock *MockClientAPI
}

// NewMockClientAPI creates a new mock instance.
func NewMockClientAPI(ctrl *gomock.Controller) *MockClientAPI {
	mock := &MockClientAPI{ctrl: ctrl}
	mock.recorder = &MockClientAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientAPI) EXPECT() *MockClientAPIMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockClientAPI) Get(arg0 context.Context, arg1 string) (subscriptions.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(subscriptions.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockClientAPIMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockClientAPI)(nil).Get), arg0, arg1)
}

// List mocks base method.
func (m *MockClientAPI) List(arg0 context.Context) (subscriptions.ListResultPage, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].(subscriptions.ListResultPage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockClientAPIMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockClientAPI)(nil).List), arg0)
}

// ListComplete mocks base method.
func (m *MockClientAPI) ListComplete(arg0 context.Context) (subscriptions.ListResultIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListComplete", arg0)
	ret0, _ := ret[0].(subscriptions.ListResultIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListComplete indicates an expected call of ListComplete.
func (mr *MockClientAPIMockRecorder) ListComplete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListComplete", reflect.TypeOf((*MockClientAPI)(nil).ListComplete), arg0)
}

// ListLocations mocks base method.
func (m *MockClientAPI) ListLocations(arg0 context.Context, arg1 string) (subscriptions.LocationListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListLocations", arg0, arg1)
	ret0, _ := ret[0].(subscriptions.LocationListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListLocations indicates an expected call of ListLocations.
func (mr *MockClientAPIMockRecorder) ListLocations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListLocations", reflect.TypeOf((*MockClientAPI)(nil).ListLocations), arg0, arg1)
}
