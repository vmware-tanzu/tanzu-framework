// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"sigs.k8s.io/cluster-api/cmd/clusterctl/client/config"

	"github.com/vmware-tanzu/tanzu-framework/tkg/tkgconfigreaderwriter"
)

type TKGConfigReaderWriterClient struct {
	ClusterConfigClientStub        func() config.Client
	clusterConfigClientMutex       sync.RWMutex
	clusterConfigClientArgsForCall []struct {
	}
	clusterConfigClientReturns struct {
		result1 config.Client
	}
	clusterConfigClientReturnsOnCall map[int]struct {
		result1 config.Client
	}
	TKGConfigReaderWriterStub        func() tkgconfigreaderwriter.TKGConfigReaderWriter
	tKGConfigReaderWriterMutex       sync.RWMutex
	tKGConfigReaderWriterArgsForCall []struct {
	}
	tKGConfigReaderWriterReturns struct {
		result1 tkgconfigreaderwriter.TKGConfigReaderWriter
	}
	tKGConfigReaderWriterReturnsOnCall map[int]struct {
		result1 tkgconfigreaderwriter.TKGConfigReaderWriter
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *TKGConfigReaderWriterClient) ClusterConfigClient() config.Client {
	fake.clusterConfigClientMutex.Lock()
	ret, specificReturn := fake.clusterConfigClientReturnsOnCall[len(fake.clusterConfigClientArgsForCall)]
	fake.clusterConfigClientArgsForCall = append(fake.clusterConfigClientArgsForCall, struct {
	}{})
	stub := fake.ClusterConfigClientStub
	fakeReturns := fake.clusterConfigClientReturns
	fake.recordInvocation("ClusterConfigClient", []interface{}{})
	fake.clusterConfigClientMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *TKGConfigReaderWriterClient) ClusterConfigClientCallCount() int {
	fake.clusterConfigClientMutex.RLock()
	defer fake.clusterConfigClientMutex.RUnlock()
	return len(fake.clusterConfigClientArgsForCall)
}

func (fake *TKGConfigReaderWriterClient) ClusterConfigClientCalls(stub func() config.Client) {
	fake.clusterConfigClientMutex.Lock()
	defer fake.clusterConfigClientMutex.Unlock()
	fake.ClusterConfigClientStub = stub
}

func (fake *TKGConfigReaderWriterClient) ClusterConfigClientReturns(result1 config.Client) {
	fake.clusterConfigClientMutex.Lock()
	defer fake.clusterConfigClientMutex.Unlock()
	fake.ClusterConfigClientStub = nil
	fake.clusterConfigClientReturns = struct {
		result1 config.Client
	}{result1}
}

func (fake *TKGConfigReaderWriterClient) ClusterConfigClientReturnsOnCall(i int, result1 config.Client) {
	fake.clusterConfigClientMutex.Lock()
	defer fake.clusterConfigClientMutex.Unlock()
	fake.ClusterConfigClientStub = nil
	if fake.clusterConfigClientReturnsOnCall == nil {
		fake.clusterConfigClientReturnsOnCall = make(map[int]struct {
			result1 config.Client
		})
	}
	fake.clusterConfigClientReturnsOnCall[i] = struct {
		result1 config.Client
	}{result1}
}

func (fake *TKGConfigReaderWriterClient) TKGConfigReaderWriter() tkgconfigreaderwriter.TKGConfigReaderWriter {
	fake.tKGConfigReaderWriterMutex.Lock()
	ret, specificReturn := fake.tKGConfigReaderWriterReturnsOnCall[len(fake.tKGConfigReaderWriterArgsForCall)]
	fake.tKGConfigReaderWriterArgsForCall = append(fake.tKGConfigReaderWriterArgsForCall, struct {
	}{})
	stub := fake.TKGConfigReaderWriterStub
	fakeReturns := fake.tKGConfigReaderWriterReturns
	fake.recordInvocation("TKGConfigReaderWriter", []interface{}{})
	fake.tKGConfigReaderWriterMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *TKGConfigReaderWriterClient) TKGConfigReaderWriterCallCount() int {
	fake.tKGConfigReaderWriterMutex.RLock()
	defer fake.tKGConfigReaderWriterMutex.RUnlock()
	return len(fake.tKGConfigReaderWriterArgsForCall)
}

func (fake *TKGConfigReaderWriterClient) TKGConfigReaderWriterCalls(stub func() tkgconfigreaderwriter.TKGConfigReaderWriter) {
	fake.tKGConfigReaderWriterMutex.Lock()
	defer fake.tKGConfigReaderWriterMutex.Unlock()
	fake.TKGConfigReaderWriterStub = stub
}

func (fake *TKGConfigReaderWriterClient) TKGConfigReaderWriterReturns(result1 tkgconfigreaderwriter.TKGConfigReaderWriter) {
	fake.tKGConfigReaderWriterMutex.Lock()
	defer fake.tKGConfigReaderWriterMutex.Unlock()
	fake.TKGConfigReaderWriterStub = nil
	fake.tKGConfigReaderWriterReturns = struct {
		result1 tkgconfigreaderwriter.TKGConfigReaderWriter
	}{result1}
}

func (fake *TKGConfigReaderWriterClient) TKGConfigReaderWriterReturnsOnCall(i int, result1 tkgconfigreaderwriter.TKGConfigReaderWriter) {
	fake.tKGConfigReaderWriterMutex.Lock()
	defer fake.tKGConfigReaderWriterMutex.Unlock()
	fake.TKGConfigReaderWriterStub = nil
	if fake.tKGConfigReaderWriterReturnsOnCall == nil {
		fake.tKGConfigReaderWriterReturnsOnCall = make(map[int]struct {
			result1 tkgconfigreaderwriter.TKGConfigReaderWriter
		})
	}
	fake.tKGConfigReaderWriterReturnsOnCall[i] = struct {
		result1 tkgconfigreaderwriter.TKGConfigReaderWriter
	}{result1}
}

func (fake *TKGConfigReaderWriterClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.clusterConfigClientMutex.RLock()
	defer fake.clusterConfigClientMutex.RUnlock()
	fake.tKGConfigReaderWriterMutex.RLock()
	defer fake.tKGConfigReaderWriterMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *TKGConfigReaderWriterClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ tkgconfigreaderwriter.Client = new(TKGConfigReaderWriterClient)
