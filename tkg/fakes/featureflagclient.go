// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/vmware-tanzu/tanzu-framework/tkg/client"
)

type FeatureFlagClient struct {
	IsConfigFeatureActivatedStub        func(string) (bool, error)
	isConfigFeatureActivatedMutex       sync.RWMutex
	isConfigFeatureActivatedArgsForCall []struct {
		arg1 string
	}
	isConfigFeatureActivatedReturns struct {
		result1 bool
		result2 error
	}
	isConfigFeatureActivatedReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FeatureFlagClient) IsConfigFeatureActivated(arg1 string) (bool, error) {
	fake.isConfigFeatureActivatedMutex.Lock()
	ret, specificReturn := fake.isConfigFeatureActivatedReturnsOnCall[len(fake.isConfigFeatureActivatedArgsForCall)]
	fake.isConfigFeatureActivatedArgsForCall = append(fake.isConfigFeatureActivatedArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.IsConfigFeatureActivatedStub
	fakeReturns := fake.isConfigFeatureActivatedReturns
	fake.recordInvocation("IsConfigFeatureActivated", []interface{}{arg1})
	fake.isConfigFeatureActivatedMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FeatureFlagClient) IsConfigFeatureActivatedCallCount() int {
	fake.isConfigFeatureActivatedMutex.RLock()
	defer fake.isConfigFeatureActivatedMutex.RUnlock()
	return len(fake.isConfigFeatureActivatedArgsForCall)
}

func (fake *FeatureFlagClient) IsConfigFeatureActivatedCalls(stub func(string) (bool, error)) {
	fake.isConfigFeatureActivatedMutex.Lock()
	defer fake.isConfigFeatureActivatedMutex.Unlock()
	fake.IsConfigFeatureActivatedStub = stub
}

func (fake *FeatureFlagClient) IsConfigFeatureActivatedArgsForCall(i int) string {
	fake.isConfigFeatureActivatedMutex.RLock()
	defer fake.isConfigFeatureActivatedMutex.RUnlock()
	argsForCall := fake.isConfigFeatureActivatedArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FeatureFlagClient) IsConfigFeatureActivatedReturns(result1 bool, result2 error) {
	fake.isConfigFeatureActivatedMutex.Lock()
	defer fake.isConfigFeatureActivatedMutex.Unlock()
	fake.IsConfigFeatureActivatedStub = nil
	fake.isConfigFeatureActivatedReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FeatureFlagClient) IsConfigFeatureActivatedReturnsOnCall(i int, result1 bool, result2 error) {
	fake.isConfigFeatureActivatedMutex.Lock()
	defer fake.isConfigFeatureActivatedMutex.Unlock()
	fake.IsConfigFeatureActivatedStub = nil
	if fake.isConfigFeatureActivatedReturnsOnCall == nil {
		fake.isConfigFeatureActivatedReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.isConfigFeatureActivatedReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FeatureFlagClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.isConfigFeatureActivatedMutex.RLock()
	defer fake.isConfigFeatureActivatedMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FeatureFlagClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ client.FeatureFlagClient = new(FeatureFlagClient)
