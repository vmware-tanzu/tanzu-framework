// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/vmware-tanzu/tanzu-framework/pkg/v1/tkr/pkg/registry"
	"github.com/vmware-tanzu/tanzu-framework/tkg/tkgconfigbom"
)

type TKGConfigBomClient struct {
	DownloadDefaultBOMFilesFromRegistryStub        func(string, registry.Registry) error
	downloadDefaultBOMFilesFromRegistryMutex       sync.RWMutex
	downloadDefaultBOMFilesFromRegistryArgsForCall []struct {
		arg1 string
		arg2 registry.Registry
	}
	downloadDefaultBOMFilesFromRegistryReturns struct {
		result1 error
	}
	downloadDefaultBOMFilesFromRegistryReturnsOnCall map[int]struct {
		result1 error
	}
	DownloadTKGCompatibilityFileFromRegistryStub        func(string, string, registry.Registry) error
	downloadTKGCompatibilityFileFromRegistryMutex       sync.RWMutex
	downloadTKGCompatibilityFileFromRegistryArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 registry.Registry
	}
	downloadTKGCompatibilityFileFromRegistryReturns struct {
		result1 error
	}
	downloadTKGCompatibilityFileFromRegistryReturnsOnCall map[int]struct {
		result1 error
	}
	GetAutoscalerImageForK8sVersionStub        func(string) (string, error)
	getAutoscalerImageForK8sVersionMutex       sync.RWMutex
	getAutoscalerImageForK8sVersionArgsForCall []struct {
		arg1 string
	}
	getAutoscalerImageForK8sVersionReturns struct {
		result1 string
		result2 error
	}
	getAutoscalerImageForK8sVersionReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GetAvailableK8sVersionsFromBOMFilesStub        func() ([]string, error)
	getAvailableK8sVersionsFromBOMFilesMutex       sync.RWMutex
	getAvailableK8sVersionsFromBOMFilesArgsForCall []struct {
	}
	getAvailableK8sVersionsFromBOMFilesReturns struct {
		result1 []string
		result2 error
	}
	getAvailableK8sVersionsFromBOMFilesReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	GetBOMConfigurationFromTkrVersionStub        func(string) (*tkgconfigbom.BOMConfiguration, error)
	getBOMConfigurationFromTkrVersionMutex       sync.RWMutex
	getBOMConfigurationFromTkrVersionArgsForCall []struct {
		arg1 string
	}
	getBOMConfigurationFromTkrVersionReturns struct {
		result1 *tkgconfigbom.BOMConfiguration
		result2 error
	}
	getBOMConfigurationFromTkrVersionReturnsOnCall map[int]struct {
		result1 *tkgconfigbom.BOMConfiguration
		result2 error
	}
	GetCurrentTKGVersionStub        func() string
	getCurrentTKGVersionMutex       sync.RWMutex
	getCurrentTKGVersionArgsForCall []struct {
	}
	getCurrentTKGVersionReturns struct {
		result1 string
	}
	getCurrentTKGVersionReturnsOnCall map[int]struct {
		result1 string
	}
	GetCustomRepositoryStub        func() (string, error)
	getCustomRepositoryMutex       sync.RWMutex
	getCustomRepositoryArgsForCall []struct {
	}
	getCustomRepositoryReturns struct {
		result1 string
		result2 error
	}
	getCustomRepositoryReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GetDefaultBoMFileNameStub        func() (string, error)
	getDefaultBoMFileNameMutex       sync.RWMutex
	getDefaultBoMFileNameArgsForCall []struct {
	}
	getDefaultBoMFileNameReturns struct {
		result1 string
		result2 error
	}
	getDefaultBoMFileNameReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GetDefaultBoMFilePathStub        func() (string, error)
	getDefaultBoMFilePathMutex       sync.RWMutex
	getDefaultBoMFilePathArgsForCall []struct {
	}
	getDefaultBoMFilePathReturns struct {
		result1 string
		result2 error
	}
	getDefaultBoMFilePathReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GetDefaultClusterAPIProvidersStub        func() (string, string, string, error)
	getDefaultClusterAPIProvidersMutex       sync.RWMutex
	getDefaultClusterAPIProvidersArgsForCall []struct {
	}
	getDefaultClusterAPIProvidersReturns struct {
		result1 string
		result2 string
		result3 string
		result4 error
	}
	getDefaultClusterAPIProvidersReturnsOnCall map[int]struct {
		result1 string
		result2 string
		result3 string
		result4 error
	}
	GetDefaultK8sVersionStub        func() (string, error)
	getDefaultK8sVersionMutex       sync.RWMutex
	getDefaultK8sVersionArgsForCall []struct {
	}
	getDefaultK8sVersionReturns struct {
		result1 string
		result2 error
	}
	getDefaultK8sVersionReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GetDefaultTKGReleaseVersionStub        func() (string, error)
	getDefaultTKGReleaseVersionMutex       sync.RWMutex
	getDefaultTKGReleaseVersionArgsForCall []struct {
	}
	getDefaultTKGReleaseVersionReturns struct {
		result1 string
		result2 error
	}
	getDefaultTKGReleaseVersionReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GetDefaultTKRVersionStub        func() (string, error)
	getDefaultTKRVersionMutex       sync.RWMutex
	getDefaultTKRVersionArgsForCall []struct {
	}
	getDefaultTKRVersionReturns struct {
		result1 string
		result2 error
	}
	getDefaultTKRVersionReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GetDefaultTkgBOMConfigurationStub        func() (*tkgconfigbom.BOMConfiguration, error)
	getDefaultTkgBOMConfigurationMutex       sync.RWMutex
	getDefaultTkgBOMConfigurationArgsForCall []struct {
	}
	getDefaultTkgBOMConfigurationReturns struct {
		result1 *tkgconfigbom.BOMConfiguration
		result2 error
	}
	getDefaultTkgBOMConfigurationReturnsOnCall map[int]struct {
		result1 *tkgconfigbom.BOMConfiguration
		result2 error
	}
	GetDefaultTkrBOMConfigurationStub        func() (*tkgconfigbom.BOMConfiguration, error)
	getDefaultTkrBOMConfigurationMutex       sync.RWMutex
	getDefaultTkrBOMConfigurationArgsForCall []struct {
	}
	getDefaultTkrBOMConfigurationReturns struct {
		result1 *tkgconfigbom.BOMConfiguration
		result2 error
	}
	getDefaultTkrBOMConfigurationReturnsOnCall map[int]struct {
		result1 *tkgconfigbom.BOMConfiguration
		result2 error
	}
	GetK8sVersionFromTkrVersionStub        func(string) (string, error)
	getK8sVersionFromTkrVersionMutex       sync.RWMutex
	getK8sVersionFromTkrVersionArgsForCall []struct {
		arg1 string
	}
	getK8sVersionFromTkrVersionReturns struct {
		result1 string
		result2 error
	}
	getK8sVersionFromTkrVersionReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GetKappControllerPackageImageStub        func() (string, error)
	getKappControllerPackageImageMutex       sync.RWMutex
	getKappControllerPackageImageArgsForCall []struct {
	}
	getKappControllerPackageImageReturns struct {
		result1 string
		result2 error
	}
	getKappControllerPackageImageReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GetManagementPackageRepositoryImageStub        func() (string, error)
	getManagementPackageRepositoryImageMutex       sync.RWMutex
	getManagementPackageRepositoryImageArgsForCall []struct {
	}
	getManagementPackageRepositoryImageReturns struct {
		result1 string
		result2 error
	}
	getManagementPackageRepositoryImageReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GetManagementPackagesVersionStub        func() (string, error)
	getManagementPackagesVersionMutex       sync.RWMutex
	getManagementPackagesVersionArgsForCall []struct {
	}
	getManagementPackagesVersionReturns struct {
		result1 string
		result2 error
	}
	getManagementPackagesVersionReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	InitBOMRegistryStub        func() (registry.Registry, error)
	initBOMRegistryMutex       sync.RWMutex
	initBOMRegistryArgsForCall []struct {
	}
	initBOMRegistryReturns struct {
		result1 registry.Registry
		result2 error
	}
	initBOMRegistryReturnsOnCall map[int]struct {
		result1 registry.Registry
		result2 error
	}
	IsCustomRepositorySkipTLSVerifyStub        func() bool
	isCustomRepositorySkipTLSVerifyMutex       sync.RWMutex
	isCustomRepositorySkipTLSVerifyArgsForCall []struct {
	}
	isCustomRepositorySkipTLSVerifyReturns struct {
		result1 bool
	}
	isCustomRepositorySkipTLSVerifyReturnsOnCall map[int]struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *TKGConfigBomClient) DownloadDefaultBOMFilesFromRegistry(arg1 string, arg2 registry.Registry) error {
	fake.downloadDefaultBOMFilesFromRegistryMutex.Lock()
	ret, specificReturn := fake.downloadDefaultBOMFilesFromRegistryReturnsOnCall[len(fake.downloadDefaultBOMFilesFromRegistryArgsForCall)]
	fake.downloadDefaultBOMFilesFromRegistryArgsForCall = append(fake.downloadDefaultBOMFilesFromRegistryArgsForCall, struct {
		arg1 string
		arg2 registry.Registry
	}{arg1, arg2})
	stub := fake.DownloadDefaultBOMFilesFromRegistryStub
	fakeReturns := fake.downloadDefaultBOMFilesFromRegistryReturns
	fake.recordInvocation("DownloadDefaultBOMFilesFromRegistry", []interface{}{arg1, arg2})
	fake.downloadDefaultBOMFilesFromRegistryMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *TKGConfigBomClient) DownloadDefaultBOMFilesFromRegistryCallCount() int {
	fake.downloadDefaultBOMFilesFromRegistryMutex.RLock()
	defer fake.downloadDefaultBOMFilesFromRegistryMutex.RUnlock()
	return len(fake.downloadDefaultBOMFilesFromRegistryArgsForCall)
}

func (fake *TKGConfigBomClient) DownloadDefaultBOMFilesFromRegistryCalls(stub func(string, registry.Registry) error) {
	fake.downloadDefaultBOMFilesFromRegistryMutex.Lock()
	defer fake.downloadDefaultBOMFilesFromRegistryMutex.Unlock()
	fake.DownloadDefaultBOMFilesFromRegistryStub = stub
}

func (fake *TKGConfigBomClient) DownloadDefaultBOMFilesFromRegistryArgsForCall(i int) (string, registry.Registry) {
	fake.downloadDefaultBOMFilesFromRegistryMutex.RLock()
	defer fake.downloadDefaultBOMFilesFromRegistryMutex.RUnlock()
	argsForCall := fake.downloadDefaultBOMFilesFromRegistryArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *TKGConfigBomClient) DownloadDefaultBOMFilesFromRegistryReturns(result1 error) {
	fake.downloadDefaultBOMFilesFromRegistryMutex.Lock()
	defer fake.downloadDefaultBOMFilesFromRegistryMutex.Unlock()
	fake.DownloadDefaultBOMFilesFromRegistryStub = nil
	fake.downloadDefaultBOMFilesFromRegistryReturns = struct {
		result1 error
	}{result1}
}

func (fake *TKGConfigBomClient) DownloadDefaultBOMFilesFromRegistryReturnsOnCall(i int, result1 error) {
	fake.downloadDefaultBOMFilesFromRegistryMutex.Lock()
	defer fake.downloadDefaultBOMFilesFromRegistryMutex.Unlock()
	fake.DownloadDefaultBOMFilesFromRegistryStub = nil
	if fake.downloadDefaultBOMFilesFromRegistryReturnsOnCall == nil {
		fake.downloadDefaultBOMFilesFromRegistryReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.downloadDefaultBOMFilesFromRegistryReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *TKGConfigBomClient) DownloadTKGCompatibilityFileFromRegistry(arg1 string, arg2 string, arg3 registry.Registry) error {
	fake.downloadTKGCompatibilityFileFromRegistryMutex.Lock()
	ret, specificReturn := fake.downloadTKGCompatibilityFileFromRegistryReturnsOnCall[len(fake.downloadTKGCompatibilityFileFromRegistryArgsForCall)]
	fake.downloadTKGCompatibilityFileFromRegistryArgsForCall = append(fake.downloadTKGCompatibilityFileFromRegistryArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 registry.Registry
	}{arg1, arg2, arg3})
	stub := fake.DownloadTKGCompatibilityFileFromRegistryStub
	fakeReturns := fake.downloadTKGCompatibilityFileFromRegistryReturns
	fake.recordInvocation("DownloadTKGCompatibilityFileFromRegistry", []interface{}{arg1, arg2, arg3})
	fake.downloadTKGCompatibilityFileFromRegistryMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *TKGConfigBomClient) DownloadTKGCompatibilityFileFromRegistryCallCount() int {
	fake.downloadTKGCompatibilityFileFromRegistryMutex.RLock()
	defer fake.downloadTKGCompatibilityFileFromRegistryMutex.RUnlock()
	return len(fake.downloadTKGCompatibilityFileFromRegistryArgsForCall)
}

func (fake *TKGConfigBomClient) DownloadTKGCompatibilityFileFromRegistryCalls(stub func(string, string, registry.Registry) error) {
	fake.downloadTKGCompatibilityFileFromRegistryMutex.Lock()
	defer fake.downloadTKGCompatibilityFileFromRegistryMutex.Unlock()
	fake.DownloadTKGCompatibilityFileFromRegistryStub = stub
}

func (fake *TKGConfigBomClient) DownloadTKGCompatibilityFileFromRegistryArgsForCall(i int) (string, string, registry.Registry) {
	fake.downloadTKGCompatibilityFileFromRegistryMutex.RLock()
	defer fake.downloadTKGCompatibilityFileFromRegistryMutex.RUnlock()
	argsForCall := fake.downloadTKGCompatibilityFileFromRegistryArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *TKGConfigBomClient) DownloadTKGCompatibilityFileFromRegistryReturns(result1 error) {
	fake.downloadTKGCompatibilityFileFromRegistryMutex.Lock()
	defer fake.downloadTKGCompatibilityFileFromRegistryMutex.Unlock()
	fake.DownloadTKGCompatibilityFileFromRegistryStub = nil
	fake.downloadTKGCompatibilityFileFromRegistryReturns = struct {
		result1 error
	}{result1}
}

func (fake *TKGConfigBomClient) DownloadTKGCompatibilityFileFromRegistryReturnsOnCall(i int, result1 error) {
	fake.downloadTKGCompatibilityFileFromRegistryMutex.Lock()
	defer fake.downloadTKGCompatibilityFileFromRegistryMutex.Unlock()
	fake.DownloadTKGCompatibilityFileFromRegistryStub = nil
	if fake.downloadTKGCompatibilityFileFromRegistryReturnsOnCall == nil {
		fake.downloadTKGCompatibilityFileFromRegistryReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.downloadTKGCompatibilityFileFromRegistryReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *TKGConfigBomClient) GetAutoscalerImageForK8sVersion(arg1 string) (string, error) {
	fake.getAutoscalerImageForK8sVersionMutex.Lock()
	ret, specificReturn := fake.getAutoscalerImageForK8sVersionReturnsOnCall[len(fake.getAutoscalerImageForK8sVersionArgsForCall)]
	fake.getAutoscalerImageForK8sVersionArgsForCall = append(fake.getAutoscalerImageForK8sVersionArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetAutoscalerImageForK8sVersionStub
	fakeReturns := fake.getAutoscalerImageForK8sVersionReturns
	fake.recordInvocation("GetAutoscalerImageForK8sVersion", []interface{}{arg1})
	fake.getAutoscalerImageForK8sVersionMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *TKGConfigBomClient) GetAutoscalerImageForK8sVersionCallCount() int {
	fake.getAutoscalerImageForK8sVersionMutex.RLock()
	defer fake.getAutoscalerImageForK8sVersionMutex.RUnlock()
	return len(fake.getAutoscalerImageForK8sVersionArgsForCall)
}

func (fake *TKGConfigBomClient) GetAutoscalerImageForK8sVersionCalls(stub func(string) (string, error)) {
	fake.getAutoscalerImageForK8sVersionMutex.Lock()
	defer fake.getAutoscalerImageForK8sVersionMutex.Unlock()
	fake.GetAutoscalerImageForK8sVersionStub = stub
}

func (fake *TKGConfigBomClient) GetAutoscalerImageForK8sVersionArgsForCall(i int) string {
	fake.getAutoscalerImageForK8sVersionMutex.RLock()
	defer fake.getAutoscalerImageForK8sVersionMutex.RUnlock()
	argsForCall := fake.getAutoscalerImageForK8sVersionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *TKGConfigBomClient) GetAutoscalerImageForK8sVersionReturns(result1 string, result2 error) {
	fake.getAutoscalerImageForK8sVersionMutex.Lock()
	defer fake.getAutoscalerImageForK8sVersionMutex.Unlock()
	fake.GetAutoscalerImageForK8sVersionStub = nil
	fake.getAutoscalerImageForK8sVersionReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *TKGConfigBomClient) GetAutoscalerImageForK8sVersionReturnsOnCall(i int, result1 string, result2 error) {
	fake.getAutoscalerImageForK8sVersionMutex.Lock()
	defer fake.getAutoscalerImageForK8sVersionMutex.Unlock()
	fake.GetAutoscalerImageForK8sVersionStub = nil
	if fake.getAutoscalerImageForK8sVersionReturnsOnCall == nil {
		fake.getAutoscalerImageForK8sVersionReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getAutoscalerImageForK8sVersionReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *TKGConfigBomClient) GetAvailableK8sVersionsFromBOMFiles() ([]string, error) {
	fake.getAvailableK8sVersionsFromBOMFilesMutex.Lock()
	ret, specificReturn := fake.getAvailableK8sVersionsFromBOMFilesReturnsOnCall[len(fake.getAvailableK8sVersionsFromBOMFilesArgsForCall)]
	fake.getAvailableK8sVersionsFromBOMFilesArgsForCall = append(fake.getAvailableK8sVersionsFromBOMFilesArgsForCall, struct {
	}{})
	stub := fake.GetAvailableK8sVersionsFromBOMFilesStub
	fakeReturns := fake.getAvailableK8sVersionsFromBOMFilesReturns
	fake.recordInvocation("GetAvailableK8sVersionsFromBOMFiles", []interface{}{})
	fake.getAvailableK8sVersionsFromBOMFilesMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *TKGConfigBomClient) GetAvailableK8sVersionsFromBOMFilesCallCount() int {
	fake.getAvailableK8sVersionsFromBOMFilesMutex.RLock()
	defer fake.getAvailableK8sVersionsFromBOMFilesMutex.RUnlock()
	return len(fake.getAvailableK8sVersionsFromBOMFilesArgsForCall)
}

func (fake *TKGConfigBomClient) GetAvailableK8sVersionsFromBOMFilesCalls(stub func() ([]string, error)) {
	fake.getAvailableK8sVersionsFromBOMFilesMutex.Lock()
	defer fake.getAvailableK8sVersionsFromBOMFilesMutex.Unlock()
	fake.GetAvailableK8sVersionsFromBOMFilesStub = stub
}

func (fake *TKGConfigBomClient) GetAvailableK8sVersionsFromBOMFilesReturns(result1 []string, result2 error) {
	fake.getAvailableK8sVersionsFromBOMFilesMutex.Lock()
	defer fake.getAvailableK8sVersionsFromBOMFilesMutex.Unlock()
	fake.GetAvailableK8sVersionsFromBOMFilesStub = nil
	fake.getAvailableK8sVersionsFromBOMFilesReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *TKGConfigBomClient) GetAvailableK8sVersionsFromBOMFilesReturnsOnCall(i int, result1 []string, result2 error) {
	fake.getAvailableK8sVersionsFromBOMFilesMutex.Lock()
	defer fake.getAvailableK8sVersionsFromBOMFilesMutex.Unlock()
	fake.GetAvailableK8sVersionsFromBOMFilesStub = nil
	if fake.getAvailableK8sVersionsFromBOMFilesReturnsOnCall == nil {
		fake.getAvailableK8sVersionsFromBOMFilesReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.getAvailableK8sVersionsFromBOMFilesReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *TKGConfigBomClient) GetBOMConfigurationFromTkrVersion(arg1 string) (*tkgconfigbom.BOMConfiguration, error) {
	fake.getBOMConfigurationFromTkrVersionMutex.Lock()
	ret, specificReturn := fake.getBOMConfigurationFromTkrVersionReturnsOnCall[len(fake.getBOMConfigurationFromTkrVersionArgsForCall)]
	fake.getBOMConfigurationFromTkrVersionArgsForCall = append(fake.getBOMConfigurationFromTkrVersionArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetBOMConfigurationFromTkrVersionStub
	fakeReturns := fake.getBOMConfigurationFromTkrVersionReturns
	fake.recordInvocation("GetBOMConfigurationFromTkrVersion", []interface{}{arg1})
	fake.getBOMConfigurationFromTkrVersionMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *TKGConfigBomClient) GetBOMConfigurationFromTkrVersionCallCount() int {
	fake.getBOMConfigurationFromTkrVersionMutex.RLock()
	defer fake.getBOMConfigurationFromTkrVersionMutex.RUnlock()
	return len(fake.getBOMConfigurationFromTkrVersionArgsForCall)
}

func (fake *TKGConfigBomClient) GetBOMConfigurationFromTkrVersionCalls(stub func(string) (*tkgconfigbom.BOMConfiguration, error)) {
	fake.getBOMConfigurationFromTkrVersionMutex.Lock()
	defer fake.getBOMConfigurationFromTkrVersionMutex.Unlock()
	fake.GetBOMConfigurationFromTkrVersionStub = stub
}

func (fake *TKGConfigBomClient) GetBOMConfigurationFromTkrVersionArgsForCall(i int) string {
	fake.getBOMConfigurationFromTkrVersionMutex.RLock()
	defer fake.getBOMConfigurationFromTkrVersionMutex.RUnlock()
	argsForCall := fake.getBOMConfigurationFromTkrVersionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *TKGConfigBomClient) GetBOMConfigurationFromTkrVersionReturns(result1 *tkgconfigbom.BOMConfiguration, result2 error) {
	fake.getBOMConfigurationFromTkrVersionMutex.Lock()
	defer fake.getBOMConfigurationFromTkrVersionMutex.Unlock()
	fake.GetBOMConfigurationFromTkrVersionStub = nil
	fake.getBOMConfigurationFromTkrVersionReturns = struct {
		result1 *tkgconfigbom.BOMConfiguration
		result2 error
	}{result1, result2}
}

func (fake *TKGConfigBomClient) GetBOMConfigurationFromTkrVersionReturnsOnCall(i int, result1 *tkgconfigbom.BOMConfiguration, result2 error) {
	fake.getBOMConfigurationFromTkrVersionMutex.Lock()
	defer fake.getBOMConfigurationFromTkrVersionMutex.Unlock()
	fake.GetBOMConfigurationFromTkrVersionStub = nil
	if fake.getBOMConfigurationFromTkrVersionReturnsOnCall == nil {
		fake.getBOMConfigurationFromTkrVersionReturnsOnCall = make(map[int]struct {
			result1 *tkgconfigbom.BOMConfiguration
			result2 error
		})
	}
	fake.getBOMConfigurationFromTkrVersionReturnsOnCall[i] = struct {
		result1 *tkgconfigbom.BOMConfiguration
		result2 error
	}{result1, result2}
}

func (fake *TKGConfigBomClient) GetCurrentTKGVersion() string {
	fake.getCurrentTKGVersionMutex.Lock()
	ret, specificReturn := fake.getCurrentTKGVersionReturnsOnCall[len(fake.getCurrentTKGVersionArgsForCall)]
	fake.getCurrentTKGVersionArgsForCall = append(fake.getCurrentTKGVersionArgsForCall, struct {
	}{})
	stub := fake.GetCurrentTKGVersionStub
	fakeReturns := fake.getCurrentTKGVersionReturns
	fake.recordInvocation("GetCurrentTKGVersion", []interface{}{})
	fake.getCurrentTKGVersionMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *TKGConfigBomClient) GetCurrentTKGVersionCallCount() int {
	fake.getCurrentTKGVersionMutex.RLock()
	defer fake.getCurrentTKGVersionMutex.RUnlock()
	return len(fake.getCurrentTKGVersionArgsForCall)
}

func (fake *TKGConfigBomClient) GetCurrentTKGVersionCalls(stub func() string) {
	fake.getCurrentTKGVersionMutex.Lock()
	defer fake.getCurrentTKGVersionMutex.Unlock()
	fake.GetCurrentTKGVersionStub = stub
}

func (fake *TKGConfigBomClient) GetCurrentTKGVersionReturns(result1 string) {
	fake.getCurrentTKGVersionMutex.Lock()
	defer fake.getCurrentTKGVersionMutex.Unlock()
	fake.GetCurrentTKGVersionStub = nil
	fake.getCurrentTKGVersionReturns = struct {
		result1 string
	}{result1}
}

func (fake *TKGConfigBomClient) GetCurrentTKGVersionReturnsOnCall(i int, result1 string) {
	fake.getCurrentTKGVersionMutex.Lock()
	defer fake.getCurrentTKGVersionMutex.Unlock()
	fake.GetCurrentTKGVersionStub = nil
	if fake.getCurrentTKGVersionReturnsOnCall == nil {
		fake.getCurrentTKGVersionReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getCurrentTKGVersionReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *TKGConfigBomClient) GetCustomRepository() (string, error) {
	fake.getCustomRepositoryMutex.Lock()
	ret, specificReturn := fake.getCustomRepositoryReturnsOnCall[len(fake.getCustomRepositoryArgsForCall)]
	fake.getCustomRepositoryArgsForCall = append(fake.getCustomRepositoryArgsForCall, struct {
	}{})
	stub := fake.GetCustomRepositoryStub
	fakeReturns := fake.getCustomRepositoryReturns
	fake.recordInvocation("GetCustomRepository", []interface{}{})
	fake.getCustomRepositoryMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *TKGConfigBomClient) GetCustomRepositoryCallCount() int {
	fake.getCustomRepositoryMutex.RLock()
	defer fake.getCustomRepositoryMutex.RUnlock()
	return len(fake.getCustomRepositoryArgsForCall)
}

func (fake *TKGConfigBomClient) GetCustomRepositoryCalls(stub func() (string, error)) {
	fake.getCustomRepositoryMutex.Lock()
	defer fake.getCustomRepositoryMutex.Unlock()
	fake.GetCustomRepositoryStub = stub
}

func (fake *TKGConfigBomClient) GetCustomRepositoryReturns(result1 string, result2 error) {
	fake.getCustomRepositoryMutex.Lock()
	defer fake.getCustomRepositoryMutex.Unlock()
	fake.GetCustomRepositoryStub = nil
	fake.getCustomRepositoryReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *TKGConfigBomClient) GetCustomRepositoryReturnsOnCall(i int, result1 string, result2 error) {
	fake.getCustomRepositoryMutex.Lock()
	defer fake.getCustomRepositoryMutex.Unlock()
	fake.GetCustomRepositoryStub = nil
	if fake.getCustomRepositoryReturnsOnCall == nil {
		fake.getCustomRepositoryReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getCustomRepositoryReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *TKGConfigBomClient) GetDefaultBoMFileName() (string, error) {
	fake.getDefaultBoMFileNameMutex.Lock()
	ret, specificReturn := fake.getDefaultBoMFileNameReturnsOnCall[len(fake.getDefaultBoMFileNameArgsForCall)]
	fake.getDefaultBoMFileNameArgsForCall = append(fake.getDefaultBoMFileNameArgsForCall, struct {
	}{})
	stub := fake.GetDefaultBoMFileNameStub
	fakeReturns := fake.getDefaultBoMFileNameReturns
	fake.recordInvocation("GetDefaultBoMFileName", []interface{}{})
	fake.getDefaultBoMFileNameMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *TKGConfigBomClient) GetDefaultBoMFileNameCallCount() int {
	fake.getDefaultBoMFileNameMutex.RLock()
	defer fake.getDefaultBoMFileNameMutex.RUnlock()
	return len(fake.getDefaultBoMFileNameArgsForCall)
}

func (fake *TKGConfigBomClient) GetDefaultBoMFileNameCalls(stub func() (string, error)) {
	fake.getDefaultBoMFileNameMutex.Lock()
	defer fake.getDefaultBoMFileNameMutex.Unlock()
	fake.GetDefaultBoMFileNameStub = stub
}

func (fake *TKGConfigBomClient) GetDefaultBoMFileNameReturns(result1 string, result2 error) {
	fake.getDefaultBoMFileNameMutex.Lock()
	defer fake.getDefaultBoMFileNameMutex.Unlock()
	fake.GetDefaultBoMFileNameStub = nil
	fake.getDefaultBoMFileNameReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *TKGConfigBomClient) GetDefaultBoMFileNameReturnsOnCall(i int, result1 string, result2 error) {
	fake.getDefaultBoMFileNameMutex.Lock()
	defer fake.getDefaultBoMFileNameMutex.Unlock()
	fake.GetDefaultBoMFileNameStub = nil
	if fake.getDefaultBoMFileNameReturnsOnCall == nil {
		fake.getDefaultBoMFileNameReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getDefaultBoMFileNameReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *TKGConfigBomClient) GetDefaultBoMFilePath() (string, error) {
	fake.getDefaultBoMFilePathMutex.Lock()
	ret, specificReturn := fake.getDefaultBoMFilePathReturnsOnCall[len(fake.getDefaultBoMFilePathArgsForCall)]
	fake.getDefaultBoMFilePathArgsForCall = append(fake.getDefaultBoMFilePathArgsForCall, struct {
	}{})
	stub := fake.GetDefaultBoMFilePathStub
	fakeReturns := fake.getDefaultBoMFilePathReturns
	fake.recordInvocation("GetDefaultBoMFilePath", []interface{}{})
	fake.getDefaultBoMFilePathMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *TKGConfigBomClient) GetDefaultBoMFilePathCallCount() int {
	fake.getDefaultBoMFilePathMutex.RLock()
	defer fake.getDefaultBoMFilePathMutex.RUnlock()
	return len(fake.getDefaultBoMFilePathArgsForCall)
}

func (fake *TKGConfigBomClient) GetDefaultBoMFilePathCalls(stub func() (string, error)) {
	fake.getDefaultBoMFilePathMutex.Lock()
	defer fake.getDefaultBoMFilePathMutex.Unlock()
	fake.GetDefaultBoMFilePathStub = stub
}

func (fake *TKGConfigBomClient) GetDefaultBoMFilePathReturns(result1 string, result2 error) {
	fake.getDefaultBoMFilePathMutex.Lock()
	defer fake.getDefaultBoMFilePathMutex.Unlock()
	fake.GetDefaultBoMFilePathStub = nil
	fake.getDefaultBoMFilePathReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *TKGConfigBomClient) GetDefaultBoMFilePathReturnsOnCall(i int, result1 string, result2 error) {
	fake.getDefaultBoMFilePathMutex.Lock()
	defer fake.getDefaultBoMFilePathMutex.Unlock()
	fake.GetDefaultBoMFilePathStub = nil
	if fake.getDefaultBoMFilePathReturnsOnCall == nil {
		fake.getDefaultBoMFilePathReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getDefaultBoMFilePathReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *TKGConfigBomClient) GetDefaultClusterAPIProviders() (string, string, string, error) {
	fake.getDefaultClusterAPIProvidersMutex.Lock()
	ret, specificReturn := fake.getDefaultClusterAPIProvidersReturnsOnCall[len(fake.getDefaultClusterAPIProvidersArgsForCall)]
	fake.getDefaultClusterAPIProvidersArgsForCall = append(fake.getDefaultClusterAPIProvidersArgsForCall, struct {
	}{})
	stub := fake.GetDefaultClusterAPIProvidersStub
	fakeReturns := fake.getDefaultClusterAPIProvidersReturns
	fake.recordInvocation("GetDefaultClusterAPIProviders", []interface{}{})
	fake.getDefaultClusterAPIProvidersMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3, ret.result4
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3, fakeReturns.result4
}

func (fake *TKGConfigBomClient) GetDefaultClusterAPIProvidersCallCount() int {
	fake.getDefaultClusterAPIProvidersMutex.RLock()
	defer fake.getDefaultClusterAPIProvidersMutex.RUnlock()
	return len(fake.getDefaultClusterAPIProvidersArgsForCall)
}

func (fake *TKGConfigBomClient) GetDefaultClusterAPIProvidersCalls(stub func() (string, string, string, error)) {
	fake.getDefaultClusterAPIProvidersMutex.Lock()
	defer fake.getDefaultClusterAPIProvidersMutex.Unlock()
	fake.GetDefaultClusterAPIProvidersStub = stub
}

func (fake *TKGConfigBomClient) GetDefaultClusterAPIProvidersReturns(result1 string, result2 string, result3 string, result4 error) {
	fake.getDefaultClusterAPIProvidersMutex.Lock()
	defer fake.getDefaultClusterAPIProvidersMutex.Unlock()
	fake.GetDefaultClusterAPIProvidersStub = nil
	fake.getDefaultClusterAPIProvidersReturns = struct {
		result1 string
		result2 string
		result3 string
		result4 error
	}{result1, result2, result3, result4}
}

func (fake *TKGConfigBomClient) GetDefaultClusterAPIProvidersReturnsOnCall(i int, result1 string, result2 string, result3 string, result4 error) {
	fake.getDefaultClusterAPIProvidersMutex.Lock()
	defer fake.getDefaultClusterAPIProvidersMutex.Unlock()
	fake.GetDefaultClusterAPIProvidersStub = nil
	if fake.getDefaultClusterAPIProvidersReturnsOnCall == nil {
		fake.getDefaultClusterAPIProvidersReturnsOnCall = make(map[int]struct {
			result1 string
			result2 string
			result3 string
			result4 error
		})
	}
	fake.getDefaultClusterAPIProvidersReturnsOnCall[i] = struct {
		result1 string
		result2 string
		result3 string
		result4 error
	}{result1, result2, result3, result4}
}

func (fake *TKGConfigBomClient) GetDefaultK8sVersion() (string, error) {
	fake.getDefaultK8sVersionMutex.Lock()
	ret, specificReturn := fake.getDefaultK8sVersionReturnsOnCall[len(fake.getDefaultK8sVersionArgsForCall)]
	fake.getDefaultK8sVersionArgsForCall = append(fake.getDefaultK8sVersionArgsForCall, struct {
	}{})
	stub := fake.GetDefaultK8sVersionStub
	fakeReturns := fake.getDefaultK8sVersionReturns
	fake.recordInvocation("GetDefaultK8sVersion", []interface{}{})
	fake.getDefaultK8sVersionMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *TKGConfigBomClient) GetDefaultK8sVersionCallCount() int {
	fake.getDefaultK8sVersionMutex.RLock()
	defer fake.getDefaultK8sVersionMutex.RUnlock()
	return len(fake.getDefaultK8sVersionArgsForCall)
}

func (fake *TKGConfigBomClient) GetDefaultK8sVersionCalls(stub func() (string, error)) {
	fake.getDefaultK8sVersionMutex.Lock()
	defer fake.getDefaultK8sVersionMutex.Unlock()
	fake.GetDefaultK8sVersionStub = stub
}

func (fake *TKGConfigBomClient) GetDefaultK8sVersionReturns(result1 string, result2 error) {
	fake.getDefaultK8sVersionMutex.Lock()
	defer fake.getDefaultK8sVersionMutex.Unlock()
	fake.GetDefaultK8sVersionStub = nil
	fake.getDefaultK8sVersionReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *TKGConfigBomClient) GetDefaultK8sVersionReturnsOnCall(i int, result1 string, result2 error) {
	fake.getDefaultK8sVersionMutex.Lock()
	defer fake.getDefaultK8sVersionMutex.Unlock()
	fake.GetDefaultK8sVersionStub = nil
	if fake.getDefaultK8sVersionReturnsOnCall == nil {
		fake.getDefaultK8sVersionReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getDefaultK8sVersionReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *TKGConfigBomClient) GetDefaultTKGReleaseVersion() (string, error) {
	fake.getDefaultTKGReleaseVersionMutex.Lock()
	ret, specificReturn := fake.getDefaultTKGReleaseVersionReturnsOnCall[len(fake.getDefaultTKGReleaseVersionArgsForCall)]
	fake.getDefaultTKGReleaseVersionArgsForCall = append(fake.getDefaultTKGReleaseVersionArgsForCall, struct {
	}{})
	stub := fake.GetDefaultTKGReleaseVersionStub
	fakeReturns := fake.getDefaultTKGReleaseVersionReturns
	fake.recordInvocation("GetDefaultTKGReleaseVersion", []interface{}{})
	fake.getDefaultTKGReleaseVersionMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *TKGConfigBomClient) GetDefaultTKGReleaseVersionCallCount() int {
	fake.getDefaultTKGReleaseVersionMutex.RLock()
	defer fake.getDefaultTKGReleaseVersionMutex.RUnlock()
	return len(fake.getDefaultTKGReleaseVersionArgsForCall)
}

func (fake *TKGConfigBomClient) GetDefaultTKGReleaseVersionCalls(stub func() (string, error)) {
	fake.getDefaultTKGReleaseVersionMutex.Lock()
	defer fake.getDefaultTKGReleaseVersionMutex.Unlock()
	fake.GetDefaultTKGReleaseVersionStub = stub
}

func (fake *TKGConfigBomClient) GetDefaultTKGReleaseVersionReturns(result1 string, result2 error) {
	fake.getDefaultTKGReleaseVersionMutex.Lock()
	defer fake.getDefaultTKGReleaseVersionMutex.Unlock()
	fake.GetDefaultTKGReleaseVersionStub = nil
	fake.getDefaultTKGReleaseVersionReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *TKGConfigBomClient) GetDefaultTKGReleaseVersionReturnsOnCall(i int, result1 string, result2 error) {
	fake.getDefaultTKGReleaseVersionMutex.Lock()
	defer fake.getDefaultTKGReleaseVersionMutex.Unlock()
	fake.GetDefaultTKGReleaseVersionStub = nil
	if fake.getDefaultTKGReleaseVersionReturnsOnCall == nil {
		fake.getDefaultTKGReleaseVersionReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getDefaultTKGReleaseVersionReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *TKGConfigBomClient) GetDefaultTKRVersion() (string, error) {
	fake.getDefaultTKRVersionMutex.Lock()
	ret, specificReturn := fake.getDefaultTKRVersionReturnsOnCall[len(fake.getDefaultTKRVersionArgsForCall)]
	fake.getDefaultTKRVersionArgsForCall = append(fake.getDefaultTKRVersionArgsForCall, struct {
	}{})
	stub := fake.GetDefaultTKRVersionStub
	fakeReturns := fake.getDefaultTKRVersionReturns
	fake.recordInvocation("GetDefaultTKRVersion", []interface{}{})
	fake.getDefaultTKRVersionMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *TKGConfigBomClient) GetDefaultTKRVersionCallCount() int {
	fake.getDefaultTKRVersionMutex.RLock()
	defer fake.getDefaultTKRVersionMutex.RUnlock()
	return len(fake.getDefaultTKRVersionArgsForCall)
}

func (fake *TKGConfigBomClient) GetDefaultTKRVersionCalls(stub func() (string, error)) {
	fake.getDefaultTKRVersionMutex.Lock()
	defer fake.getDefaultTKRVersionMutex.Unlock()
	fake.GetDefaultTKRVersionStub = stub
}

func (fake *TKGConfigBomClient) GetDefaultTKRVersionReturns(result1 string, result2 error) {
	fake.getDefaultTKRVersionMutex.Lock()
	defer fake.getDefaultTKRVersionMutex.Unlock()
	fake.GetDefaultTKRVersionStub = nil
	fake.getDefaultTKRVersionReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *TKGConfigBomClient) GetDefaultTKRVersionReturnsOnCall(i int, result1 string, result2 error) {
	fake.getDefaultTKRVersionMutex.Lock()
	defer fake.getDefaultTKRVersionMutex.Unlock()
	fake.GetDefaultTKRVersionStub = nil
	if fake.getDefaultTKRVersionReturnsOnCall == nil {
		fake.getDefaultTKRVersionReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getDefaultTKRVersionReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *TKGConfigBomClient) GetDefaultTkgBOMConfiguration() (*tkgconfigbom.BOMConfiguration, error) {
	fake.getDefaultTkgBOMConfigurationMutex.Lock()
	ret, specificReturn := fake.getDefaultTkgBOMConfigurationReturnsOnCall[len(fake.getDefaultTkgBOMConfigurationArgsForCall)]
	fake.getDefaultTkgBOMConfigurationArgsForCall = append(fake.getDefaultTkgBOMConfigurationArgsForCall, struct {
	}{})
	stub := fake.GetDefaultTkgBOMConfigurationStub
	fakeReturns := fake.getDefaultTkgBOMConfigurationReturns
	fake.recordInvocation("GetDefaultTkgBOMConfiguration", []interface{}{})
	fake.getDefaultTkgBOMConfigurationMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *TKGConfigBomClient) GetDefaultTkgBOMConfigurationCallCount() int {
	fake.getDefaultTkgBOMConfigurationMutex.RLock()
	defer fake.getDefaultTkgBOMConfigurationMutex.RUnlock()
	return len(fake.getDefaultTkgBOMConfigurationArgsForCall)
}

func (fake *TKGConfigBomClient) GetDefaultTkgBOMConfigurationCalls(stub func() (*tkgconfigbom.BOMConfiguration, error)) {
	fake.getDefaultTkgBOMConfigurationMutex.Lock()
	defer fake.getDefaultTkgBOMConfigurationMutex.Unlock()
	fake.GetDefaultTkgBOMConfigurationStub = stub
}

func (fake *TKGConfigBomClient) GetDefaultTkgBOMConfigurationReturns(result1 *tkgconfigbom.BOMConfiguration, result2 error) {
	fake.getDefaultTkgBOMConfigurationMutex.Lock()
	defer fake.getDefaultTkgBOMConfigurationMutex.Unlock()
	fake.GetDefaultTkgBOMConfigurationStub = nil
	fake.getDefaultTkgBOMConfigurationReturns = struct {
		result1 *tkgconfigbom.BOMConfiguration
		result2 error
	}{result1, result2}
}

func (fake *TKGConfigBomClient) GetDefaultTkgBOMConfigurationReturnsOnCall(i int, result1 *tkgconfigbom.BOMConfiguration, result2 error) {
	fake.getDefaultTkgBOMConfigurationMutex.Lock()
	defer fake.getDefaultTkgBOMConfigurationMutex.Unlock()
	fake.GetDefaultTkgBOMConfigurationStub = nil
	if fake.getDefaultTkgBOMConfigurationReturnsOnCall == nil {
		fake.getDefaultTkgBOMConfigurationReturnsOnCall = make(map[int]struct {
			result1 *tkgconfigbom.BOMConfiguration
			result2 error
		})
	}
	fake.getDefaultTkgBOMConfigurationReturnsOnCall[i] = struct {
		result1 *tkgconfigbom.BOMConfiguration
		result2 error
	}{result1, result2}
}

func (fake *TKGConfigBomClient) GetDefaultTkrBOMConfiguration() (*tkgconfigbom.BOMConfiguration, error) {
	fake.getDefaultTkrBOMConfigurationMutex.Lock()
	ret, specificReturn := fake.getDefaultTkrBOMConfigurationReturnsOnCall[len(fake.getDefaultTkrBOMConfigurationArgsForCall)]
	fake.getDefaultTkrBOMConfigurationArgsForCall = append(fake.getDefaultTkrBOMConfigurationArgsForCall, struct {
	}{})
	stub := fake.GetDefaultTkrBOMConfigurationStub
	fakeReturns := fake.getDefaultTkrBOMConfigurationReturns
	fake.recordInvocation("GetDefaultTkrBOMConfiguration", []interface{}{})
	fake.getDefaultTkrBOMConfigurationMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *TKGConfigBomClient) GetDefaultTkrBOMConfigurationCallCount() int {
	fake.getDefaultTkrBOMConfigurationMutex.RLock()
	defer fake.getDefaultTkrBOMConfigurationMutex.RUnlock()
	return len(fake.getDefaultTkrBOMConfigurationArgsForCall)
}

func (fake *TKGConfigBomClient) GetDefaultTkrBOMConfigurationCalls(stub func() (*tkgconfigbom.BOMConfiguration, error)) {
	fake.getDefaultTkrBOMConfigurationMutex.Lock()
	defer fake.getDefaultTkrBOMConfigurationMutex.Unlock()
	fake.GetDefaultTkrBOMConfigurationStub = stub
}

func (fake *TKGConfigBomClient) GetDefaultTkrBOMConfigurationReturns(result1 *tkgconfigbom.BOMConfiguration, result2 error) {
	fake.getDefaultTkrBOMConfigurationMutex.Lock()
	defer fake.getDefaultTkrBOMConfigurationMutex.Unlock()
	fake.GetDefaultTkrBOMConfigurationStub = nil
	fake.getDefaultTkrBOMConfigurationReturns = struct {
		result1 *tkgconfigbom.BOMConfiguration
		result2 error
	}{result1, result2}
}

func (fake *TKGConfigBomClient) GetDefaultTkrBOMConfigurationReturnsOnCall(i int, result1 *tkgconfigbom.BOMConfiguration, result2 error) {
	fake.getDefaultTkrBOMConfigurationMutex.Lock()
	defer fake.getDefaultTkrBOMConfigurationMutex.Unlock()
	fake.GetDefaultTkrBOMConfigurationStub = nil
	if fake.getDefaultTkrBOMConfigurationReturnsOnCall == nil {
		fake.getDefaultTkrBOMConfigurationReturnsOnCall = make(map[int]struct {
			result1 *tkgconfigbom.BOMConfiguration
			result2 error
		})
	}
	fake.getDefaultTkrBOMConfigurationReturnsOnCall[i] = struct {
		result1 *tkgconfigbom.BOMConfiguration
		result2 error
	}{result1, result2}
}

func (fake *TKGConfigBomClient) GetK8sVersionFromTkrVersion(arg1 string) (string, error) {
	fake.getK8sVersionFromTkrVersionMutex.Lock()
	ret, specificReturn := fake.getK8sVersionFromTkrVersionReturnsOnCall[len(fake.getK8sVersionFromTkrVersionArgsForCall)]
	fake.getK8sVersionFromTkrVersionArgsForCall = append(fake.getK8sVersionFromTkrVersionArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetK8sVersionFromTkrVersionStub
	fakeReturns := fake.getK8sVersionFromTkrVersionReturns
	fake.recordInvocation("GetK8sVersionFromTkrVersion", []interface{}{arg1})
	fake.getK8sVersionFromTkrVersionMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *TKGConfigBomClient) GetK8sVersionFromTkrVersionCallCount() int {
	fake.getK8sVersionFromTkrVersionMutex.RLock()
	defer fake.getK8sVersionFromTkrVersionMutex.RUnlock()
	return len(fake.getK8sVersionFromTkrVersionArgsForCall)
}

func (fake *TKGConfigBomClient) GetK8sVersionFromTkrVersionCalls(stub func(string) (string, error)) {
	fake.getK8sVersionFromTkrVersionMutex.Lock()
	defer fake.getK8sVersionFromTkrVersionMutex.Unlock()
	fake.GetK8sVersionFromTkrVersionStub = stub
}

func (fake *TKGConfigBomClient) GetK8sVersionFromTkrVersionArgsForCall(i int) string {
	fake.getK8sVersionFromTkrVersionMutex.RLock()
	defer fake.getK8sVersionFromTkrVersionMutex.RUnlock()
	argsForCall := fake.getK8sVersionFromTkrVersionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *TKGConfigBomClient) GetK8sVersionFromTkrVersionReturns(result1 string, result2 error) {
	fake.getK8sVersionFromTkrVersionMutex.Lock()
	defer fake.getK8sVersionFromTkrVersionMutex.Unlock()
	fake.GetK8sVersionFromTkrVersionStub = nil
	fake.getK8sVersionFromTkrVersionReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *TKGConfigBomClient) GetK8sVersionFromTkrVersionReturnsOnCall(i int, result1 string, result2 error) {
	fake.getK8sVersionFromTkrVersionMutex.Lock()
	defer fake.getK8sVersionFromTkrVersionMutex.Unlock()
	fake.GetK8sVersionFromTkrVersionStub = nil
	if fake.getK8sVersionFromTkrVersionReturnsOnCall == nil {
		fake.getK8sVersionFromTkrVersionReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getK8sVersionFromTkrVersionReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *TKGConfigBomClient) GetKappControllerPackageImage() (string, error) {
	fake.getKappControllerPackageImageMutex.Lock()
	ret, specificReturn := fake.getKappControllerPackageImageReturnsOnCall[len(fake.getKappControllerPackageImageArgsForCall)]
	fake.getKappControllerPackageImageArgsForCall = append(fake.getKappControllerPackageImageArgsForCall, struct {
	}{})
	stub := fake.GetKappControllerPackageImageStub
	fakeReturns := fake.getKappControllerPackageImageReturns
	fake.recordInvocation("GetKappControllerPackageImage", []interface{}{})
	fake.getKappControllerPackageImageMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *TKGConfigBomClient) GetKappControllerPackageImageCallCount() int {
	fake.getKappControllerPackageImageMutex.RLock()
	defer fake.getKappControllerPackageImageMutex.RUnlock()
	return len(fake.getKappControllerPackageImageArgsForCall)
}

func (fake *TKGConfigBomClient) GetKappControllerPackageImageCalls(stub func() (string, error)) {
	fake.getKappControllerPackageImageMutex.Lock()
	defer fake.getKappControllerPackageImageMutex.Unlock()
	fake.GetKappControllerPackageImageStub = stub
}

func (fake *TKGConfigBomClient) GetKappControllerPackageImageReturns(result1 string, result2 error) {
	fake.getKappControllerPackageImageMutex.Lock()
	defer fake.getKappControllerPackageImageMutex.Unlock()
	fake.GetKappControllerPackageImageStub = nil
	fake.getKappControllerPackageImageReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *TKGConfigBomClient) GetKappControllerPackageImageReturnsOnCall(i int, result1 string, result2 error) {
	fake.getKappControllerPackageImageMutex.Lock()
	defer fake.getKappControllerPackageImageMutex.Unlock()
	fake.GetKappControllerPackageImageStub = nil
	if fake.getKappControllerPackageImageReturnsOnCall == nil {
		fake.getKappControllerPackageImageReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getKappControllerPackageImageReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *TKGConfigBomClient) GetManagementPackageRepositoryImage() (string, error) {
	fake.getManagementPackageRepositoryImageMutex.Lock()
	ret, specificReturn := fake.getManagementPackageRepositoryImageReturnsOnCall[len(fake.getManagementPackageRepositoryImageArgsForCall)]
	fake.getManagementPackageRepositoryImageArgsForCall = append(fake.getManagementPackageRepositoryImageArgsForCall, struct {
	}{})
	stub := fake.GetManagementPackageRepositoryImageStub
	fakeReturns := fake.getManagementPackageRepositoryImageReturns
	fake.recordInvocation("GetManagementPackageRepositoryImage", []interface{}{})
	fake.getManagementPackageRepositoryImageMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *TKGConfigBomClient) GetManagementPackageRepositoryImageCallCount() int {
	fake.getManagementPackageRepositoryImageMutex.RLock()
	defer fake.getManagementPackageRepositoryImageMutex.RUnlock()
	return len(fake.getManagementPackageRepositoryImageArgsForCall)
}

func (fake *TKGConfigBomClient) GetManagementPackageRepositoryImageCalls(stub func() (string, error)) {
	fake.getManagementPackageRepositoryImageMutex.Lock()
	defer fake.getManagementPackageRepositoryImageMutex.Unlock()
	fake.GetManagementPackageRepositoryImageStub = stub
}

func (fake *TKGConfigBomClient) GetManagementPackageRepositoryImageReturns(result1 string, result2 error) {
	fake.getManagementPackageRepositoryImageMutex.Lock()
	defer fake.getManagementPackageRepositoryImageMutex.Unlock()
	fake.GetManagementPackageRepositoryImageStub = nil
	fake.getManagementPackageRepositoryImageReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *TKGConfigBomClient) GetManagementPackageRepositoryImageReturnsOnCall(i int, result1 string, result2 error) {
	fake.getManagementPackageRepositoryImageMutex.Lock()
	defer fake.getManagementPackageRepositoryImageMutex.Unlock()
	fake.GetManagementPackageRepositoryImageStub = nil
	if fake.getManagementPackageRepositoryImageReturnsOnCall == nil {
		fake.getManagementPackageRepositoryImageReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getManagementPackageRepositoryImageReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *TKGConfigBomClient) GetManagementPackagesVersion() (string, error) {
	fake.getManagementPackagesVersionMutex.Lock()
	ret, specificReturn := fake.getManagementPackagesVersionReturnsOnCall[len(fake.getManagementPackagesVersionArgsForCall)]
	fake.getManagementPackagesVersionArgsForCall = append(fake.getManagementPackagesVersionArgsForCall, struct {
	}{})
	stub := fake.GetManagementPackagesVersionStub
	fakeReturns := fake.getManagementPackagesVersionReturns
	fake.recordInvocation("GetManagementPackagesVersion", []interface{}{})
	fake.getManagementPackagesVersionMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *TKGConfigBomClient) GetManagementPackagesVersionCallCount() int {
	fake.getManagementPackagesVersionMutex.RLock()
	defer fake.getManagementPackagesVersionMutex.RUnlock()
	return len(fake.getManagementPackagesVersionArgsForCall)
}

func (fake *TKGConfigBomClient) GetManagementPackagesVersionCalls(stub func() (string, error)) {
	fake.getManagementPackagesVersionMutex.Lock()
	defer fake.getManagementPackagesVersionMutex.Unlock()
	fake.GetManagementPackagesVersionStub = stub
}

func (fake *TKGConfigBomClient) GetManagementPackagesVersionReturns(result1 string, result2 error) {
	fake.getManagementPackagesVersionMutex.Lock()
	defer fake.getManagementPackagesVersionMutex.Unlock()
	fake.GetManagementPackagesVersionStub = nil
	fake.getManagementPackagesVersionReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *TKGConfigBomClient) GetManagementPackagesVersionReturnsOnCall(i int, result1 string, result2 error) {
	fake.getManagementPackagesVersionMutex.Lock()
	defer fake.getManagementPackagesVersionMutex.Unlock()
	fake.GetManagementPackagesVersionStub = nil
	if fake.getManagementPackagesVersionReturnsOnCall == nil {
		fake.getManagementPackagesVersionReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getManagementPackagesVersionReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *TKGConfigBomClient) InitBOMRegistry() (registry.Registry, error) {
	fake.initBOMRegistryMutex.Lock()
	ret, specificReturn := fake.initBOMRegistryReturnsOnCall[len(fake.initBOMRegistryArgsForCall)]
	fake.initBOMRegistryArgsForCall = append(fake.initBOMRegistryArgsForCall, struct {
	}{})
	stub := fake.InitBOMRegistryStub
	fakeReturns := fake.initBOMRegistryReturns
	fake.recordInvocation("InitBOMRegistry", []interface{}{})
	fake.initBOMRegistryMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *TKGConfigBomClient) InitBOMRegistryCallCount() int {
	fake.initBOMRegistryMutex.RLock()
	defer fake.initBOMRegistryMutex.RUnlock()
	return len(fake.initBOMRegistryArgsForCall)
}

func (fake *TKGConfigBomClient) InitBOMRegistryCalls(stub func() (registry.Registry, error)) {
	fake.initBOMRegistryMutex.Lock()
	defer fake.initBOMRegistryMutex.Unlock()
	fake.InitBOMRegistryStub = stub
}

func (fake *TKGConfigBomClient) InitBOMRegistryReturns(result1 registry.Registry, result2 error) {
	fake.initBOMRegistryMutex.Lock()
	defer fake.initBOMRegistryMutex.Unlock()
	fake.InitBOMRegistryStub = nil
	fake.initBOMRegistryReturns = struct {
		result1 registry.Registry
		result2 error
	}{result1, result2}
}

func (fake *TKGConfigBomClient) InitBOMRegistryReturnsOnCall(i int, result1 registry.Registry, result2 error) {
	fake.initBOMRegistryMutex.Lock()
	defer fake.initBOMRegistryMutex.Unlock()
	fake.InitBOMRegistryStub = nil
	if fake.initBOMRegistryReturnsOnCall == nil {
		fake.initBOMRegistryReturnsOnCall = make(map[int]struct {
			result1 registry.Registry
			result2 error
		})
	}
	fake.initBOMRegistryReturnsOnCall[i] = struct {
		result1 registry.Registry
		result2 error
	}{result1, result2}
}

func (fake *TKGConfigBomClient) IsCustomRepositorySkipTLSVerify() bool {
	fake.isCustomRepositorySkipTLSVerifyMutex.Lock()
	ret, specificReturn := fake.isCustomRepositorySkipTLSVerifyReturnsOnCall[len(fake.isCustomRepositorySkipTLSVerifyArgsForCall)]
	fake.isCustomRepositorySkipTLSVerifyArgsForCall = append(fake.isCustomRepositorySkipTLSVerifyArgsForCall, struct {
	}{})
	stub := fake.IsCustomRepositorySkipTLSVerifyStub
	fakeReturns := fake.isCustomRepositorySkipTLSVerifyReturns
	fake.recordInvocation("IsCustomRepositorySkipTLSVerify", []interface{}{})
	fake.isCustomRepositorySkipTLSVerifyMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *TKGConfigBomClient) IsCustomRepositorySkipTLSVerifyCallCount() int {
	fake.isCustomRepositorySkipTLSVerifyMutex.RLock()
	defer fake.isCustomRepositorySkipTLSVerifyMutex.RUnlock()
	return len(fake.isCustomRepositorySkipTLSVerifyArgsForCall)
}

func (fake *TKGConfigBomClient) IsCustomRepositorySkipTLSVerifyCalls(stub func() bool) {
	fake.isCustomRepositorySkipTLSVerifyMutex.Lock()
	defer fake.isCustomRepositorySkipTLSVerifyMutex.Unlock()
	fake.IsCustomRepositorySkipTLSVerifyStub = stub
}

func (fake *TKGConfigBomClient) IsCustomRepositorySkipTLSVerifyReturns(result1 bool) {
	fake.isCustomRepositorySkipTLSVerifyMutex.Lock()
	defer fake.isCustomRepositorySkipTLSVerifyMutex.Unlock()
	fake.IsCustomRepositorySkipTLSVerifyStub = nil
	fake.isCustomRepositorySkipTLSVerifyReturns = struct {
		result1 bool
	}{result1}
}

func (fake *TKGConfigBomClient) IsCustomRepositorySkipTLSVerifyReturnsOnCall(i int, result1 bool) {
	fake.isCustomRepositorySkipTLSVerifyMutex.Lock()
	defer fake.isCustomRepositorySkipTLSVerifyMutex.Unlock()
	fake.IsCustomRepositorySkipTLSVerifyStub = nil
	if fake.isCustomRepositorySkipTLSVerifyReturnsOnCall == nil {
		fake.isCustomRepositorySkipTLSVerifyReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.isCustomRepositorySkipTLSVerifyReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *TKGConfigBomClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.downloadDefaultBOMFilesFromRegistryMutex.RLock()
	defer fake.downloadDefaultBOMFilesFromRegistryMutex.RUnlock()
	fake.downloadTKGCompatibilityFileFromRegistryMutex.RLock()
	defer fake.downloadTKGCompatibilityFileFromRegistryMutex.RUnlock()
	fake.getAutoscalerImageForK8sVersionMutex.RLock()
	defer fake.getAutoscalerImageForK8sVersionMutex.RUnlock()
	fake.getAvailableK8sVersionsFromBOMFilesMutex.RLock()
	defer fake.getAvailableK8sVersionsFromBOMFilesMutex.RUnlock()
	fake.getBOMConfigurationFromTkrVersionMutex.RLock()
	defer fake.getBOMConfigurationFromTkrVersionMutex.RUnlock()
	fake.getCurrentTKGVersionMutex.RLock()
	defer fake.getCurrentTKGVersionMutex.RUnlock()
	fake.getCustomRepositoryMutex.RLock()
	defer fake.getCustomRepositoryMutex.RUnlock()
	fake.getDefaultBoMFileNameMutex.RLock()
	defer fake.getDefaultBoMFileNameMutex.RUnlock()
	fake.getDefaultBoMFilePathMutex.RLock()
	defer fake.getDefaultBoMFilePathMutex.RUnlock()
	fake.getDefaultClusterAPIProvidersMutex.RLock()
	defer fake.getDefaultClusterAPIProvidersMutex.RUnlock()
	fake.getDefaultK8sVersionMutex.RLock()
	defer fake.getDefaultK8sVersionMutex.RUnlock()
	fake.getDefaultTKGReleaseVersionMutex.RLock()
	defer fake.getDefaultTKGReleaseVersionMutex.RUnlock()
	fake.getDefaultTKRVersionMutex.RLock()
	defer fake.getDefaultTKRVersionMutex.RUnlock()
	fake.getDefaultTkgBOMConfigurationMutex.RLock()
	defer fake.getDefaultTkgBOMConfigurationMutex.RUnlock()
	fake.getDefaultTkrBOMConfigurationMutex.RLock()
	defer fake.getDefaultTkrBOMConfigurationMutex.RUnlock()
	fake.getK8sVersionFromTkrVersionMutex.RLock()
	defer fake.getK8sVersionFromTkrVersionMutex.RUnlock()
	fake.getKappControllerPackageImageMutex.RLock()
	defer fake.getKappControllerPackageImageMutex.RUnlock()
	fake.getManagementPackageRepositoryImageMutex.RLock()
	defer fake.getManagementPackageRepositoryImageMutex.RUnlock()
	fake.getManagementPackagesVersionMutex.RLock()
	defer fake.getManagementPackagesVersionMutex.RUnlock()
	fake.initBOMRegistryMutex.RLock()
	defer fake.initBOMRegistryMutex.RUnlock()
	fake.isCustomRepositorySkipTLSVerifyMutex.RLock()
	defer fake.isCustomRepositorySkipTLSVerifyMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *TKGConfigBomClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ tkgconfigbom.Client = new(TKGConfigBomClient)
