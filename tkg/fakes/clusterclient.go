// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"
	"time"

	v1a "k8s.io/api/apps/v1"
	v1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
	"k8s.io/apimachinery/pkg/types"
	"sigs.k8s.io/cluster-api-provider-aws/v2/api/v1beta2"
	v1beta1a "sigs.k8s.io/cluster-api/api/v1beta1"
	v1alpha3a "sigs.k8s.io/cluster-api/cmd/clusterctl/api/v1alpha3"
	"sigs.k8s.io/cluster-api/controlplane/kubeadm/api/v1beta1"
	"sigs.k8s.io/controller-runtime/pkg/client"

	"github.com/vmware-tanzu/carvel-kapp-controller/pkg/apiserver/apis/datapackaging/v1alpha1"
	v1alpha1b "github.com/vmware-tanzu/tanzu-framework/apis/cli/v1alpha1"
	v1alpha1a "github.com/vmware-tanzu/tanzu-framework/apis/run/v1alpha1"
	"github.com/vmware-tanzu/tanzu-framework/apis/run/v1alpha2"
	"github.com/vmware-tanzu/tanzu-framework/apis/run/v1alpha3"
	"github.com/vmware-tanzu/tanzu-framework/tkg/azure"
	"github.com/vmware-tanzu/tanzu-framework/tkg/clusterclient"
	"github.com/vmware-tanzu/tanzu-framework/tkg/tkgconfigbom"
	"github.com/vmware-tanzu/tanzu-framework/tkg/vc"
)

type ClusterClient struct {
	ActivateTanzuKubernetesReleasesStub        func(string) error
	activateTanzuKubernetesReleasesMutex       sync.RWMutex
	activateTanzuKubernetesReleasesArgsForCall []struct {
		arg1 string
	}
	activateTanzuKubernetesReleasesReturns struct {
		result1 error
	}
	activateTanzuKubernetesReleasesReturnsOnCall map[int]struct {
		result1 error
	}
	AddCEIPTelemetryJobStub        func(string, string, *tkgconfigbom.BOMConfiguration, string, string, string, string, string) error
	addCEIPTelemetryJobMutex       sync.RWMutex
	addCEIPTelemetryJobArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 *tkgconfigbom.BOMConfiguration
		arg4 string
		arg5 string
		arg6 string
		arg7 string
		arg8 string
	}
	addCEIPTelemetryJobReturns struct {
		result1 error
	}
	addCEIPTelemetryJobReturnsOnCall map[int]struct {
		result1 error
	}
	ApplyStub        func(string) error
	applyMutex       sync.RWMutex
	applyArgsForCall []struct {
		arg1 string
	}
	applyReturns struct {
		result1 error
	}
	applyReturnsOnCall map[int]struct {
		result1 error
	}
	ApplyFileStub        func(string) error
	applyFileMutex       sync.RWMutex
	applyFileArgsForCall []struct {
		arg1 string
	}
	applyFileReturns struct {
		result1 error
	}
	applyFileReturnsOnCall map[int]struct {
		result1 error
	}
	ApplyFileRecursivelyStub        func(string, string) error
	applyFileRecursivelyMutex       sync.RWMutex
	applyFileRecursivelyArgsForCall []struct {
		arg1 string
		arg2 string
	}
	applyFileRecursivelyReturns struct {
		result1 error
	}
	applyFileRecursivelyReturnsOnCall map[int]struct {
		result1 error
	}
	ApplyPatchForAutoScalerDeploymentStub        func(tkgconfigbom.Client, string, string, string) error
	applyPatchForAutoScalerDeploymentMutex       sync.RWMutex
	applyPatchForAutoScalerDeploymentArgsForCall []struct {
		arg1 tkgconfigbom.Client
		arg2 string
		arg3 string
		arg4 string
	}
	applyPatchForAutoScalerDeploymentReturns struct {
		result1 error
	}
	applyPatchForAutoScalerDeploymentReturnsOnCall map[int]struct {
		result1 error
	}
	CheckUnifiedAzureClusterIdentityStub        func(string, string) (bool, error)
	checkUnifiedAzureClusterIdentityMutex       sync.RWMutex
	checkUnifiedAzureClusterIdentityArgsForCall []struct {
		arg1 string
		arg2 string
	}
	checkUnifiedAzureClusterIdentityReturns struct {
		result1 bool
		result2 error
	}
	checkUnifiedAzureClusterIdentityReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	CloneWithTimeoutStub        func(time.Duration) clusterclient.Client
	cloneWithTimeoutMutex       sync.RWMutex
	cloneWithTimeoutArgsForCall []struct {
		arg1 time.Duration
	}
	cloneWithTimeoutReturns struct {
		result1 clusterclient.Client
	}
	cloneWithTimeoutReturnsOnCall map[int]struct {
		result1 clusterclient.Client
	}
	CreateNamespaceStub        func(string) error
	createNamespaceMutex       sync.RWMutex
	createNamespaceArgsForCall []struct {
		arg1 string
	}
	createNamespaceReturns struct {
		result1 error
	}
	createNamespaceReturnsOnCall map[int]struct {
		result1 error
	}
	CreateResourceStub        func(interface{}, string, string, ...client.CreateOption) error
	createResourceMutex       sync.RWMutex
	createResourceArgsForCall []struct {
		arg1 interface{}
		arg2 string
		arg3 string
		arg4 []client.CreateOption
	}
	createResourceReturns struct {
		result1 error
	}
	createResourceReturnsOnCall map[int]struct {
		result1 error
	}
	DeactivateTanzuKubernetesReleasesStub        func(string) error
	deactivateTanzuKubernetesReleasesMutex       sync.RWMutex
	deactivateTanzuKubernetesReleasesArgsForCall []struct {
		arg1 string
	}
	deactivateTanzuKubernetesReleasesReturns struct {
		result1 error
	}
	deactivateTanzuKubernetesReleasesReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteClusterStub        func(string, string) error
	deleteClusterMutex       sync.RWMutex
	deleteClusterArgsForCall []struct {
		arg1 string
		arg2 string
	}
	deleteClusterReturns struct {
		result1 error
	}
	deleteClusterReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteExistingKappControllerStub        func() error
	deleteExistingKappControllerMutex       sync.RWMutex
	deleteExistingKappControllerArgsForCall []struct {
	}
	deleteExistingKappControllerReturns struct {
		result1 error
	}
	deleteExistingKappControllerReturnsOnCall map[int]struct {
		result1 error
	}
	DeleteResourceStub        func(interface{}) error
	deleteResourceMutex       sync.RWMutex
	deleteResourceArgsForCall []struct {
		arg1 interface{}
	}
	deleteResourceReturns struct {
		result1 error
	}
	deleteResourceReturnsOnCall map[int]struct {
		result1 error
	}
	ExportCurrentKubeconfigToFileStub        func() (string, error)
	exportCurrentKubeconfigToFileMutex       sync.RWMutex
	exportCurrentKubeconfigToFileArgsForCall []struct {
	}
	exportCurrentKubeconfigToFileReturns struct {
		result1 string
		result2 error
	}
	exportCurrentKubeconfigToFileReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GetAWSCredentialsFromSecretStub        func() (string, error)
	getAWSCredentialsFromSecretMutex       sync.RWMutex
	getAWSCredentialsFromSecretArgsForCall []struct {
	}
	getAWSCredentialsFromSecretReturns struct {
		result1 string
		result2 error
	}
	getAWSCredentialsFromSecretReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GetAzureCredentialsFromSecretStub        func() (azure.Credentials, error)
	getAzureCredentialsFromSecretMutex       sync.RWMutex
	getAzureCredentialsFromSecretArgsForCall []struct {
	}
	getAzureCredentialsFromSecretReturns struct {
		result1 azure.Credentials
		result2 error
	}
	getAzureCredentialsFromSecretReturnsOnCall map[int]struct {
		result1 azure.Credentials
		result2 error
	}
	GetBomConfigMapStub        func(string) (v1.ConfigMap, error)
	getBomConfigMapMutex       sync.RWMutex
	getBomConfigMapArgsForCall []struct {
		arg1 string
	}
	getBomConfigMapReturns struct {
		result1 v1.ConfigMap
		result2 error
	}
	getBomConfigMapReturnsOnCall map[int]struct {
		result1 v1.ConfigMap
		result2 error
	}
	GetCAPZControllerManagerDeploymentsReplicasStub        func() (int32, error)
	getCAPZControllerManagerDeploymentsReplicasMutex       sync.RWMutex
	getCAPZControllerManagerDeploymentsReplicasArgsForCall []struct {
	}
	getCAPZControllerManagerDeploymentsReplicasReturns struct {
		result1 int32
		result2 error
	}
	getCAPZControllerManagerDeploymentsReplicasReturnsOnCall map[int]struct {
		result1 int32
		result2 error
	}
	GetCLIPluginImageRepositoryOverrideStub        func() (map[string]string, error)
	getCLIPluginImageRepositoryOverrideMutex       sync.RWMutex
	getCLIPluginImageRepositoryOverrideArgsForCall []struct {
	}
	getCLIPluginImageRepositoryOverrideReturns struct {
		result1 map[string]string
		result2 error
	}
	getCLIPluginImageRepositoryOverrideReturnsOnCall map[int]struct {
		result1 map[string]string
		result2 error
	}
	GetClientSetStub        func() clusterclient.CrtClient
	getClientSetMutex       sync.RWMutex
	getClientSetArgsForCall []struct {
	}
	getClientSetReturns struct {
		result1 clusterclient.CrtClient
	}
	getClientSetReturnsOnCall map[int]struct {
		result1 clusterclient.CrtClient
	}
	GetClusterInfrastructureStub        func() (string, error)
	getClusterInfrastructureMutex       sync.RWMutex
	getClusterInfrastructureArgsForCall []struct {
	}
	getClusterInfrastructureReturns struct {
		result1 string
		result2 error
	}
	getClusterInfrastructureReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GetClusterResolvedOSImagesFromTKRStub        func(*v1alpha3.TanzuKubernetesRelease) ([]*v1alpha3.OSImage, error)
	getClusterResolvedOSImagesFromTKRMutex       sync.RWMutex
	getClusterResolvedOSImagesFromTKRArgsForCall []struct {
		arg1 *v1alpha3.TanzuKubernetesRelease
	}
	getClusterResolvedOSImagesFromTKRReturns struct {
		result1 []*v1alpha3.OSImage
		result2 error
	}
	getClusterResolvedOSImagesFromTKRReturnsOnCall map[int]struct {
		result1 []*v1alpha3.OSImage
		result2 error
	}
	GetClusterResolvedTanzuKubernetesReleaseStub        func() (*v1alpha3.TanzuKubernetesRelease, error)
	getClusterResolvedTanzuKubernetesReleaseMutex       sync.RWMutex
	getClusterResolvedTanzuKubernetesReleaseArgsForCall []struct {
	}
	getClusterResolvedTanzuKubernetesReleaseReturns struct {
		result1 *v1alpha3.TanzuKubernetesRelease
		result2 error
	}
	getClusterResolvedTanzuKubernetesReleaseReturnsOnCall map[int]struct {
		result1 *v1alpha3.TanzuKubernetesRelease
		result2 error
	}
	GetClusterStatusInfoStub        func(string, string, clusterclient.Client) clusterclient.ClusterStatusInfo
	getClusterStatusInfoMutex       sync.RWMutex
	getClusterStatusInfoArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 clusterclient.Client
	}
	getClusterStatusInfoReturns struct {
		result1 clusterclient.ClusterStatusInfo
	}
	getClusterStatusInfoReturnsOnCall map[int]struct {
		result1 clusterclient.ClusterStatusInfo
	}
	GetCurrentClusterNameStub        func(string) (string, error)
	getCurrentClusterNameMutex       sync.RWMutex
	getCurrentClusterNameArgsForCall []struct {
		arg1 string
	}
	getCurrentClusterNameReturns struct {
		result1 string
		result2 error
	}
	getCurrentClusterNameReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GetCurrentKubeContextStub        func() (string, error)
	getCurrentKubeContextMutex       sync.RWMutex
	getCurrentKubeContextArgsForCall []struct {
	}
	getCurrentKubeContextReturns struct {
		result1 string
		result2 error
	}
	getCurrentKubeContextReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GetCurrentKubeconfigFileStub        func() string
	getCurrentKubeconfigFileMutex       sync.RWMutex
	getCurrentKubeconfigFileArgsForCall []struct {
	}
	getCurrentKubeconfigFileReturns struct {
		result1 string
	}
	getCurrentKubeconfigFileReturnsOnCall map[int]struct {
		result1 string
	}
	GetCurrentNamespaceStub        func() (string, error)
	getCurrentNamespaceMutex       sync.RWMutex
	getCurrentNamespaceArgsForCall []struct {
	}
	getCurrentNamespaceReturns struct {
		result1 string
		result2 error
	}
	getCurrentNamespaceReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GetDeploymentStub        func(string, string) (v1a.Deployment, error)
	getDeploymentMutex       sync.RWMutex
	getDeploymentArgsForCall []struct {
		arg1 string
		arg2 string
	}
	getDeploymentReturns struct {
		result1 v1a.Deployment
		result2 error
	}
	getDeploymentReturnsOnCall map[int]struct {
		result1 v1a.Deployment
		result2 error
	}
	GetKCPObjectForClusterStub        func(string, string) (*v1beta1.KubeadmControlPlane, error)
	getKCPObjectForClusterMutex       sync.RWMutex
	getKCPObjectForClusterArgsForCall []struct {
		arg1 string
		arg2 string
	}
	getKCPObjectForClusterReturns struct {
		result1 *v1beta1.KubeadmControlPlane
		result2 error
	}
	getKCPObjectForClusterReturnsOnCall map[int]struct {
		result1 *v1beta1.KubeadmControlPlane
		result2 error
	}
	GetKubeConfigForClusterStub        func(string, string, *clusterclient.PollOptions) ([]byte, error)
	getKubeConfigForClusterMutex       sync.RWMutex
	getKubeConfigForClusterArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 *clusterclient.PollOptions
	}
	getKubeConfigForClusterReturns struct {
		result1 []byte
		result2 error
	}
	getKubeConfigForClusterReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	GetKubernetesVersionStub        func() (string, error)
	getKubernetesVersionMutex       sync.RWMutex
	getKubernetesVersionArgsForCall []struct {
	}
	getKubernetesVersionReturns struct {
		result1 string
		result2 error
	}
	getKubernetesVersionReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GetMDObjectForClusterStub        func(string, string) ([]v1beta1a.MachineDeployment, error)
	getMDObjectForClusterMutex       sync.RWMutex
	getMDObjectForClusterArgsForCall []struct {
		arg1 string
		arg2 string
	}
	getMDObjectForClusterReturns struct {
		result1 []v1beta1a.MachineDeployment
		result2 error
	}
	getMDObjectForClusterReturnsOnCall map[int]struct {
		result1 []v1beta1a.MachineDeployment
		result2 error
	}
	GetMachineObjectsForClusterStub        func(string, string) (map[string]v1beta1a.Machine, map[string]v1beta1a.Machine, error)
	getMachineObjectsForClusterMutex       sync.RWMutex
	getMachineObjectsForClusterArgsForCall []struct {
		arg1 string
		arg2 string
	}
	getMachineObjectsForClusterReturns struct {
		result1 map[string]v1beta1a.Machine
		result2 map[string]v1beta1a.Machine
		result3 error
	}
	getMachineObjectsForClusterReturnsOnCall map[int]struct {
		result1 map[string]v1beta1a.Machine
		result2 map[string]v1beta1a.Machine
		result3 error
	}
	GetManagementClusterTKGVersionStub        func(string, string) (string, error)
	getManagementClusterTKGVersionMutex       sync.RWMutex
	getManagementClusterTKGVersionArgsForCall []struct {
		arg1 string
		arg2 string
	}
	getManagementClusterTKGVersionReturns struct {
		result1 string
		result2 error
	}
	getManagementClusterTKGVersionReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GetPacificClusterObjectStub        func(string, string) (*v1alpha2.TanzuKubernetesCluster, error)
	getPacificClusterObjectMutex       sync.RWMutex
	getPacificClusterObjectArgsForCall []struct {
		arg1 string
		arg2 string
	}
	getPacificClusterObjectReturns struct {
		result1 *v1alpha2.TanzuKubernetesCluster
		result2 error
	}
	getPacificClusterObjectReturnsOnCall map[int]struct {
		result1 *v1alpha2.TanzuKubernetesCluster
		result2 error
	}
	GetPacificTKCAPIVersionStub        func() (string, error)
	getPacificTKCAPIVersionMutex       sync.RWMutex
	getPacificTKCAPIVersionArgsForCall []struct {
	}
	getPacificTKCAPIVersionReturns struct {
		result1 string
		result2 error
	}
	getPacificTKCAPIVersionReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GetPacificTanzuKubernetesReleasesStub        func() ([]string, error)
	getPacificTanzuKubernetesReleasesMutex       sync.RWMutex
	getPacificTanzuKubernetesReleasesArgsForCall []struct {
	}
	getPacificTanzuKubernetesReleasesReturns struct {
		result1 []string
		result2 error
	}
	getPacificTanzuKubernetesReleasesReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	GetPackageStub        func(string, string) (*v1alpha1.Package, error)
	getPackageMutex       sync.RWMutex
	getPackageArgsForCall []struct {
		arg1 string
		arg2 string
	}
	getPackageReturns struct {
		result1 *v1alpha1.Package
		result2 error
	}
	getPackageReturnsOnCall map[int]struct {
		result1 *v1alpha1.Package
		result2 error
	}
	GetPinnipedIssuerURLAndCAStub        func() (string, string, error)
	getPinnipedIssuerURLAndCAMutex       sync.RWMutex
	getPinnipedIssuerURLAndCAArgsForCall []struct {
	}
	getPinnipedIssuerURLAndCAReturns struct {
		result1 string
		result2 string
		result3 error
	}
	getPinnipedIssuerURLAndCAReturnsOnCall map[int]struct {
		result1 string
		result2 string
		result3 error
	}
	GetRegionalClusterDefaultProviderNameStub        func(v1alpha3a.ProviderType) (string, error)
	getRegionalClusterDefaultProviderNameMutex       sync.RWMutex
	getRegionalClusterDefaultProviderNameArgsForCall []struct {
		arg1 v1alpha3a.ProviderType
	}
	getRegionalClusterDefaultProviderNameReturns struct {
		result1 string
		result2 error
	}
	getRegionalClusterDefaultProviderNameReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GetResourceStub        func(interface{}, string, string, clusterclient.PostVerifyrFunc, *clusterclient.PollOptions) error
	getResourceMutex       sync.RWMutex
	getResourceArgsForCall []struct {
		arg1 interface{}
		arg2 string
		arg3 string
		arg4 clusterclient.PostVerifyrFunc
		arg5 *clusterclient.PollOptions
	}
	getResourceReturns struct {
		result1 error
	}
	getResourceReturnsOnCall map[int]struct {
		result1 error
	}
	GetResourceListStub        func(interface{}, string, string, clusterclient.PostVerifyListrFunc, *clusterclient.PollOptions) error
	getResourceListMutex       sync.RWMutex
	getResourceListArgsForCall []struct {
		arg1 interface{}
		arg2 string
		arg3 string
		arg4 clusterclient.PostVerifyListrFunc
		arg5 *clusterclient.PollOptions
	}
	getResourceListReturns struct {
		result1 error
	}
	getResourceListReturnsOnCall map[int]struct {
		result1 error
	}
	GetSecretValueStub        func(string, string, string, *clusterclient.PollOptions) ([]byte, error)
	getSecretValueMutex       sync.RWMutex
	getSecretValueArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 *clusterclient.PollOptions
	}
	getSecretValueReturns struct {
		result1 []byte
		result2 error
	}
	getSecretValueReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	GetTanzuKubernetesReleasesStub        func(string) ([]v1alpha1a.TanzuKubernetesRelease, error)
	getTanzuKubernetesReleasesMutex       sync.RWMutex
	getTanzuKubernetesReleasesArgsForCall []struct {
		arg1 string
	}
	getTanzuKubernetesReleasesReturns struct {
		result1 []v1alpha1a.TanzuKubernetesRelease
		result2 error
	}
	getTanzuKubernetesReleasesReturnsOnCall map[int]struct {
		result1 []v1alpha1a.TanzuKubernetesRelease
		result2 error
	}
	GetVCClientAndDataCenterStub        func(string, string, string, vc.VcClientFactory) (vc.Client, string, error)
	getVCClientAndDataCenterMutex       sync.RWMutex
	getVCClientAndDataCenterArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 vc.VcClientFactory
	}
	getVCClientAndDataCenterReturns struct {
		result1 vc.Client
		result2 string
		result3 error
	}
	getVCClientAndDataCenterReturnsOnCall map[int]struct {
		result1 vc.Client
		result2 string
		result3 error
	}
	GetVCCredentialsFromClusterStub        func(string, string) (string, string, error)
	getVCCredentialsFromClusterMutex       sync.RWMutex
	getVCCredentialsFromClusterArgsForCall []struct {
		arg1 string
		arg2 string
	}
	getVCCredentialsFromClusterReturns struct {
		result1 string
		result2 string
		result3 error
	}
	getVCCredentialsFromClusterReturnsOnCall map[int]struct {
		result1 string
		result2 string
		result3 error
	}
	GetVCCredentialsFromSecretStub        func(string) (string, string, error)
	getVCCredentialsFromSecretMutex       sync.RWMutex
	getVCCredentialsFromSecretArgsForCall []struct {
		arg1 string
	}
	getVCCredentialsFromSecretReturns struct {
		result1 string
		result2 string
		result3 error
	}
	getVCCredentialsFromSecretReturnsOnCall map[int]struct {
		result1 string
		result2 string
		result3 error
	}
	GetVCServerStub        func() (string, error)
	getVCServerMutex       sync.RWMutex
	getVCServerArgsForCall []struct {
	}
	getVCServerReturns struct {
		result1 string
		result2 error
	}
	getVCServerReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	HasCEIPTelemetryJobStub        func(string) (bool, error)
	hasCEIPTelemetryJobMutex       sync.RWMutex
	hasCEIPTelemetryJobArgsForCall []struct {
		arg1 string
	}
	hasCEIPTelemetryJobReturns struct {
		result1 bool
		result2 error
	}
	hasCEIPTelemetryJobReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	IsClusterClassBasedStub        func(string, string) (bool, error)
	isClusterClassBasedMutex       sync.RWMutex
	isClusterClassBasedArgsForCall []struct {
		arg1 string
		arg2 string
	}
	isClusterClassBasedReturns struct {
		result1 bool
		result2 error
	}
	isClusterClassBasedReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	IsClusterRegisteredToTMCStub        func() (bool, error)
	isClusterRegisteredToTMCMutex       sync.RWMutex
	isClusterRegisteredToTMCArgsForCall []struct {
	}
	isClusterRegisteredToTMCReturns struct {
		result1 bool
		result2 error
	}
	isClusterRegisteredToTMCReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	IsPacificRegionalClusterStub        func() (bool, error)
	isPacificRegionalClusterMutex       sync.RWMutex
	isPacificRegionalClusterArgsForCall []struct {
	}
	isPacificRegionalClusterReturns struct {
		result1 bool
		result2 error
	}
	isPacificRegionalClusterReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	IsRegionalClusterStub        func() error
	isRegionalClusterMutex       sync.RWMutex
	isRegionalClusterArgsForCall []struct {
	}
	isRegionalClusterReturns struct {
		result1 error
	}
	isRegionalClusterReturnsOnCall map[int]struct {
		result1 error
	}
	ListCLIPluginResourcesStub        func() ([]v1alpha1b.CLIPlugin, error)
	listCLIPluginResourcesMutex       sync.RWMutex
	listCLIPluginResourcesArgsForCall []struct {
	}
	listCLIPluginResourcesReturns struct {
		result1 []v1alpha1b.CLIPlugin
		result2 error
	}
	listCLIPluginResourcesReturnsOnCall map[int]struct {
		result1 []v1alpha1b.CLIPlugin
		result2 error
	}
	ListClustersStub        func(string) ([]v1beta1a.Cluster, error)
	listClustersMutex       sync.RWMutex
	listClustersArgsForCall []struct {
		arg1 string
	}
	listClustersReturns struct {
		result1 []v1beta1a.Cluster
		result2 error
	}
	listClustersReturnsOnCall map[int]struct {
		result1 []v1beta1a.Cluster
		result2 error
	}
	ListPacificClusterObjectsStub        func(string, *client.ListOptions) ([]interface{}, error)
	listPacificClusterObjectsMutex       sync.RWMutex
	listPacificClusterObjectsArgsForCall []struct {
		arg1 string
		arg2 *client.ListOptions
	}
	listPacificClusterObjectsReturns struct {
		result1 []interface{}
		result2 error
	}
	listPacificClusterObjectsReturnsOnCall map[int]struct {
		result1 []interface{}
		result2 error
	}
	ListResourcesStub        func(interface{}, ...client.ListOption) error
	listResourcesMutex       sync.RWMutex
	listResourcesArgsForCall []struct {
		arg1 interface{}
		arg2 []client.ListOption
	}
	listResourcesReturns struct {
		result1 error
	}
	listResourcesReturnsOnCall map[int]struct {
		result1 error
	}
	LoadCurrentKubeconfigBytesStub        func() ([]byte, error)
	loadCurrentKubeconfigBytesMutex       sync.RWMutex
	loadCurrentKubeconfigBytesArgsForCall []struct {
	}
	loadCurrentKubeconfigBytesReturns struct {
		result1 []byte
		result2 error
	}
	loadCurrentKubeconfigBytesReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	MergeAndUseConfigForClusterStub        func([]byte, string) (string, string, error)
	mergeAndUseConfigForClusterMutex       sync.RWMutex
	mergeAndUseConfigForClusterArgsForCall []struct {
		arg1 []byte
		arg2 string
	}
	mergeAndUseConfigForClusterReturns struct {
		result1 string
		result2 string
		result3 error
	}
	mergeAndUseConfigForClusterReturnsOnCall map[int]struct {
		result1 string
		result2 string
		result3 error
	}
	MergeConfigForClusterStub        func([]byte, string) error
	mergeConfigForClusterMutex       sync.RWMutex
	mergeConfigForClusterArgsForCall []struct {
		arg1 []byte
		arg2 string
	}
	mergeConfigForClusterReturns struct {
		result1 error
	}
	mergeConfigForClusterReturnsOnCall map[int]struct {
		result1 error
	}
	PatchCalicoKubeControllerDeploymentWithNewNodeSelectorStub        func(string, string) error
	patchCalicoKubeControllerDeploymentWithNewNodeSelectorMutex       sync.RWMutex
	patchCalicoKubeControllerDeploymentWithNewNodeSelectorArgsForCall []struct {
		arg1 string
		arg2 string
	}
	patchCalicoKubeControllerDeploymentWithNewNodeSelectorReturns struct {
		result1 error
	}
	patchCalicoKubeControllerDeploymentWithNewNodeSelectorReturnsOnCall map[int]struct {
		result1 error
	}
	PatchCalicoNodeDaemonSetWithNewNodeSelectorStub        func(string, string) error
	patchCalicoNodeDaemonSetWithNewNodeSelectorMutex       sync.RWMutex
	patchCalicoNodeDaemonSetWithNewNodeSelectorArgsForCall []struct {
		arg1 string
		arg2 string
	}
	patchCalicoNodeDaemonSetWithNewNodeSelectorReturns struct {
		result1 error
	}
	patchCalicoNodeDaemonSetWithNewNodeSelectorReturnsOnCall map[int]struct {
		result1 error
	}
	PatchClusterAPIAWSControllersToUseEC2CredentialsStub        func() error
	patchClusterAPIAWSControllersToUseEC2CredentialsMutex       sync.RWMutex
	patchClusterAPIAWSControllersToUseEC2CredentialsArgsForCall []struct {
	}
	patchClusterAPIAWSControllersToUseEC2CredentialsReturns struct {
		result1 error
	}
	patchClusterAPIAWSControllersToUseEC2CredentialsReturnsOnCall map[int]struct {
		result1 error
	}
	PatchClusterObjectStub        func(string, string, string) error
	patchClusterObjectMutex       sync.RWMutex
	patchClusterObjectArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	patchClusterObjectReturns struct {
		result1 error
	}
	patchClusterObjectReturnsOnCall map[int]struct {
		result1 error
	}
	PatchClusterObjectAnnotationsStub        func(string, string, string, string) error
	patchClusterObjectAnnotationsMutex       sync.RWMutex
	patchClusterObjectAnnotationsArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
	}
	patchClusterObjectAnnotationsReturns struct {
		result1 error
	}
	patchClusterObjectAnnotationsReturnsOnCall map[int]struct {
		result1 error
	}
	PatchClusterObjectWithOptionalMetadataStub        func(string, string, string, map[string]string) (string, error)
	patchClusterObjectWithOptionalMetadataMutex       sync.RWMutex
	patchClusterObjectWithOptionalMetadataArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 map[string]string
	}
	patchClusterObjectWithOptionalMetadataReturns struct {
		result1 string
		result2 error
	}
	patchClusterObjectWithOptionalMetadataReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	PatchClusterObjectWithPollOptionsStub        func(string, string, string, *clusterclient.PollOptions) error
	patchClusterObjectWithPollOptionsMutex       sync.RWMutex
	patchClusterObjectWithPollOptionsArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 *clusterclient.PollOptions
	}
	patchClusterObjectWithPollOptionsReturns struct {
		result1 error
	}
	patchClusterObjectWithPollOptionsReturnsOnCall map[int]struct {
		result1 error
	}
	PatchClusterObjectWithTKGVersionStub        func(string, string, string) error
	patchClusterObjectWithTKGVersionMutex       sync.RWMutex
	patchClusterObjectWithTKGVersionArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	patchClusterObjectWithTKGVersionReturns struct {
		result1 error
	}
	patchClusterObjectWithTKGVersionReturnsOnCall map[int]struct {
		result1 error
	}
	PatchClusterWithOperationStartedStatusStub        func(string, string, string, time.Duration) error
	patchClusterWithOperationStartedStatusMutex       sync.RWMutex
	patchClusterWithOperationStartedStatusArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 time.Duration
	}
	patchClusterWithOperationStartedStatusReturns struct {
		result1 error
	}
	patchClusterWithOperationStartedStatusReturnsOnCall map[int]struct {
		result1 error
	}
	PatchCoreDNSImageRepositoryInKubeadmConfigMapStub        func(string) error
	patchCoreDNSImageRepositoryInKubeadmConfigMapMutex       sync.RWMutex
	patchCoreDNSImageRepositoryInKubeadmConfigMapArgsForCall []struct {
		arg1 string
	}
	patchCoreDNSImageRepositoryInKubeadmConfigMapReturns struct {
		result1 error
	}
	patchCoreDNSImageRepositoryInKubeadmConfigMapReturnsOnCall map[int]struct {
		result1 error
	}
	PatchImageRepositoryInKubeProxyDaemonSetStub        func(string) error
	patchImageRepositoryInKubeProxyDaemonSetMutex       sync.RWMutex
	patchImageRepositoryInKubeProxyDaemonSetArgsForCall []struct {
		arg1 string
	}
	patchImageRepositoryInKubeProxyDaemonSetReturns struct {
		result1 error
	}
	patchImageRepositoryInKubeProxyDaemonSetReturnsOnCall map[int]struct {
		result1 error
	}
	PatchK8SVersionToPacificClusterStub        func(string, string, string) error
	patchK8SVersionToPacificClusterMutex       sync.RWMutex
	patchK8SVersionToPacificClusterArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	patchK8SVersionToPacificClusterReturns struct {
		result1 error
	}
	patchK8SVersionToPacificClusterReturnsOnCall map[int]struct {
		result1 error
	}
	PatchKappControllerLastAppliedAnnotationStub        func(string) error
	patchKappControllerLastAppliedAnnotationMutex       sync.RWMutex
	patchKappControllerLastAppliedAnnotationArgsForCall []struct {
		arg1 string
	}
	patchKappControllerLastAppliedAnnotationReturns struct {
		result1 error
	}
	patchKappControllerLastAppliedAnnotationReturnsOnCall map[int]struct {
		result1 error
	}
	PatchResourceStub        func(interface{}, string, string, string, types.PatchType, *clusterclient.PollOptions) error
	patchResourceMutex       sync.RWMutex
	patchResourceArgsForCall []struct {
		arg1 interface{}
		arg2 string
		arg3 string
		arg4 string
		arg5 types.PatchType
		arg6 *clusterclient.PollOptions
	}
	patchResourceReturns struct {
		result1 error
	}
	patchResourceReturnsOnCall map[int]struct {
		result1 error
	}
	RemoveCEIPTelemetryJobStub        func(string) error
	removeCEIPTelemetryJobMutex       sync.RWMutex
	removeCEIPTelemetryJobArgsForCall []struct {
		arg1 string
	}
	removeCEIPTelemetryJobReturns struct {
		result1 error
	}
	removeCEIPTelemetryJobReturnsOnCall map[int]struct {
		result1 error
	}
	RemoveMatchingMetadataFromResourcesStub        func(schema.GroupVersionKind, string, string, []string) error
	removeMatchingMetadataFromResourcesMutex       sync.RWMutex
	removeMatchingMetadataFromResourcesArgsForCall []struct {
		arg1 schema.GroupVersionKind
		arg2 string
		arg3 string
		arg4 []string
	}
	removeMatchingMetadataFromResourcesReturns struct {
		result1 error
	}
	removeMatchingMetadataFromResourcesReturnsOnCall map[int]struct {
		result1 error
	}
	ScalePacificClusterControlPlaneStub        func(string, string, int32) error
	scalePacificClusterControlPlaneMutex       sync.RWMutex
	scalePacificClusterControlPlaneArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 int32
	}
	scalePacificClusterControlPlaneReturns struct {
		result1 error
	}
	scalePacificClusterControlPlaneReturnsOnCall map[int]struct {
		result1 error
	}
	ScalePacificClusterWorkerNodesStub        func(string, string, int32) error
	scalePacificClusterWorkerNodesMutex       sync.RWMutex
	scalePacificClusterWorkerNodesArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 int32
	}
	scalePacificClusterWorkerNodesReturns struct {
		result1 error
	}
	scalePacificClusterWorkerNodesReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateAWSCNIIngressRulesStub        func(string, string, v1beta2.CNIIngressRule) error
	updateAWSCNIIngressRulesMutex       sync.RWMutex
	updateAWSCNIIngressRulesArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 v1beta2.CNIIngressRule
	}
	updateAWSCNIIngressRulesReturns struct {
		result1 error
	}
	updateAWSCNIIngressRulesReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateAzureClusterIdentityStub        func(string, string, string, string, string) error
	updateAzureClusterIdentityMutex       sync.RWMutex
	updateAzureClusterIdentityArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
		arg5 string
	}
	updateAzureClusterIdentityReturns struct {
		result1 error
	}
	updateAzureClusterIdentityReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateAzureKCPStub        func(string, string) error
	updateAzureKCPMutex       sync.RWMutex
	updateAzureKCPArgsForCall []struct {
		arg1 string
		arg2 string
	}
	updateAzureKCPReturns struct {
		result1 error
	}
	updateAzureKCPReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateCAPZControllerManagerDeploymentReplicasStub        func(int32) error
	updateCAPZControllerManagerDeploymentReplicasMutex       sync.RWMutex
	updateCAPZControllerManagerDeploymentReplicasArgsForCall []struct {
		arg1 int32
	}
	updateCAPZControllerManagerDeploymentReplicasReturns struct {
		result1 error
	}
	updateCAPZControllerManagerDeploymentReplicasReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateCapvManagerBootstrapCredentialsSecretStub        func(string, string) error
	updateCapvManagerBootstrapCredentialsSecretMutex       sync.RWMutex
	updateCapvManagerBootstrapCredentialsSecretArgsForCall []struct {
		arg1 string
		arg2 string
	}
	updateCapvManagerBootstrapCredentialsSecretReturns struct {
		result1 error
	}
	updateCapvManagerBootstrapCredentialsSecretReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateCapzManagerBootstrapCredentialsSecretStub        func(string, string, string) error
	updateCapzManagerBootstrapCredentialsSecretMutex       sync.RWMutex
	updateCapzManagerBootstrapCredentialsSecretArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	updateCapzManagerBootstrapCredentialsSecretReturns struct {
		result1 error
	}
	updateCapzManagerBootstrapCredentialsSecretReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateReplicasStub        func(interface{}, string, string, int32) error
	updateReplicasMutex       sync.RWMutex
	updateReplicasArgsForCall []struct {
		arg1 interface{}
		arg2 string
		arg3 string
		arg4 int32
	}
	updateReplicasReturns struct {
		result1 error
	}
	updateReplicasReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateResourceStub        func(interface{}, string, string, ...client.UpdateOption) error
	updateResourceMutex       sync.RWMutex
	updateResourceArgsForCall []struct {
		arg1 interface{}
		arg2 string
		arg3 string
		arg4 []client.UpdateOption
	}
	updateResourceReturns struct {
		result1 error
	}
	updateResourceReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateResourceWithPollingStub        func(interface{}, string, string, *clusterclient.PollOptions, ...client.UpdateOption) error
	updateResourceWithPollingMutex       sync.RWMutex
	updateResourceWithPollingArgsForCall []struct {
		arg1 interface{}
		arg2 string
		arg3 string
		arg4 *clusterclient.PollOptions
		arg5 []client.UpdateOption
	}
	updateResourceWithPollingReturns struct {
		result1 error
	}
	updateResourceWithPollingReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateVsphereCloudProviderCredentialsSecretStub        func(string, string, string, string) error
	updateVsphereCloudProviderCredentialsSecretMutex       sync.RWMutex
	updateVsphereCloudProviderCredentialsSecretArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
	}
	updateVsphereCloudProviderCredentialsSecretReturns struct {
		result1 error
	}
	updateVsphereCloudProviderCredentialsSecretReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateVsphereCsiConfigSecretStub        func(string, string, string, string) error
	updateVsphereCsiConfigSecretMutex       sync.RWMutex
	updateVsphereCsiConfigSecretArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
	}
	updateVsphereCsiConfigSecretReturns struct {
		result1 error
	}
	updateVsphereCsiConfigSecretReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateVsphereIdentityRefSecretStub        func(string, string, string, string) error
	updateVsphereIdentityRefSecretMutex       sync.RWMutex
	updateVsphereIdentityRefSecretArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
	}
	updateVsphereIdentityRefSecretReturns struct {
		result1 error
	}
	updateVsphereIdentityRefSecretReturnsOnCall map[int]struct {
		result1 error
	}
	UseContextStub        func(string) error
	useContextMutex       sync.RWMutex
	useContextArgsForCall []struct {
		arg1 string
	}
	useContextReturns struct {
		result1 error
	}
	useContextReturnsOnCall map[int]struct {
		result1 error
	}
	VerifyCLIPluginCRDStub        func() (bool, error)
	verifyCLIPluginCRDMutex       sync.RWMutex
	verifyCLIPluginCRDArgsForCall []struct {
	}
	verifyCLIPluginCRDReturns struct {
		result1 bool
		result2 error
	}
	verifyCLIPluginCRDReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	VerifyExistenceOfCRDStub        func(string, string) (bool, error)
	verifyExistenceOfCRDMutex       sync.RWMutex
	verifyExistenceOfCRDArgsForCall []struct {
		arg1 string
		arg2 string
	}
	verifyExistenceOfCRDReturns struct {
		result1 bool
		result2 error
	}
	verifyExistenceOfCRDReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	WaitForAVIResourceCleanUpStub        func(string, string) error
	waitForAVIResourceCleanUpMutex       sync.RWMutex
	waitForAVIResourceCleanUpArgsForCall []struct {
		arg1 string
		arg2 string
	}
	waitForAVIResourceCleanUpReturns struct {
		result1 error
	}
	waitForAVIResourceCleanUpReturnsOnCall map[int]struct {
		result1 error
	}
	WaitForAutoscalerDeploymentStub        func(string, string) error
	waitForAutoscalerDeploymentMutex       sync.RWMutex
	waitForAutoscalerDeploymentArgsForCall []struct {
		arg1 string
		arg2 string
	}
	waitForAutoscalerDeploymentReturns struct {
		result1 error
	}
	waitForAutoscalerDeploymentReturnsOnCall map[int]struct {
		result1 error
	}
	WaitForClusterDeletionStub        func(string, string) error
	waitForClusterDeletionMutex       sync.RWMutex
	waitForClusterDeletionArgsForCall []struct {
		arg1 string
		arg2 string
	}
	waitForClusterDeletionReturns struct {
		result1 error
	}
	waitForClusterDeletionReturnsOnCall map[int]struct {
		result1 error
	}
	WaitForClusterInitializedStub        func(string, string) error
	waitForClusterInitializedMutex       sync.RWMutex
	waitForClusterInitializedArgsForCall []struct {
		arg1 string
		arg2 string
	}
	waitForClusterInitializedReturns struct {
		result1 error
	}
	waitForClusterInitializedReturnsOnCall map[int]struct {
		result1 error
	}
	WaitForClusterReadyStub        func(string, string, bool) error
	waitForClusterReadyMutex       sync.RWMutex
	waitForClusterReadyArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 bool
	}
	waitForClusterReadyReturns struct {
		result1 error
	}
	waitForClusterReadyReturnsOnCall map[int]struct {
		result1 error
	}
	WaitForControlPlaneAvailableStub        func(string, string) error
	waitForControlPlaneAvailableMutex       sync.RWMutex
	waitForControlPlaneAvailableArgsForCall []struct {
		arg1 string
		arg2 string
	}
	waitForControlPlaneAvailableReturns struct {
		result1 error
	}
	waitForControlPlaneAvailableReturnsOnCall map[int]struct {
		result1 error
	}
	WaitForDeploymentStub        func(string, string) error
	waitForDeploymentMutex       sync.RWMutex
	waitForDeploymentArgsForCall []struct {
		arg1 string
		arg2 string
	}
	waitForDeploymentReturns struct {
		result1 error
	}
	waitForDeploymentReturnsOnCall map[int]struct {
		result1 error
	}
	WaitForPacificClusterStub        func(string, string) error
	waitForPacificClusterMutex       sync.RWMutex
	waitForPacificClusterArgsForCall []struct {
		arg1 string
		arg2 string
	}
	waitForPacificClusterReturns struct {
		result1 error
	}
	waitForPacificClusterReturnsOnCall map[int]struct {
		result1 error
	}
	WaitForPacificClusterK8sVersionUpdateStub        func(string, string, string) error
	waitForPacificClusterK8sVersionUpdateMutex       sync.RWMutex
	waitForPacificClusterK8sVersionUpdateArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
	}
	waitForPacificClusterK8sVersionUpdateReturns struct {
		result1 error
	}
	waitForPacificClusterK8sVersionUpdateReturnsOnCall map[int]struct {
		result1 error
	}
	WaitForPackageInstallStub        func(string, string, time.Duration) error
	waitForPackageInstallMutex       sync.RWMutex
	waitForPackageInstallArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 time.Duration
	}
	waitForPackageInstallReturns struct {
		result1 error
	}
	waitForPackageInstallReturnsOnCall map[int]struct {
		result1 error
	}
	WaitK8sVersionUpdateForCPNodesStub        func(string, string, string, clusterclient.Client) error
	waitK8sVersionUpdateForCPNodesMutex       sync.RWMutex
	waitK8sVersionUpdateForCPNodesArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 clusterclient.Client
	}
	waitK8sVersionUpdateForCPNodesReturns struct {
		result1 error
	}
	waitK8sVersionUpdateForCPNodesReturnsOnCall map[int]struct {
		result1 error
	}
	WaitK8sVersionUpdateForWorkerNodesStub        func(string, string, string, clusterclient.Client) error
	waitK8sVersionUpdateForWorkerNodesMutex       sync.RWMutex
	waitK8sVersionUpdateForWorkerNodesArgsForCall []struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 clusterclient.Client
	}
	waitK8sVersionUpdateForWorkerNodesReturns struct {
		result1 error
	}
	waitK8sVersionUpdateForWorkerNodesReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *ClusterClient) ActivateTanzuKubernetesReleases(arg1 string) error {
	fake.activateTanzuKubernetesReleasesMutex.Lock()
	ret, specificReturn := fake.activateTanzuKubernetesReleasesReturnsOnCall[len(fake.activateTanzuKubernetesReleasesArgsForCall)]
	fake.activateTanzuKubernetesReleasesArgsForCall = append(fake.activateTanzuKubernetesReleasesArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ActivateTanzuKubernetesReleasesStub
	fakeReturns := fake.activateTanzuKubernetesReleasesReturns
	fake.recordInvocation("ActivateTanzuKubernetesReleases", []interface{}{arg1})
	fake.activateTanzuKubernetesReleasesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ClusterClient) ActivateTanzuKubernetesReleasesCallCount() int {
	fake.activateTanzuKubernetesReleasesMutex.RLock()
	defer fake.activateTanzuKubernetesReleasesMutex.RUnlock()
	return len(fake.activateTanzuKubernetesReleasesArgsForCall)
}

func (fake *ClusterClient) ActivateTanzuKubernetesReleasesCalls(stub func(string) error) {
	fake.activateTanzuKubernetesReleasesMutex.Lock()
	defer fake.activateTanzuKubernetesReleasesMutex.Unlock()
	fake.ActivateTanzuKubernetesReleasesStub = stub
}

func (fake *ClusterClient) ActivateTanzuKubernetesReleasesArgsForCall(i int) string {
	fake.activateTanzuKubernetesReleasesMutex.RLock()
	defer fake.activateTanzuKubernetesReleasesMutex.RUnlock()
	argsForCall := fake.activateTanzuKubernetesReleasesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *ClusterClient) ActivateTanzuKubernetesReleasesReturns(result1 error) {
	fake.activateTanzuKubernetesReleasesMutex.Lock()
	defer fake.activateTanzuKubernetesReleasesMutex.Unlock()
	fake.ActivateTanzuKubernetesReleasesStub = nil
	fake.activateTanzuKubernetesReleasesReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) ActivateTanzuKubernetesReleasesReturnsOnCall(i int, result1 error) {
	fake.activateTanzuKubernetesReleasesMutex.Lock()
	defer fake.activateTanzuKubernetesReleasesMutex.Unlock()
	fake.ActivateTanzuKubernetesReleasesStub = nil
	if fake.activateTanzuKubernetesReleasesReturnsOnCall == nil {
		fake.activateTanzuKubernetesReleasesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.activateTanzuKubernetesReleasesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) AddCEIPTelemetryJob(arg1 string, arg2 string, arg3 *tkgconfigbom.BOMConfiguration, arg4 string, arg5 string, arg6 string, arg7 string, arg8 string) error {
	fake.addCEIPTelemetryJobMutex.Lock()
	ret, specificReturn := fake.addCEIPTelemetryJobReturnsOnCall[len(fake.addCEIPTelemetryJobArgsForCall)]
	fake.addCEIPTelemetryJobArgsForCall = append(fake.addCEIPTelemetryJobArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 *tkgconfigbom.BOMConfiguration
		arg4 string
		arg5 string
		arg6 string
		arg7 string
		arg8 string
	}{arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8})
	stub := fake.AddCEIPTelemetryJobStub
	fakeReturns := fake.addCEIPTelemetryJobReturns
	fake.recordInvocation("AddCEIPTelemetryJob", []interface{}{arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8})
	fake.addCEIPTelemetryJobMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ClusterClient) AddCEIPTelemetryJobCallCount() int {
	fake.addCEIPTelemetryJobMutex.RLock()
	defer fake.addCEIPTelemetryJobMutex.RUnlock()
	return len(fake.addCEIPTelemetryJobArgsForCall)
}

func (fake *ClusterClient) AddCEIPTelemetryJobCalls(stub func(string, string, *tkgconfigbom.BOMConfiguration, string, string, string, string, string) error) {
	fake.addCEIPTelemetryJobMutex.Lock()
	defer fake.addCEIPTelemetryJobMutex.Unlock()
	fake.AddCEIPTelemetryJobStub = stub
}

func (fake *ClusterClient) AddCEIPTelemetryJobArgsForCall(i int) (string, string, *tkgconfigbom.BOMConfiguration, string, string, string, string, string) {
	fake.addCEIPTelemetryJobMutex.RLock()
	defer fake.addCEIPTelemetryJobMutex.RUnlock()
	argsForCall := fake.addCEIPTelemetryJobArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5, argsForCall.arg6, argsForCall.arg7, argsForCall.arg8
}

func (fake *ClusterClient) AddCEIPTelemetryJobReturns(result1 error) {
	fake.addCEIPTelemetryJobMutex.Lock()
	defer fake.addCEIPTelemetryJobMutex.Unlock()
	fake.AddCEIPTelemetryJobStub = nil
	fake.addCEIPTelemetryJobReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) AddCEIPTelemetryJobReturnsOnCall(i int, result1 error) {
	fake.addCEIPTelemetryJobMutex.Lock()
	defer fake.addCEIPTelemetryJobMutex.Unlock()
	fake.AddCEIPTelemetryJobStub = nil
	if fake.addCEIPTelemetryJobReturnsOnCall == nil {
		fake.addCEIPTelemetryJobReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.addCEIPTelemetryJobReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) Apply(arg1 string) error {
	fake.applyMutex.Lock()
	ret, specificReturn := fake.applyReturnsOnCall[len(fake.applyArgsForCall)]
	fake.applyArgsForCall = append(fake.applyArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ApplyStub
	fakeReturns := fake.applyReturns
	fake.recordInvocation("Apply", []interface{}{arg1})
	fake.applyMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ClusterClient) ApplyCallCount() int {
	fake.applyMutex.RLock()
	defer fake.applyMutex.RUnlock()
	return len(fake.applyArgsForCall)
}

func (fake *ClusterClient) ApplyCalls(stub func(string) error) {
	fake.applyMutex.Lock()
	defer fake.applyMutex.Unlock()
	fake.ApplyStub = stub
}

func (fake *ClusterClient) ApplyArgsForCall(i int) string {
	fake.applyMutex.RLock()
	defer fake.applyMutex.RUnlock()
	argsForCall := fake.applyArgsForCall[i]
	return argsForCall.arg1
}

func (fake *ClusterClient) ApplyReturns(result1 error) {
	fake.applyMutex.Lock()
	defer fake.applyMutex.Unlock()
	fake.ApplyStub = nil
	fake.applyReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) ApplyReturnsOnCall(i int, result1 error) {
	fake.applyMutex.Lock()
	defer fake.applyMutex.Unlock()
	fake.ApplyStub = nil
	if fake.applyReturnsOnCall == nil {
		fake.applyReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.applyReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) ApplyFile(arg1 string) error {
	fake.applyFileMutex.Lock()
	ret, specificReturn := fake.applyFileReturnsOnCall[len(fake.applyFileArgsForCall)]
	fake.applyFileArgsForCall = append(fake.applyFileArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ApplyFileStub
	fakeReturns := fake.applyFileReturns
	fake.recordInvocation("ApplyFile", []interface{}{arg1})
	fake.applyFileMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ClusterClient) ApplyFileCallCount() int {
	fake.applyFileMutex.RLock()
	defer fake.applyFileMutex.RUnlock()
	return len(fake.applyFileArgsForCall)
}

func (fake *ClusterClient) ApplyFileCalls(stub func(string) error) {
	fake.applyFileMutex.Lock()
	defer fake.applyFileMutex.Unlock()
	fake.ApplyFileStub = stub
}

func (fake *ClusterClient) ApplyFileArgsForCall(i int) string {
	fake.applyFileMutex.RLock()
	defer fake.applyFileMutex.RUnlock()
	argsForCall := fake.applyFileArgsForCall[i]
	return argsForCall.arg1
}

func (fake *ClusterClient) ApplyFileReturns(result1 error) {
	fake.applyFileMutex.Lock()
	defer fake.applyFileMutex.Unlock()
	fake.ApplyFileStub = nil
	fake.applyFileReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) ApplyFileReturnsOnCall(i int, result1 error) {
	fake.applyFileMutex.Lock()
	defer fake.applyFileMutex.Unlock()
	fake.ApplyFileStub = nil
	if fake.applyFileReturnsOnCall == nil {
		fake.applyFileReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.applyFileReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) ApplyFileRecursively(arg1 string, arg2 string) error {
	fake.applyFileRecursivelyMutex.Lock()
	ret, specificReturn := fake.applyFileRecursivelyReturnsOnCall[len(fake.applyFileRecursivelyArgsForCall)]
	fake.applyFileRecursivelyArgsForCall = append(fake.applyFileRecursivelyArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.ApplyFileRecursivelyStub
	fakeReturns := fake.applyFileRecursivelyReturns
	fake.recordInvocation("ApplyFileRecursively", []interface{}{arg1, arg2})
	fake.applyFileRecursivelyMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ClusterClient) ApplyFileRecursivelyCallCount() int {
	fake.applyFileRecursivelyMutex.RLock()
	defer fake.applyFileRecursivelyMutex.RUnlock()
	return len(fake.applyFileRecursivelyArgsForCall)
}

func (fake *ClusterClient) ApplyFileRecursivelyCalls(stub func(string, string) error) {
	fake.applyFileRecursivelyMutex.Lock()
	defer fake.applyFileRecursivelyMutex.Unlock()
	fake.ApplyFileRecursivelyStub = stub
}

func (fake *ClusterClient) ApplyFileRecursivelyArgsForCall(i int) (string, string) {
	fake.applyFileRecursivelyMutex.RLock()
	defer fake.applyFileRecursivelyMutex.RUnlock()
	argsForCall := fake.applyFileRecursivelyArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ClusterClient) ApplyFileRecursivelyReturns(result1 error) {
	fake.applyFileRecursivelyMutex.Lock()
	defer fake.applyFileRecursivelyMutex.Unlock()
	fake.ApplyFileRecursivelyStub = nil
	fake.applyFileRecursivelyReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) ApplyFileRecursivelyReturnsOnCall(i int, result1 error) {
	fake.applyFileRecursivelyMutex.Lock()
	defer fake.applyFileRecursivelyMutex.Unlock()
	fake.ApplyFileRecursivelyStub = nil
	if fake.applyFileRecursivelyReturnsOnCall == nil {
		fake.applyFileRecursivelyReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.applyFileRecursivelyReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) ApplyPatchForAutoScalerDeployment(arg1 tkgconfigbom.Client, arg2 string, arg3 string, arg4 string) error {
	fake.applyPatchForAutoScalerDeploymentMutex.Lock()
	ret, specificReturn := fake.applyPatchForAutoScalerDeploymentReturnsOnCall[len(fake.applyPatchForAutoScalerDeploymentArgsForCall)]
	fake.applyPatchForAutoScalerDeploymentArgsForCall = append(fake.applyPatchForAutoScalerDeploymentArgsForCall, struct {
		arg1 tkgconfigbom.Client
		arg2 string
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.ApplyPatchForAutoScalerDeploymentStub
	fakeReturns := fake.applyPatchForAutoScalerDeploymentReturns
	fake.recordInvocation("ApplyPatchForAutoScalerDeployment", []interface{}{arg1, arg2, arg3, arg4})
	fake.applyPatchForAutoScalerDeploymentMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ClusterClient) ApplyPatchForAutoScalerDeploymentCallCount() int {
	fake.applyPatchForAutoScalerDeploymentMutex.RLock()
	defer fake.applyPatchForAutoScalerDeploymentMutex.RUnlock()
	return len(fake.applyPatchForAutoScalerDeploymentArgsForCall)
}

func (fake *ClusterClient) ApplyPatchForAutoScalerDeploymentCalls(stub func(tkgconfigbom.Client, string, string, string) error) {
	fake.applyPatchForAutoScalerDeploymentMutex.Lock()
	defer fake.applyPatchForAutoScalerDeploymentMutex.Unlock()
	fake.ApplyPatchForAutoScalerDeploymentStub = stub
}

func (fake *ClusterClient) ApplyPatchForAutoScalerDeploymentArgsForCall(i int) (tkgconfigbom.Client, string, string, string) {
	fake.applyPatchForAutoScalerDeploymentMutex.RLock()
	defer fake.applyPatchForAutoScalerDeploymentMutex.RUnlock()
	argsForCall := fake.applyPatchForAutoScalerDeploymentArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *ClusterClient) ApplyPatchForAutoScalerDeploymentReturns(result1 error) {
	fake.applyPatchForAutoScalerDeploymentMutex.Lock()
	defer fake.applyPatchForAutoScalerDeploymentMutex.Unlock()
	fake.ApplyPatchForAutoScalerDeploymentStub = nil
	fake.applyPatchForAutoScalerDeploymentReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) ApplyPatchForAutoScalerDeploymentReturnsOnCall(i int, result1 error) {
	fake.applyPatchForAutoScalerDeploymentMutex.Lock()
	defer fake.applyPatchForAutoScalerDeploymentMutex.Unlock()
	fake.ApplyPatchForAutoScalerDeploymentStub = nil
	if fake.applyPatchForAutoScalerDeploymentReturnsOnCall == nil {
		fake.applyPatchForAutoScalerDeploymentReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.applyPatchForAutoScalerDeploymentReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) CheckUnifiedAzureClusterIdentity(arg1 string, arg2 string) (bool, error) {
	fake.checkUnifiedAzureClusterIdentityMutex.Lock()
	ret, specificReturn := fake.checkUnifiedAzureClusterIdentityReturnsOnCall[len(fake.checkUnifiedAzureClusterIdentityArgsForCall)]
	fake.checkUnifiedAzureClusterIdentityArgsForCall = append(fake.checkUnifiedAzureClusterIdentityArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.CheckUnifiedAzureClusterIdentityStub
	fakeReturns := fake.checkUnifiedAzureClusterIdentityReturns
	fake.recordInvocation("CheckUnifiedAzureClusterIdentity", []interface{}{arg1, arg2})
	fake.checkUnifiedAzureClusterIdentityMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ClusterClient) CheckUnifiedAzureClusterIdentityCallCount() int {
	fake.checkUnifiedAzureClusterIdentityMutex.RLock()
	defer fake.checkUnifiedAzureClusterIdentityMutex.RUnlock()
	return len(fake.checkUnifiedAzureClusterIdentityArgsForCall)
}

func (fake *ClusterClient) CheckUnifiedAzureClusterIdentityCalls(stub func(string, string) (bool, error)) {
	fake.checkUnifiedAzureClusterIdentityMutex.Lock()
	defer fake.checkUnifiedAzureClusterIdentityMutex.Unlock()
	fake.CheckUnifiedAzureClusterIdentityStub = stub
}

func (fake *ClusterClient) CheckUnifiedAzureClusterIdentityArgsForCall(i int) (string, string) {
	fake.checkUnifiedAzureClusterIdentityMutex.RLock()
	defer fake.checkUnifiedAzureClusterIdentityMutex.RUnlock()
	argsForCall := fake.checkUnifiedAzureClusterIdentityArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ClusterClient) CheckUnifiedAzureClusterIdentityReturns(result1 bool, result2 error) {
	fake.checkUnifiedAzureClusterIdentityMutex.Lock()
	defer fake.checkUnifiedAzureClusterIdentityMutex.Unlock()
	fake.CheckUnifiedAzureClusterIdentityStub = nil
	fake.checkUnifiedAzureClusterIdentityReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) CheckUnifiedAzureClusterIdentityReturnsOnCall(i int, result1 bool, result2 error) {
	fake.checkUnifiedAzureClusterIdentityMutex.Lock()
	defer fake.checkUnifiedAzureClusterIdentityMutex.Unlock()
	fake.CheckUnifiedAzureClusterIdentityStub = nil
	if fake.checkUnifiedAzureClusterIdentityReturnsOnCall == nil {
		fake.checkUnifiedAzureClusterIdentityReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.checkUnifiedAzureClusterIdentityReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) CloneWithTimeout(arg1 time.Duration) clusterclient.Client {
	fake.cloneWithTimeoutMutex.Lock()
	ret, specificReturn := fake.cloneWithTimeoutReturnsOnCall[len(fake.cloneWithTimeoutArgsForCall)]
	fake.cloneWithTimeoutArgsForCall = append(fake.cloneWithTimeoutArgsForCall, struct {
		arg1 time.Duration
	}{arg1})
	stub := fake.CloneWithTimeoutStub
	fakeReturns := fake.cloneWithTimeoutReturns
	fake.recordInvocation("CloneWithTimeout", []interface{}{arg1})
	fake.cloneWithTimeoutMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ClusterClient) CloneWithTimeoutCallCount() int {
	fake.cloneWithTimeoutMutex.RLock()
	defer fake.cloneWithTimeoutMutex.RUnlock()
	return len(fake.cloneWithTimeoutArgsForCall)
}

func (fake *ClusterClient) CloneWithTimeoutCalls(stub func(time.Duration) clusterclient.Client) {
	fake.cloneWithTimeoutMutex.Lock()
	defer fake.cloneWithTimeoutMutex.Unlock()
	fake.CloneWithTimeoutStub = stub
}

func (fake *ClusterClient) CloneWithTimeoutArgsForCall(i int) time.Duration {
	fake.cloneWithTimeoutMutex.RLock()
	defer fake.cloneWithTimeoutMutex.RUnlock()
	argsForCall := fake.cloneWithTimeoutArgsForCall[i]
	return argsForCall.arg1
}

func (fake *ClusterClient) CloneWithTimeoutReturns(result1 clusterclient.Client) {
	fake.cloneWithTimeoutMutex.Lock()
	defer fake.cloneWithTimeoutMutex.Unlock()
	fake.CloneWithTimeoutStub = nil
	fake.cloneWithTimeoutReturns = struct {
		result1 clusterclient.Client
	}{result1}
}

func (fake *ClusterClient) CloneWithTimeoutReturnsOnCall(i int, result1 clusterclient.Client) {
	fake.cloneWithTimeoutMutex.Lock()
	defer fake.cloneWithTimeoutMutex.Unlock()
	fake.CloneWithTimeoutStub = nil
	if fake.cloneWithTimeoutReturnsOnCall == nil {
		fake.cloneWithTimeoutReturnsOnCall = make(map[int]struct {
			result1 clusterclient.Client
		})
	}
	fake.cloneWithTimeoutReturnsOnCall[i] = struct {
		result1 clusterclient.Client
	}{result1}
}

func (fake *ClusterClient) CreateNamespace(arg1 string) error {
	fake.createNamespaceMutex.Lock()
	ret, specificReturn := fake.createNamespaceReturnsOnCall[len(fake.createNamespaceArgsForCall)]
	fake.createNamespaceArgsForCall = append(fake.createNamespaceArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.CreateNamespaceStub
	fakeReturns := fake.createNamespaceReturns
	fake.recordInvocation("CreateNamespace", []interface{}{arg1})
	fake.createNamespaceMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ClusterClient) CreateNamespaceCallCount() int {
	fake.createNamespaceMutex.RLock()
	defer fake.createNamespaceMutex.RUnlock()
	return len(fake.createNamespaceArgsForCall)
}

func (fake *ClusterClient) CreateNamespaceCalls(stub func(string) error) {
	fake.createNamespaceMutex.Lock()
	defer fake.createNamespaceMutex.Unlock()
	fake.CreateNamespaceStub = stub
}

func (fake *ClusterClient) CreateNamespaceArgsForCall(i int) string {
	fake.createNamespaceMutex.RLock()
	defer fake.createNamespaceMutex.RUnlock()
	argsForCall := fake.createNamespaceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *ClusterClient) CreateNamespaceReturns(result1 error) {
	fake.createNamespaceMutex.Lock()
	defer fake.createNamespaceMutex.Unlock()
	fake.CreateNamespaceStub = nil
	fake.createNamespaceReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) CreateNamespaceReturnsOnCall(i int, result1 error) {
	fake.createNamespaceMutex.Lock()
	defer fake.createNamespaceMutex.Unlock()
	fake.CreateNamespaceStub = nil
	if fake.createNamespaceReturnsOnCall == nil {
		fake.createNamespaceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createNamespaceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) CreateResource(arg1 interface{}, arg2 string, arg3 string, arg4 ...client.CreateOption) error {
	fake.createResourceMutex.Lock()
	ret, specificReturn := fake.createResourceReturnsOnCall[len(fake.createResourceArgsForCall)]
	fake.createResourceArgsForCall = append(fake.createResourceArgsForCall, struct {
		arg1 interface{}
		arg2 string
		arg3 string
		arg4 []client.CreateOption
	}{arg1, arg2, arg3, arg4})
	stub := fake.CreateResourceStub
	fakeReturns := fake.createResourceReturns
	fake.recordInvocation("CreateResource", []interface{}{arg1, arg2, arg3, arg4})
	fake.createResourceMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ClusterClient) CreateResourceCallCount() int {
	fake.createResourceMutex.RLock()
	defer fake.createResourceMutex.RUnlock()
	return len(fake.createResourceArgsForCall)
}

func (fake *ClusterClient) CreateResourceCalls(stub func(interface{}, string, string, ...client.CreateOption) error) {
	fake.createResourceMutex.Lock()
	defer fake.createResourceMutex.Unlock()
	fake.CreateResourceStub = stub
}

func (fake *ClusterClient) CreateResourceArgsForCall(i int) (interface{}, string, string, []client.CreateOption) {
	fake.createResourceMutex.RLock()
	defer fake.createResourceMutex.RUnlock()
	argsForCall := fake.createResourceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *ClusterClient) CreateResourceReturns(result1 error) {
	fake.createResourceMutex.Lock()
	defer fake.createResourceMutex.Unlock()
	fake.CreateResourceStub = nil
	fake.createResourceReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) CreateResourceReturnsOnCall(i int, result1 error) {
	fake.createResourceMutex.Lock()
	defer fake.createResourceMutex.Unlock()
	fake.CreateResourceStub = nil
	if fake.createResourceReturnsOnCall == nil {
		fake.createResourceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.createResourceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) DeactivateTanzuKubernetesReleases(arg1 string) error {
	fake.deactivateTanzuKubernetesReleasesMutex.Lock()
	ret, specificReturn := fake.deactivateTanzuKubernetesReleasesReturnsOnCall[len(fake.deactivateTanzuKubernetesReleasesArgsForCall)]
	fake.deactivateTanzuKubernetesReleasesArgsForCall = append(fake.deactivateTanzuKubernetesReleasesArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.DeactivateTanzuKubernetesReleasesStub
	fakeReturns := fake.deactivateTanzuKubernetesReleasesReturns
	fake.recordInvocation("DeactivateTanzuKubernetesReleases", []interface{}{arg1})
	fake.deactivateTanzuKubernetesReleasesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ClusterClient) DeactivateTanzuKubernetesReleasesCallCount() int {
	fake.deactivateTanzuKubernetesReleasesMutex.RLock()
	defer fake.deactivateTanzuKubernetesReleasesMutex.RUnlock()
	return len(fake.deactivateTanzuKubernetesReleasesArgsForCall)
}

func (fake *ClusterClient) DeactivateTanzuKubernetesReleasesCalls(stub func(string) error) {
	fake.deactivateTanzuKubernetesReleasesMutex.Lock()
	defer fake.deactivateTanzuKubernetesReleasesMutex.Unlock()
	fake.DeactivateTanzuKubernetesReleasesStub = stub
}

func (fake *ClusterClient) DeactivateTanzuKubernetesReleasesArgsForCall(i int) string {
	fake.deactivateTanzuKubernetesReleasesMutex.RLock()
	defer fake.deactivateTanzuKubernetesReleasesMutex.RUnlock()
	argsForCall := fake.deactivateTanzuKubernetesReleasesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *ClusterClient) DeactivateTanzuKubernetesReleasesReturns(result1 error) {
	fake.deactivateTanzuKubernetesReleasesMutex.Lock()
	defer fake.deactivateTanzuKubernetesReleasesMutex.Unlock()
	fake.DeactivateTanzuKubernetesReleasesStub = nil
	fake.deactivateTanzuKubernetesReleasesReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) DeactivateTanzuKubernetesReleasesReturnsOnCall(i int, result1 error) {
	fake.deactivateTanzuKubernetesReleasesMutex.Lock()
	defer fake.deactivateTanzuKubernetesReleasesMutex.Unlock()
	fake.DeactivateTanzuKubernetesReleasesStub = nil
	if fake.deactivateTanzuKubernetesReleasesReturnsOnCall == nil {
		fake.deactivateTanzuKubernetesReleasesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deactivateTanzuKubernetesReleasesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) DeleteCluster(arg1 string, arg2 string) error {
	fake.deleteClusterMutex.Lock()
	ret, specificReturn := fake.deleteClusterReturnsOnCall[len(fake.deleteClusterArgsForCall)]
	fake.deleteClusterArgsForCall = append(fake.deleteClusterArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.DeleteClusterStub
	fakeReturns := fake.deleteClusterReturns
	fake.recordInvocation("DeleteCluster", []interface{}{arg1, arg2})
	fake.deleteClusterMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ClusterClient) DeleteClusterCallCount() int {
	fake.deleteClusterMutex.RLock()
	defer fake.deleteClusterMutex.RUnlock()
	return len(fake.deleteClusterArgsForCall)
}

func (fake *ClusterClient) DeleteClusterCalls(stub func(string, string) error) {
	fake.deleteClusterMutex.Lock()
	defer fake.deleteClusterMutex.Unlock()
	fake.DeleteClusterStub = stub
}

func (fake *ClusterClient) DeleteClusterArgsForCall(i int) (string, string) {
	fake.deleteClusterMutex.RLock()
	defer fake.deleteClusterMutex.RUnlock()
	argsForCall := fake.deleteClusterArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ClusterClient) DeleteClusterReturns(result1 error) {
	fake.deleteClusterMutex.Lock()
	defer fake.deleteClusterMutex.Unlock()
	fake.DeleteClusterStub = nil
	fake.deleteClusterReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) DeleteClusterReturnsOnCall(i int, result1 error) {
	fake.deleteClusterMutex.Lock()
	defer fake.deleteClusterMutex.Unlock()
	fake.DeleteClusterStub = nil
	if fake.deleteClusterReturnsOnCall == nil {
		fake.deleteClusterReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteClusterReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) DeleteExistingKappController() error {
	fake.deleteExistingKappControllerMutex.Lock()
	ret, specificReturn := fake.deleteExistingKappControllerReturnsOnCall[len(fake.deleteExistingKappControllerArgsForCall)]
	fake.deleteExistingKappControllerArgsForCall = append(fake.deleteExistingKappControllerArgsForCall, struct {
	}{})
	stub := fake.DeleteExistingKappControllerStub
	fakeReturns := fake.deleteExistingKappControllerReturns
	fake.recordInvocation("DeleteExistingKappController", []interface{}{})
	fake.deleteExistingKappControllerMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ClusterClient) DeleteExistingKappControllerCallCount() int {
	fake.deleteExistingKappControllerMutex.RLock()
	defer fake.deleteExistingKappControllerMutex.RUnlock()
	return len(fake.deleteExistingKappControllerArgsForCall)
}

func (fake *ClusterClient) DeleteExistingKappControllerCalls(stub func() error) {
	fake.deleteExistingKappControllerMutex.Lock()
	defer fake.deleteExistingKappControllerMutex.Unlock()
	fake.DeleteExistingKappControllerStub = stub
}

func (fake *ClusterClient) DeleteExistingKappControllerReturns(result1 error) {
	fake.deleteExistingKappControllerMutex.Lock()
	defer fake.deleteExistingKappControllerMutex.Unlock()
	fake.DeleteExistingKappControllerStub = nil
	fake.deleteExistingKappControllerReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) DeleteExistingKappControllerReturnsOnCall(i int, result1 error) {
	fake.deleteExistingKappControllerMutex.Lock()
	defer fake.deleteExistingKappControllerMutex.Unlock()
	fake.DeleteExistingKappControllerStub = nil
	if fake.deleteExistingKappControllerReturnsOnCall == nil {
		fake.deleteExistingKappControllerReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteExistingKappControllerReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) DeleteResource(arg1 interface{}) error {
	fake.deleteResourceMutex.Lock()
	ret, specificReturn := fake.deleteResourceReturnsOnCall[len(fake.deleteResourceArgsForCall)]
	fake.deleteResourceArgsForCall = append(fake.deleteResourceArgsForCall, struct {
		arg1 interface{}
	}{arg1})
	stub := fake.DeleteResourceStub
	fakeReturns := fake.deleteResourceReturns
	fake.recordInvocation("DeleteResource", []interface{}{arg1})
	fake.deleteResourceMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ClusterClient) DeleteResourceCallCount() int {
	fake.deleteResourceMutex.RLock()
	defer fake.deleteResourceMutex.RUnlock()
	return len(fake.deleteResourceArgsForCall)
}

func (fake *ClusterClient) DeleteResourceCalls(stub func(interface{}) error) {
	fake.deleteResourceMutex.Lock()
	defer fake.deleteResourceMutex.Unlock()
	fake.DeleteResourceStub = stub
}

func (fake *ClusterClient) DeleteResourceArgsForCall(i int) interface{} {
	fake.deleteResourceMutex.RLock()
	defer fake.deleteResourceMutex.RUnlock()
	argsForCall := fake.deleteResourceArgsForCall[i]
	return argsForCall.arg1
}

func (fake *ClusterClient) DeleteResourceReturns(result1 error) {
	fake.deleteResourceMutex.Lock()
	defer fake.deleteResourceMutex.Unlock()
	fake.DeleteResourceStub = nil
	fake.deleteResourceReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) DeleteResourceReturnsOnCall(i int, result1 error) {
	fake.deleteResourceMutex.Lock()
	defer fake.deleteResourceMutex.Unlock()
	fake.DeleteResourceStub = nil
	if fake.deleteResourceReturnsOnCall == nil {
		fake.deleteResourceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteResourceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) ExportCurrentKubeconfigToFile() (string, error) {
	fake.exportCurrentKubeconfigToFileMutex.Lock()
	ret, specificReturn := fake.exportCurrentKubeconfigToFileReturnsOnCall[len(fake.exportCurrentKubeconfigToFileArgsForCall)]
	fake.exportCurrentKubeconfigToFileArgsForCall = append(fake.exportCurrentKubeconfigToFileArgsForCall, struct {
	}{})
	stub := fake.ExportCurrentKubeconfigToFileStub
	fakeReturns := fake.exportCurrentKubeconfigToFileReturns
	fake.recordInvocation("ExportCurrentKubeconfigToFile", []interface{}{})
	fake.exportCurrentKubeconfigToFileMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ClusterClient) ExportCurrentKubeconfigToFileCallCount() int {
	fake.exportCurrentKubeconfigToFileMutex.RLock()
	defer fake.exportCurrentKubeconfigToFileMutex.RUnlock()
	return len(fake.exportCurrentKubeconfigToFileArgsForCall)
}

func (fake *ClusterClient) ExportCurrentKubeconfigToFileCalls(stub func() (string, error)) {
	fake.exportCurrentKubeconfigToFileMutex.Lock()
	defer fake.exportCurrentKubeconfigToFileMutex.Unlock()
	fake.ExportCurrentKubeconfigToFileStub = stub
}

func (fake *ClusterClient) ExportCurrentKubeconfigToFileReturns(result1 string, result2 error) {
	fake.exportCurrentKubeconfigToFileMutex.Lock()
	defer fake.exportCurrentKubeconfigToFileMutex.Unlock()
	fake.ExportCurrentKubeconfigToFileStub = nil
	fake.exportCurrentKubeconfigToFileReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) ExportCurrentKubeconfigToFileReturnsOnCall(i int, result1 string, result2 error) {
	fake.exportCurrentKubeconfigToFileMutex.Lock()
	defer fake.exportCurrentKubeconfigToFileMutex.Unlock()
	fake.ExportCurrentKubeconfigToFileStub = nil
	if fake.exportCurrentKubeconfigToFileReturnsOnCall == nil {
		fake.exportCurrentKubeconfigToFileReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.exportCurrentKubeconfigToFileReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetAWSCredentialsFromSecret() (string, error) {
	fake.getAWSCredentialsFromSecretMutex.Lock()
	ret, specificReturn := fake.getAWSCredentialsFromSecretReturnsOnCall[len(fake.getAWSCredentialsFromSecretArgsForCall)]
	fake.getAWSCredentialsFromSecretArgsForCall = append(fake.getAWSCredentialsFromSecretArgsForCall, struct {
	}{})
	stub := fake.GetAWSCredentialsFromSecretStub
	fakeReturns := fake.getAWSCredentialsFromSecretReturns
	fake.recordInvocation("GetAWSCredentialsFromSecret", []interface{}{})
	fake.getAWSCredentialsFromSecretMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ClusterClient) GetAWSCredentialsFromSecretCallCount() int {
	fake.getAWSCredentialsFromSecretMutex.RLock()
	defer fake.getAWSCredentialsFromSecretMutex.RUnlock()
	return len(fake.getAWSCredentialsFromSecretArgsForCall)
}

func (fake *ClusterClient) GetAWSCredentialsFromSecretCalls(stub func() (string, error)) {
	fake.getAWSCredentialsFromSecretMutex.Lock()
	defer fake.getAWSCredentialsFromSecretMutex.Unlock()
	fake.GetAWSCredentialsFromSecretStub = stub
}

func (fake *ClusterClient) GetAWSCredentialsFromSecretReturns(result1 string, result2 error) {
	fake.getAWSCredentialsFromSecretMutex.Lock()
	defer fake.getAWSCredentialsFromSecretMutex.Unlock()
	fake.GetAWSCredentialsFromSecretStub = nil
	fake.getAWSCredentialsFromSecretReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetAWSCredentialsFromSecretReturnsOnCall(i int, result1 string, result2 error) {
	fake.getAWSCredentialsFromSecretMutex.Lock()
	defer fake.getAWSCredentialsFromSecretMutex.Unlock()
	fake.GetAWSCredentialsFromSecretStub = nil
	if fake.getAWSCredentialsFromSecretReturnsOnCall == nil {
		fake.getAWSCredentialsFromSecretReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getAWSCredentialsFromSecretReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetAzureCredentialsFromSecret() (azure.Credentials, error) {
	fake.getAzureCredentialsFromSecretMutex.Lock()
	ret, specificReturn := fake.getAzureCredentialsFromSecretReturnsOnCall[len(fake.getAzureCredentialsFromSecretArgsForCall)]
	fake.getAzureCredentialsFromSecretArgsForCall = append(fake.getAzureCredentialsFromSecretArgsForCall, struct {
	}{})
	stub := fake.GetAzureCredentialsFromSecretStub
	fakeReturns := fake.getAzureCredentialsFromSecretReturns
	fake.recordInvocation("GetAzureCredentialsFromSecret", []interface{}{})
	fake.getAzureCredentialsFromSecretMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ClusterClient) GetAzureCredentialsFromSecretCallCount() int {
	fake.getAzureCredentialsFromSecretMutex.RLock()
	defer fake.getAzureCredentialsFromSecretMutex.RUnlock()
	return len(fake.getAzureCredentialsFromSecretArgsForCall)
}

func (fake *ClusterClient) GetAzureCredentialsFromSecretCalls(stub func() (azure.Credentials, error)) {
	fake.getAzureCredentialsFromSecretMutex.Lock()
	defer fake.getAzureCredentialsFromSecretMutex.Unlock()
	fake.GetAzureCredentialsFromSecretStub = stub
}

func (fake *ClusterClient) GetAzureCredentialsFromSecretReturns(result1 azure.Credentials, result2 error) {
	fake.getAzureCredentialsFromSecretMutex.Lock()
	defer fake.getAzureCredentialsFromSecretMutex.Unlock()
	fake.GetAzureCredentialsFromSecretStub = nil
	fake.getAzureCredentialsFromSecretReturns = struct {
		result1 azure.Credentials
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetAzureCredentialsFromSecretReturnsOnCall(i int, result1 azure.Credentials, result2 error) {
	fake.getAzureCredentialsFromSecretMutex.Lock()
	defer fake.getAzureCredentialsFromSecretMutex.Unlock()
	fake.GetAzureCredentialsFromSecretStub = nil
	if fake.getAzureCredentialsFromSecretReturnsOnCall == nil {
		fake.getAzureCredentialsFromSecretReturnsOnCall = make(map[int]struct {
			result1 azure.Credentials
			result2 error
		})
	}
	fake.getAzureCredentialsFromSecretReturnsOnCall[i] = struct {
		result1 azure.Credentials
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetBomConfigMap(arg1 string) (v1.ConfigMap, error) {
	fake.getBomConfigMapMutex.Lock()
	ret, specificReturn := fake.getBomConfigMapReturnsOnCall[len(fake.getBomConfigMapArgsForCall)]
	fake.getBomConfigMapArgsForCall = append(fake.getBomConfigMapArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetBomConfigMapStub
	fakeReturns := fake.getBomConfigMapReturns
	fake.recordInvocation("GetBomConfigMap", []interface{}{arg1})
	fake.getBomConfigMapMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ClusterClient) GetBomConfigMapCallCount() int {
	fake.getBomConfigMapMutex.RLock()
	defer fake.getBomConfigMapMutex.RUnlock()
	return len(fake.getBomConfigMapArgsForCall)
}

func (fake *ClusterClient) GetBomConfigMapCalls(stub func(string) (v1.ConfigMap, error)) {
	fake.getBomConfigMapMutex.Lock()
	defer fake.getBomConfigMapMutex.Unlock()
	fake.GetBomConfigMapStub = stub
}

func (fake *ClusterClient) GetBomConfigMapArgsForCall(i int) string {
	fake.getBomConfigMapMutex.RLock()
	defer fake.getBomConfigMapMutex.RUnlock()
	argsForCall := fake.getBomConfigMapArgsForCall[i]
	return argsForCall.arg1
}

func (fake *ClusterClient) GetBomConfigMapReturns(result1 v1.ConfigMap, result2 error) {
	fake.getBomConfigMapMutex.Lock()
	defer fake.getBomConfigMapMutex.Unlock()
	fake.GetBomConfigMapStub = nil
	fake.getBomConfigMapReturns = struct {
		result1 v1.ConfigMap
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetBomConfigMapReturnsOnCall(i int, result1 v1.ConfigMap, result2 error) {
	fake.getBomConfigMapMutex.Lock()
	defer fake.getBomConfigMapMutex.Unlock()
	fake.GetBomConfigMapStub = nil
	if fake.getBomConfigMapReturnsOnCall == nil {
		fake.getBomConfigMapReturnsOnCall = make(map[int]struct {
			result1 v1.ConfigMap
			result2 error
		})
	}
	fake.getBomConfigMapReturnsOnCall[i] = struct {
		result1 v1.ConfigMap
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetCAPZControllerManagerDeploymentsReplicas() (int32, error) {
	fake.getCAPZControllerManagerDeploymentsReplicasMutex.Lock()
	ret, specificReturn := fake.getCAPZControllerManagerDeploymentsReplicasReturnsOnCall[len(fake.getCAPZControllerManagerDeploymentsReplicasArgsForCall)]
	fake.getCAPZControllerManagerDeploymentsReplicasArgsForCall = append(fake.getCAPZControllerManagerDeploymentsReplicasArgsForCall, struct {
	}{})
	stub := fake.GetCAPZControllerManagerDeploymentsReplicasStub
	fakeReturns := fake.getCAPZControllerManagerDeploymentsReplicasReturns
	fake.recordInvocation("GetCAPZControllerManagerDeploymentsReplicas", []interface{}{})
	fake.getCAPZControllerManagerDeploymentsReplicasMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ClusterClient) GetCAPZControllerManagerDeploymentsReplicasCallCount() int {
	fake.getCAPZControllerManagerDeploymentsReplicasMutex.RLock()
	defer fake.getCAPZControllerManagerDeploymentsReplicasMutex.RUnlock()
	return len(fake.getCAPZControllerManagerDeploymentsReplicasArgsForCall)
}

func (fake *ClusterClient) GetCAPZControllerManagerDeploymentsReplicasCalls(stub func() (int32, error)) {
	fake.getCAPZControllerManagerDeploymentsReplicasMutex.Lock()
	defer fake.getCAPZControllerManagerDeploymentsReplicasMutex.Unlock()
	fake.GetCAPZControllerManagerDeploymentsReplicasStub = stub
}

func (fake *ClusterClient) GetCAPZControllerManagerDeploymentsReplicasReturns(result1 int32, result2 error) {
	fake.getCAPZControllerManagerDeploymentsReplicasMutex.Lock()
	defer fake.getCAPZControllerManagerDeploymentsReplicasMutex.Unlock()
	fake.GetCAPZControllerManagerDeploymentsReplicasStub = nil
	fake.getCAPZControllerManagerDeploymentsReplicasReturns = struct {
		result1 int32
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetCAPZControllerManagerDeploymentsReplicasReturnsOnCall(i int, result1 int32, result2 error) {
	fake.getCAPZControllerManagerDeploymentsReplicasMutex.Lock()
	defer fake.getCAPZControllerManagerDeploymentsReplicasMutex.Unlock()
	fake.GetCAPZControllerManagerDeploymentsReplicasStub = nil
	if fake.getCAPZControllerManagerDeploymentsReplicasReturnsOnCall == nil {
		fake.getCAPZControllerManagerDeploymentsReplicasReturnsOnCall = make(map[int]struct {
			result1 int32
			result2 error
		})
	}
	fake.getCAPZControllerManagerDeploymentsReplicasReturnsOnCall[i] = struct {
		result1 int32
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetCLIPluginImageRepositoryOverride() (map[string]string, error) {
	fake.getCLIPluginImageRepositoryOverrideMutex.Lock()
	ret, specificReturn := fake.getCLIPluginImageRepositoryOverrideReturnsOnCall[len(fake.getCLIPluginImageRepositoryOverrideArgsForCall)]
	fake.getCLIPluginImageRepositoryOverrideArgsForCall = append(fake.getCLIPluginImageRepositoryOverrideArgsForCall, struct {
	}{})
	stub := fake.GetCLIPluginImageRepositoryOverrideStub
	fakeReturns := fake.getCLIPluginImageRepositoryOverrideReturns
	fake.recordInvocation("GetCLIPluginImageRepositoryOverride", []interface{}{})
	fake.getCLIPluginImageRepositoryOverrideMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ClusterClient) GetCLIPluginImageRepositoryOverrideCallCount() int {
	fake.getCLIPluginImageRepositoryOverrideMutex.RLock()
	defer fake.getCLIPluginImageRepositoryOverrideMutex.RUnlock()
	return len(fake.getCLIPluginImageRepositoryOverrideArgsForCall)
}

func (fake *ClusterClient) GetCLIPluginImageRepositoryOverrideCalls(stub func() (map[string]string, error)) {
	fake.getCLIPluginImageRepositoryOverrideMutex.Lock()
	defer fake.getCLIPluginImageRepositoryOverrideMutex.Unlock()
	fake.GetCLIPluginImageRepositoryOverrideStub = stub
}

func (fake *ClusterClient) GetCLIPluginImageRepositoryOverrideReturns(result1 map[string]string, result2 error) {
	fake.getCLIPluginImageRepositoryOverrideMutex.Lock()
	defer fake.getCLIPluginImageRepositoryOverrideMutex.Unlock()
	fake.GetCLIPluginImageRepositoryOverrideStub = nil
	fake.getCLIPluginImageRepositoryOverrideReturns = struct {
		result1 map[string]string
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetCLIPluginImageRepositoryOverrideReturnsOnCall(i int, result1 map[string]string, result2 error) {
	fake.getCLIPluginImageRepositoryOverrideMutex.Lock()
	defer fake.getCLIPluginImageRepositoryOverrideMutex.Unlock()
	fake.GetCLIPluginImageRepositoryOverrideStub = nil
	if fake.getCLIPluginImageRepositoryOverrideReturnsOnCall == nil {
		fake.getCLIPluginImageRepositoryOverrideReturnsOnCall = make(map[int]struct {
			result1 map[string]string
			result2 error
		})
	}
	fake.getCLIPluginImageRepositoryOverrideReturnsOnCall[i] = struct {
		result1 map[string]string
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetClientSet() clusterclient.CrtClient {
	fake.getClientSetMutex.Lock()
	ret, specificReturn := fake.getClientSetReturnsOnCall[len(fake.getClientSetArgsForCall)]
	fake.getClientSetArgsForCall = append(fake.getClientSetArgsForCall, struct {
	}{})
	stub := fake.GetClientSetStub
	fakeReturns := fake.getClientSetReturns
	fake.recordInvocation("GetClientSet", []interface{}{})
	fake.getClientSetMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ClusterClient) GetClientSetCallCount() int {
	fake.getClientSetMutex.RLock()
	defer fake.getClientSetMutex.RUnlock()
	return len(fake.getClientSetArgsForCall)
}

func (fake *ClusterClient) GetClientSetCalls(stub func() clusterclient.CrtClient) {
	fake.getClientSetMutex.Lock()
	defer fake.getClientSetMutex.Unlock()
	fake.GetClientSetStub = stub
}

func (fake *ClusterClient) GetClientSetReturns(result1 clusterclient.CrtClient) {
	fake.getClientSetMutex.Lock()
	defer fake.getClientSetMutex.Unlock()
	fake.GetClientSetStub = nil
	fake.getClientSetReturns = struct {
		result1 clusterclient.CrtClient
	}{result1}
}

func (fake *ClusterClient) GetClientSetReturnsOnCall(i int, result1 clusterclient.CrtClient) {
	fake.getClientSetMutex.Lock()
	defer fake.getClientSetMutex.Unlock()
	fake.GetClientSetStub = nil
	if fake.getClientSetReturnsOnCall == nil {
		fake.getClientSetReturnsOnCall = make(map[int]struct {
			result1 clusterclient.CrtClient
		})
	}
	fake.getClientSetReturnsOnCall[i] = struct {
		result1 clusterclient.CrtClient
	}{result1}
}

func (fake *ClusterClient) GetClusterInfrastructure() (string, error) {
	fake.getClusterInfrastructureMutex.Lock()
	ret, specificReturn := fake.getClusterInfrastructureReturnsOnCall[len(fake.getClusterInfrastructureArgsForCall)]
	fake.getClusterInfrastructureArgsForCall = append(fake.getClusterInfrastructureArgsForCall, struct {
	}{})
	stub := fake.GetClusterInfrastructureStub
	fakeReturns := fake.getClusterInfrastructureReturns
	fake.recordInvocation("GetClusterInfrastructure", []interface{}{})
	fake.getClusterInfrastructureMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ClusterClient) GetClusterInfrastructureCallCount() int {
	fake.getClusterInfrastructureMutex.RLock()
	defer fake.getClusterInfrastructureMutex.RUnlock()
	return len(fake.getClusterInfrastructureArgsForCall)
}

func (fake *ClusterClient) GetClusterInfrastructureCalls(stub func() (string, error)) {
	fake.getClusterInfrastructureMutex.Lock()
	defer fake.getClusterInfrastructureMutex.Unlock()
	fake.GetClusterInfrastructureStub = stub
}

func (fake *ClusterClient) GetClusterInfrastructureReturns(result1 string, result2 error) {
	fake.getClusterInfrastructureMutex.Lock()
	defer fake.getClusterInfrastructureMutex.Unlock()
	fake.GetClusterInfrastructureStub = nil
	fake.getClusterInfrastructureReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetClusterInfrastructureReturnsOnCall(i int, result1 string, result2 error) {
	fake.getClusterInfrastructureMutex.Lock()
	defer fake.getClusterInfrastructureMutex.Unlock()
	fake.GetClusterInfrastructureStub = nil
	if fake.getClusterInfrastructureReturnsOnCall == nil {
		fake.getClusterInfrastructureReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getClusterInfrastructureReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetClusterResolvedOSImagesFromTKR(arg1 *v1alpha3.TanzuKubernetesRelease) ([]*v1alpha3.OSImage, error) {
	fake.getClusterResolvedOSImagesFromTKRMutex.Lock()
	ret, specificReturn := fake.getClusterResolvedOSImagesFromTKRReturnsOnCall[len(fake.getClusterResolvedOSImagesFromTKRArgsForCall)]
	fake.getClusterResolvedOSImagesFromTKRArgsForCall = append(fake.getClusterResolvedOSImagesFromTKRArgsForCall, struct {
		arg1 *v1alpha3.TanzuKubernetesRelease
	}{arg1})
	stub := fake.GetClusterResolvedOSImagesFromTKRStub
	fakeReturns := fake.getClusterResolvedOSImagesFromTKRReturns
	fake.recordInvocation("GetClusterResolvedOSImagesFromTKR", []interface{}{arg1})
	fake.getClusterResolvedOSImagesFromTKRMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ClusterClient) GetClusterResolvedOSImagesFromTKRCallCount() int {
	fake.getClusterResolvedOSImagesFromTKRMutex.RLock()
	defer fake.getClusterResolvedOSImagesFromTKRMutex.RUnlock()
	return len(fake.getClusterResolvedOSImagesFromTKRArgsForCall)
}

func (fake *ClusterClient) GetClusterResolvedOSImagesFromTKRCalls(stub func(*v1alpha3.TanzuKubernetesRelease) ([]*v1alpha3.OSImage, error)) {
	fake.getClusterResolvedOSImagesFromTKRMutex.Lock()
	defer fake.getClusterResolvedOSImagesFromTKRMutex.Unlock()
	fake.GetClusterResolvedOSImagesFromTKRStub = stub
}

func (fake *ClusterClient) GetClusterResolvedOSImagesFromTKRArgsForCall(i int) *v1alpha3.TanzuKubernetesRelease {
	fake.getClusterResolvedOSImagesFromTKRMutex.RLock()
	defer fake.getClusterResolvedOSImagesFromTKRMutex.RUnlock()
	argsForCall := fake.getClusterResolvedOSImagesFromTKRArgsForCall[i]
	return argsForCall.arg1
}

func (fake *ClusterClient) GetClusterResolvedOSImagesFromTKRReturns(result1 []*v1alpha3.OSImage, result2 error) {
	fake.getClusterResolvedOSImagesFromTKRMutex.Lock()
	defer fake.getClusterResolvedOSImagesFromTKRMutex.Unlock()
	fake.GetClusterResolvedOSImagesFromTKRStub = nil
	fake.getClusterResolvedOSImagesFromTKRReturns = struct {
		result1 []*v1alpha3.OSImage
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetClusterResolvedOSImagesFromTKRReturnsOnCall(i int, result1 []*v1alpha3.OSImage, result2 error) {
	fake.getClusterResolvedOSImagesFromTKRMutex.Lock()
	defer fake.getClusterResolvedOSImagesFromTKRMutex.Unlock()
	fake.GetClusterResolvedOSImagesFromTKRStub = nil
	if fake.getClusterResolvedOSImagesFromTKRReturnsOnCall == nil {
		fake.getClusterResolvedOSImagesFromTKRReturnsOnCall = make(map[int]struct {
			result1 []*v1alpha3.OSImage
			result2 error
		})
	}
	fake.getClusterResolvedOSImagesFromTKRReturnsOnCall[i] = struct {
		result1 []*v1alpha3.OSImage
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetClusterResolvedTanzuKubernetesRelease() (*v1alpha3.TanzuKubernetesRelease, error) {
	fake.getClusterResolvedTanzuKubernetesReleaseMutex.Lock()
	ret, specificReturn := fake.getClusterResolvedTanzuKubernetesReleaseReturnsOnCall[len(fake.getClusterResolvedTanzuKubernetesReleaseArgsForCall)]
	fake.getClusterResolvedTanzuKubernetesReleaseArgsForCall = append(fake.getClusterResolvedTanzuKubernetesReleaseArgsForCall, struct {
	}{})
	stub := fake.GetClusterResolvedTanzuKubernetesReleaseStub
	fakeReturns := fake.getClusterResolvedTanzuKubernetesReleaseReturns
	fake.recordInvocation("GetClusterResolvedTanzuKubernetesRelease", []interface{}{})
	fake.getClusterResolvedTanzuKubernetesReleaseMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ClusterClient) GetClusterResolvedTanzuKubernetesReleaseCallCount() int {
	fake.getClusterResolvedTanzuKubernetesReleaseMutex.RLock()
	defer fake.getClusterResolvedTanzuKubernetesReleaseMutex.RUnlock()
	return len(fake.getClusterResolvedTanzuKubernetesReleaseArgsForCall)
}

func (fake *ClusterClient) GetClusterResolvedTanzuKubernetesReleaseCalls(stub func() (*v1alpha3.TanzuKubernetesRelease, error)) {
	fake.getClusterResolvedTanzuKubernetesReleaseMutex.Lock()
	defer fake.getClusterResolvedTanzuKubernetesReleaseMutex.Unlock()
	fake.GetClusterResolvedTanzuKubernetesReleaseStub = stub
}

func (fake *ClusterClient) GetClusterResolvedTanzuKubernetesReleaseReturns(result1 *v1alpha3.TanzuKubernetesRelease, result2 error) {
	fake.getClusterResolvedTanzuKubernetesReleaseMutex.Lock()
	defer fake.getClusterResolvedTanzuKubernetesReleaseMutex.Unlock()
	fake.GetClusterResolvedTanzuKubernetesReleaseStub = nil
	fake.getClusterResolvedTanzuKubernetesReleaseReturns = struct {
		result1 *v1alpha3.TanzuKubernetesRelease
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetClusterResolvedTanzuKubernetesReleaseReturnsOnCall(i int, result1 *v1alpha3.TanzuKubernetesRelease, result2 error) {
	fake.getClusterResolvedTanzuKubernetesReleaseMutex.Lock()
	defer fake.getClusterResolvedTanzuKubernetesReleaseMutex.Unlock()
	fake.GetClusterResolvedTanzuKubernetesReleaseStub = nil
	if fake.getClusterResolvedTanzuKubernetesReleaseReturnsOnCall == nil {
		fake.getClusterResolvedTanzuKubernetesReleaseReturnsOnCall = make(map[int]struct {
			result1 *v1alpha3.TanzuKubernetesRelease
			result2 error
		})
	}
	fake.getClusterResolvedTanzuKubernetesReleaseReturnsOnCall[i] = struct {
		result1 *v1alpha3.TanzuKubernetesRelease
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetClusterStatusInfo(arg1 string, arg2 string, arg3 clusterclient.Client) clusterclient.ClusterStatusInfo {
	fake.getClusterStatusInfoMutex.Lock()
	ret, specificReturn := fake.getClusterStatusInfoReturnsOnCall[len(fake.getClusterStatusInfoArgsForCall)]
	fake.getClusterStatusInfoArgsForCall = append(fake.getClusterStatusInfoArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 clusterclient.Client
	}{arg1, arg2, arg3})
	stub := fake.GetClusterStatusInfoStub
	fakeReturns := fake.getClusterStatusInfoReturns
	fake.recordInvocation("GetClusterStatusInfo", []interface{}{arg1, arg2, arg3})
	fake.getClusterStatusInfoMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ClusterClient) GetClusterStatusInfoCallCount() int {
	fake.getClusterStatusInfoMutex.RLock()
	defer fake.getClusterStatusInfoMutex.RUnlock()
	return len(fake.getClusterStatusInfoArgsForCall)
}

func (fake *ClusterClient) GetClusterStatusInfoCalls(stub func(string, string, clusterclient.Client) clusterclient.ClusterStatusInfo) {
	fake.getClusterStatusInfoMutex.Lock()
	defer fake.getClusterStatusInfoMutex.Unlock()
	fake.GetClusterStatusInfoStub = stub
}

func (fake *ClusterClient) GetClusterStatusInfoArgsForCall(i int) (string, string, clusterclient.Client) {
	fake.getClusterStatusInfoMutex.RLock()
	defer fake.getClusterStatusInfoMutex.RUnlock()
	argsForCall := fake.getClusterStatusInfoArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *ClusterClient) GetClusterStatusInfoReturns(result1 clusterclient.ClusterStatusInfo) {
	fake.getClusterStatusInfoMutex.Lock()
	defer fake.getClusterStatusInfoMutex.Unlock()
	fake.GetClusterStatusInfoStub = nil
	fake.getClusterStatusInfoReturns = struct {
		result1 clusterclient.ClusterStatusInfo
	}{result1}
}

func (fake *ClusterClient) GetClusterStatusInfoReturnsOnCall(i int, result1 clusterclient.ClusterStatusInfo) {
	fake.getClusterStatusInfoMutex.Lock()
	defer fake.getClusterStatusInfoMutex.Unlock()
	fake.GetClusterStatusInfoStub = nil
	if fake.getClusterStatusInfoReturnsOnCall == nil {
		fake.getClusterStatusInfoReturnsOnCall = make(map[int]struct {
			result1 clusterclient.ClusterStatusInfo
		})
	}
	fake.getClusterStatusInfoReturnsOnCall[i] = struct {
		result1 clusterclient.ClusterStatusInfo
	}{result1}
}

func (fake *ClusterClient) GetCurrentClusterName(arg1 string) (string, error) {
	fake.getCurrentClusterNameMutex.Lock()
	ret, specificReturn := fake.getCurrentClusterNameReturnsOnCall[len(fake.getCurrentClusterNameArgsForCall)]
	fake.getCurrentClusterNameArgsForCall = append(fake.getCurrentClusterNameArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetCurrentClusterNameStub
	fakeReturns := fake.getCurrentClusterNameReturns
	fake.recordInvocation("GetCurrentClusterName", []interface{}{arg1})
	fake.getCurrentClusterNameMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ClusterClient) GetCurrentClusterNameCallCount() int {
	fake.getCurrentClusterNameMutex.RLock()
	defer fake.getCurrentClusterNameMutex.RUnlock()
	return len(fake.getCurrentClusterNameArgsForCall)
}

func (fake *ClusterClient) GetCurrentClusterNameCalls(stub func(string) (string, error)) {
	fake.getCurrentClusterNameMutex.Lock()
	defer fake.getCurrentClusterNameMutex.Unlock()
	fake.GetCurrentClusterNameStub = stub
}

func (fake *ClusterClient) GetCurrentClusterNameArgsForCall(i int) string {
	fake.getCurrentClusterNameMutex.RLock()
	defer fake.getCurrentClusterNameMutex.RUnlock()
	argsForCall := fake.getCurrentClusterNameArgsForCall[i]
	return argsForCall.arg1
}

func (fake *ClusterClient) GetCurrentClusterNameReturns(result1 string, result2 error) {
	fake.getCurrentClusterNameMutex.Lock()
	defer fake.getCurrentClusterNameMutex.Unlock()
	fake.GetCurrentClusterNameStub = nil
	fake.getCurrentClusterNameReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetCurrentClusterNameReturnsOnCall(i int, result1 string, result2 error) {
	fake.getCurrentClusterNameMutex.Lock()
	defer fake.getCurrentClusterNameMutex.Unlock()
	fake.GetCurrentClusterNameStub = nil
	if fake.getCurrentClusterNameReturnsOnCall == nil {
		fake.getCurrentClusterNameReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getCurrentClusterNameReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetCurrentKubeContext() (string, error) {
	fake.getCurrentKubeContextMutex.Lock()
	ret, specificReturn := fake.getCurrentKubeContextReturnsOnCall[len(fake.getCurrentKubeContextArgsForCall)]
	fake.getCurrentKubeContextArgsForCall = append(fake.getCurrentKubeContextArgsForCall, struct {
	}{})
	stub := fake.GetCurrentKubeContextStub
	fakeReturns := fake.getCurrentKubeContextReturns
	fake.recordInvocation("GetCurrentKubeContext", []interface{}{})
	fake.getCurrentKubeContextMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ClusterClient) GetCurrentKubeContextCallCount() int {
	fake.getCurrentKubeContextMutex.RLock()
	defer fake.getCurrentKubeContextMutex.RUnlock()
	return len(fake.getCurrentKubeContextArgsForCall)
}

func (fake *ClusterClient) GetCurrentKubeContextCalls(stub func() (string, error)) {
	fake.getCurrentKubeContextMutex.Lock()
	defer fake.getCurrentKubeContextMutex.Unlock()
	fake.GetCurrentKubeContextStub = stub
}

func (fake *ClusterClient) GetCurrentKubeContextReturns(result1 string, result2 error) {
	fake.getCurrentKubeContextMutex.Lock()
	defer fake.getCurrentKubeContextMutex.Unlock()
	fake.GetCurrentKubeContextStub = nil
	fake.getCurrentKubeContextReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetCurrentKubeContextReturnsOnCall(i int, result1 string, result2 error) {
	fake.getCurrentKubeContextMutex.Lock()
	defer fake.getCurrentKubeContextMutex.Unlock()
	fake.GetCurrentKubeContextStub = nil
	if fake.getCurrentKubeContextReturnsOnCall == nil {
		fake.getCurrentKubeContextReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getCurrentKubeContextReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetCurrentKubeconfigFile() string {
	fake.getCurrentKubeconfigFileMutex.Lock()
	ret, specificReturn := fake.getCurrentKubeconfigFileReturnsOnCall[len(fake.getCurrentKubeconfigFileArgsForCall)]
	fake.getCurrentKubeconfigFileArgsForCall = append(fake.getCurrentKubeconfigFileArgsForCall, struct {
	}{})
	stub := fake.GetCurrentKubeconfigFileStub
	fakeReturns := fake.getCurrentKubeconfigFileReturns
	fake.recordInvocation("GetCurrentKubeconfigFile", []interface{}{})
	fake.getCurrentKubeconfigFileMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ClusterClient) GetCurrentKubeconfigFileCallCount() int {
	fake.getCurrentKubeconfigFileMutex.RLock()
	defer fake.getCurrentKubeconfigFileMutex.RUnlock()
	return len(fake.getCurrentKubeconfigFileArgsForCall)
}

func (fake *ClusterClient) GetCurrentKubeconfigFileCalls(stub func() string) {
	fake.getCurrentKubeconfigFileMutex.Lock()
	defer fake.getCurrentKubeconfigFileMutex.Unlock()
	fake.GetCurrentKubeconfigFileStub = stub
}

func (fake *ClusterClient) GetCurrentKubeconfigFileReturns(result1 string) {
	fake.getCurrentKubeconfigFileMutex.Lock()
	defer fake.getCurrentKubeconfigFileMutex.Unlock()
	fake.GetCurrentKubeconfigFileStub = nil
	fake.getCurrentKubeconfigFileReturns = struct {
		result1 string
	}{result1}
}

func (fake *ClusterClient) GetCurrentKubeconfigFileReturnsOnCall(i int, result1 string) {
	fake.getCurrentKubeconfigFileMutex.Lock()
	defer fake.getCurrentKubeconfigFileMutex.Unlock()
	fake.GetCurrentKubeconfigFileStub = nil
	if fake.getCurrentKubeconfigFileReturnsOnCall == nil {
		fake.getCurrentKubeconfigFileReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getCurrentKubeconfigFileReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *ClusterClient) GetCurrentNamespace() (string, error) {
	fake.getCurrentNamespaceMutex.Lock()
	ret, specificReturn := fake.getCurrentNamespaceReturnsOnCall[len(fake.getCurrentNamespaceArgsForCall)]
	fake.getCurrentNamespaceArgsForCall = append(fake.getCurrentNamespaceArgsForCall, struct {
	}{})
	stub := fake.GetCurrentNamespaceStub
	fakeReturns := fake.getCurrentNamespaceReturns
	fake.recordInvocation("GetCurrentNamespace", []interface{}{})
	fake.getCurrentNamespaceMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ClusterClient) GetCurrentNamespaceCallCount() int {
	fake.getCurrentNamespaceMutex.RLock()
	defer fake.getCurrentNamespaceMutex.RUnlock()
	return len(fake.getCurrentNamespaceArgsForCall)
}

func (fake *ClusterClient) GetCurrentNamespaceCalls(stub func() (string, error)) {
	fake.getCurrentNamespaceMutex.Lock()
	defer fake.getCurrentNamespaceMutex.Unlock()
	fake.GetCurrentNamespaceStub = stub
}

func (fake *ClusterClient) GetCurrentNamespaceReturns(result1 string, result2 error) {
	fake.getCurrentNamespaceMutex.Lock()
	defer fake.getCurrentNamespaceMutex.Unlock()
	fake.GetCurrentNamespaceStub = nil
	fake.getCurrentNamespaceReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetCurrentNamespaceReturnsOnCall(i int, result1 string, result2 error) {
	fake.getCurrentNamespaceMutex.Lock()
	defer fake.getCurrentNamespaceMutex.Unlock()
	fake.GetCurrentNamespaceStub = nil
	if fake.getCurrentNamespaceReturnsOnCall == nil {
		fake.getCurrentNamespaceReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getCurrentNamespaceReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetDeployment(arg1 string, arg2 string) (v1a.Deployment, error) {
	fake.getDeploymentMutex.Lock()
	ret, specificReturn := fake.getDeploymentReturnsOnCall[len(fake.getDeploymentArgsForCall)]
	fake.getDeploymentArgsForCall = append(fake.getDeploymentArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.GetDeploymentStub
	fakeReturns := fake.getDeploymentReturns
	fake.recordInvocation("GetDeployment", []interface{}{arg1, arg2})
	fake.getDeploymentMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ClusterClient) GetDeploymentCallCount() int {
	fake.getDeploymentMutex.RLock()
	defer fake.getDeploymentMutex.RUnlock()
	return len(fake.getDeploymentArgsForCall)
}

func (fake *ClusterClient) GetDeploymentCalls(stub func(string, string) (v1a.Deployment, error)) {
	fake.getDeploymentMutex.Lock()
	defer fake.getDeploymentMutex.Unlock()
	fake.GetDeploymentStub = stub
}

func (fake *ClusterClient) GetDeploymentArgsForCall(i int) (string, string) {
	fake.getDeploymentMutex.RLock()
	defer fake.getDeploymentMutex.RUnlock()
	argsForCall := fake.getDeploymentArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ClusterClient) GetDeploymentReturns(result1 v1a.Deployment, result2 error) {
	fake.getDeploymentMutex.Lock()
	defer fake.getDeploymentMutex.Unlock()
	fake.GetDeploymentStub = nil
	fake.getDeploymentReturns = struct {
		result1 v1a.Deployment
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetDeploymentReturnsOnCall(i int, result1 v1a.Deployment, result2 error) {
	fake.getDeploymentMutex.Lock()
	defer fake.getDeploymentMutex.Unlock()
	fake.GetDeploymentStub = nil
	if fake.getDeploymentReturnsOnCall == nil {
		fake.getDeploymentReturnsOnCall = make(map[int]struct {
			result1 v1a.Deployment
			result2 error
		})
	}
	fake.getDeploymentReturnsOnCall[i] = struct {
		result1 v1a.Deployment
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetKCPObjectForCluster(arg1 string, arg2 string) (*v1beta1.KubeadmControlPlane, error) {
	fake.getKCPObjectForClusterMutex.Lock()
	ret, specificReturn := fake.getKCPObjectForClusterReturnsOnCall[len(fake.getKCPObjectForClusterArgsForCall)]
	fake.getKCPObjectForClusterArgsForCall = append(fake.getKCPObjectForClusterArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.GetKCPObjectForClusterStub
	fakeReturns := fake.getKCPObjectForClusterReturns
	fake.recordInvocation("GetKCPObjectForCluster", []interface{}{arg1, arg2})
	fake.getKCPObjectForClusterMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ClusterClient) GetKCPObjectForClusterCallCount() int {
	fake.getKCPObjectForClusterMutex.RLock()
	defer fake.getKCPObjectForClusterMutex.RUnlock()
	return len(fake.getKCPObjectForClusterArgsForCall)
}

func (fake *ClusterClient) GetKCPObjectForClusterCalls(stub func(string, string) (*v1beta1.KubeadmControlPlane, error)) {
	fake.getKCPObjectForClusterMutex.Lock()
	defer fake.getKCPObjectForClusterMutex.Unlock()
	fake.GetKCPObjectForClusterStub = stub
}

func (fake *ClusterClient) GetKCPObjectForClusterArgsForCall(i int) (string, string) {
	fake.getKCPObjectForClusterMutex.RLock()
	defer fake.getKCPObjectForClusterMutex.RUnlock()
	argsForCall := fake.getKCPObjectForClusterArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ClusterClient) GetKCPObjectForClusterReturns(result1 *v1beta1.KubeadmControlPlane, result2 error) {
	fake.getKCPObjectForClusterMutex.Lock()
	defer fake.getKCPObjectForClusterMutex.Unlock()
	fake.GetKCPObjectForClusterStub = nil
	fake.getKCPObjectForClusterReturns = struct {
		result1 *v1beta1.KubeadmControlPlane
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetKCPObjectForClusterReturnsOnCall(i int, result1 *v1beta1.KubeadmControlPlane, result2 error) {
	fake.getKCPObjectForClusterMutex.Lock()
	defer fake.getKCPObjectForClusterMutex.Unlock()
	fake.GetKCPObjectForClusterStub = nil
	if fake.getKCPObjectForClusterReturnsOnCall == nil {
		fake.getKCPObjectForClusterReturnsOnCall = make(map[int]struct {
			result1 *v1beta1.KubeadmControlPlane
			result2 error
		})
	}
	fake.getKCPObjectForClusterReturnsOnCall[i] = struct {
		result1 *v1beta1.KubeadmControlPlane
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetKubeConfigForCluster(arg1 string, arg2 string, arg3 *clusterclient.PollOptions) ([]byte, error) {
	fake.getKubeConfigForClusterMutex.Lock()
	ret, specificReturn := fake.getKubeConfigForClusterReturnsOnCall[len(fake.getKubeConfigForClusterArgsForCall)]
	fake.getKubeConfigForClusterArgsForCall = append(fake.getKubeConfigForClusterArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 *clusterclient.PollOptions
	}{arg1, arg2, arg3})
	stub := fake.GetKubeConfigForClusterStub
	fakeReturns := fake.getKubeConfigForClusterReturns
	fake.recordInvocation("GetKubeConfigForCluster", []interface{}{arg1, arg2, arg3})
	fake.getKubeConfigForClusterMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ClusterClient) GetKubeConfigForClusterCallCount() int {
	fake.getKubeConfigForClusterMutex.RLock()
	defer fake.getKubeConfigForClusterMutex.RUnlock()
	return len(fake.getKubeConfigForClusterArgsForCall)
}

func (fake *ClusterClient) GetKubeConfigForClusterCalls(stub func(string, string, *clusterclient.PollOptions) ([]byte, error)) {
	fake.getKubeConfigForClusterMutex.Lock()
	defer fake.getKubeConfigForClusterMutex.Unlock()
	fake.GetKubeConfigForClusterStub = stub
}

func (fake *ClusterClient) GetKubeConfigForClusterArgsForCall(i int) (string, string, *clusterclient.PollOptions) {
	fake.getKubeConfigForClusterMutex.RLock()
	defer fake.getKubeConfigForClusterMutex.RUnlock()
	argsForCall := fake.getKubeConfigForClusterArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *ClusterClient) GetKubeConfigForClusterReturns(result1 []byte, result2 error) {
	fake.getKubeConfigForClusterMutex.Lock()
	defer fake.getKubeConfigForClusterMutex.Unlock()
	fake.GetKubeConfigForClusterStub = nil
	fake.getKubeConfigForClusterReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetKubeConfigForClusterReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.getKubeConfigForClusterMutex.Lock()
	defer fake.getKubeConfigForClusterMutex.Unlock()
	fake.GetKubeConfigForClusterStub = nil
	if fake.getKubeConfigForClusterReturnsOnCall == nil {
		fake.getKubeConfigForClusterReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.getKubeConfigForClusterReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetKubernetesVersion() (string, error) {
	fake.getKubernetesVersionMutex.Lock()
	ret, specificReturn := fake.getKubernetesVersionReturnsOnCall[len(fake.getKubernetesVersionArgsForCall)]
	fake.getKubernetesVersionArgsForCall = append(fake.getKubernetesVersionArgsForCall, struct {
	}{})
	stub := fake.GetKubernetesVersionStub
	fakeReturns := fake.getKubernetesVersionReturns
	fake.recordInvocation("GetKubernetesVersion", []interface{}{})
	fake.getKubernetesVersionMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ClusterClient) GetKubernetesVersionCallCount() int {
	fake.getKubernetesVersionMutex.RLock()
	defer fake.getKubernetesVersionMutex.RUnlock()
	return len(fake.getKubernetesVersionArgsForCall)
}

func (fake *ClusterClient) GetKubernetesVersionCalls(stub func() (string, error)) {
	fake.getKubernetesVersionMutex.Lock()
	defer fake.getKubernetesVersionMutex.Unlock()
	fake.GetKubernetesVersionStub = stub
}

func (fake *ClusterClient) GetKubernetesVersionReturns(result1 string, result2 error) {
	fake.getKubernetesVersionMutex.Lock()
	defer fake.getKubernetesVersionMutex.Unlock()
	fake.GetKubernetesVersionStub = nil
	fake.getKubernetesVersionReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetKubernetesVersionReturnsOnCall(i int, result1 string, result2 error) {
	fake.getKubernetesVersionMutex.Lock()
	defer fake.getKubernetesVersionMutex.Unlock()
	fake.GetKubernetesVersionStub = nil
	if fake.getKubernetesVersionReturnsOnCall == nil {
		fake.getKubernetesVersionReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getKubernetesVersionReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetMDObjectForCluster(arg1 string, arg2 string) ([]v1beta1a.MachineDeployment, error) {
	fake.getMDObjectForClusterMutex.Lock()
	ret, specificReturn := fake.getMDObjectForClusterReturnsOnCall[len(fake.getMDObjectForClusterArgsForCall)]
	fake.getMDObjectForClusterArgsForCall = append(fake.getMDObjectForClusterArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.GetMDObjectForClusterStub
	fakeReturns := fake.getMDObjectForClusterReturns
	fake.recordInvocation("GetMDObjectForCluster", []interface{}{arg1, arg2})
	fake.getMDObjectForClusterMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ClusterClient) GetMDObjectForClusterCallCount() int {
	fake.getMDObjectForClusterMutex.RLock()
	defer fake.getMDObjectForClusterMutex.RUnlock()
	return len(fake.getMDObjectForClusterArgsForCall)
}

func (fake *ClusterClient) GetMDObjectForClusterCalls(stub func(string, string) ([]v1beta1a.MachineDeployment, error)) {
	fake.getMDObjectForClusterMutex.Lock()
	defer fake.getMDObjectForClusterMutex.Unlock()
	fake.GetMDObjectForClusterStub = stub
}

func (fake *ClusterClient) GetMDObjectForClusterArgsForCall(i int) (string, string) {
	fake.getMDObjectForClusterMutex.RLock()
	defer fake.getMDObjectForClusterMutex.RUnlock()
	argsForCall := fake.getMDObjectForClusterArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ClusterClient) GetMDObjectForClusterReturns(result1 []v1beta1a.MachineDeployment, result2 error) {
	fake.getMDObjectForClusterMutex.Lock()
	defer fake.getMDObjectForClusterMutex.Unlock()
	fake.GetMDObjectForClusterStub = nil
	fake.getMDObjectForClusterReturns = struct {
		result1 []v1beta1a.MachineDeployment
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetMDObjectForClusterReturnsOnCall(i int, result1 []v1beta1a.MachineDeployment, result2 error) {
	fake.getMDObjectForClusterMutex.Lock()
	defer fake.getMDObjectForClusterMutex.Unlock()
	fake.GetMDObjectForClusterStub = nil
	if fake.getMDObjectForClusterReturnsOnCall == nil {
		fake.getMDObjectForClusterReturnsOnCall = make(map[int]struct {
			result1 []v1beta1a.MachineDeployment
			result2 error
		})
	}
	fake.getMDObjectForClusterReturnsOnCall[i] = struct {
		result1 []v1beta1a.MachineDeployment
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetMachineObjectsForCluster(arg1 string, arg2 string) (map[string]v1beta1a.Machine, map[string]v1beta1a.Machine, error) {
	fake.getMachineObjectsForClusterMutex.Lock()
	ret, specificReturn := fake.getMachineObjectsForClusterReturnsOnCall[len(fake.getMachineObjectsForClusterArgsForCall)]
	fake.getMachineObjectsForClusterArgsForCall = append(fake.getMachineObjectsForClusterArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.GetMachineObjectsForClusterStub
	fakeReturns := fake.getMachineObjectsForClusterReturns
	fake.recordInvocation("GetMachineObjectsForCluster", []interface{}{arg1, arg2})
	fake.getMachineObjectsForClusterMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *ClusterClient) GetMachineObjectsForClusterCallCount() int {
	fake.getMachineObjectsForClusterMutex.RLock()
	defer fake.getMachineObjectsForClusterMutex.RUnlock()
	return len(fake.getMachineObjectsForClusterArgsForCall)
}

func (fake *ClusterClient) GetMachineObjectsForClusterCalls(stub func(string, string) (map[string]v1beta1a.Machine, map[string]v1beta1a.Machine, error)) {
	fake.getMachineObjectsForClusterMutex.Lock()
	defer fake.getMachineObjectsForClusterMutex.Unlock()
	fake.GetMachineObjectsForClusterStub = stub
}

func (fake *ClusterClient) GetMachineObjectsForClusterArgsForCall(i int) (string, string) {
	fake.getMachineObjectsForClusterMutex.RLock()
	defer fake.getMachineObjectsForClusterMutex.RUnlock()
	argsForCall := fake.getMachineObjectsForClusterArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ClusterClient) GetMachineObjectsForClusterReturns(result1 map[string]v1beta1a.Machine, result2 map[string]v1beta1a.Machine, result3 error) {
	fake.getMachineObjectsForClusterMutex.Lock()
	defer fake.getMachineObjectsForClusterMutex.Unlock()
	fake.GetMachineObjectsForClusterStub = nil
	fake.getMachineObjectsForClusterReturns = struct {
		result1 map[string]v1beta1a.Machine
		result2 map[string]v1beta1a.Machine
		result3 error
	}{result1, result2, result3}
}

func (fake *ClusterClient) GetMachineObjectsForClusterReturnsOnCall(i int, result1 map[string]v1beta1a.Machine, result2 map[string]v1beta1a.Machine, result3 error) {
	fake.getMachineObjectsForClusterMutex.Lock()
	defer fake.getMachineObjectsForClusterMutex.Unlock()
	fake.GetMachineObjectsForClusterStub = nil
	if fake.getMachineObjectsForClusterReturnsOnCall == nil {
		fake.getMachineObjectsForClusterReturnsOnCall = make(map[int]struct {
			result1 map[string]v1beta1a.Machine
			result2 map[string]v1beta1a.Machine
			result3 error
		})
	}
	fake.getMachineObjectsForClusterReturnsOnCall[i] = struct {
		result1 map[string]v1beta1a.Machine
		result2 map[string]v1beta1a.Machine
		result3 error
	}{result1, result2, result3}
}

func (fake *ClusterClient) GetManagementClusterTKGVersion(arg1 string, arg2 string) (string, error) {
	fake.getManagementClusterTKGVersionMutex.Lock()
	ret, specificReturn := fake.getManagementClusterTKGVersionReturnsOnCall[len(fake.getManagementClusterTKGVersionArgsForCall)]
	fake.getManagementClusterTKGVersionArgsForCall = append(fake.getManagementClusterTKGVersionArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.GetManagementClusterTKGVersionStub
	fakeReturns := fake.getManagementClusterTKGVersionReturns
	fake.recordInvocation("GetManagementClusterTKGVersion", []interface{}{arg1, arg2})
	fake.getManagementClusterTKGVersionMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ClusterClient) GetManagementClusterTKGVersionCallCount() int {
	fake.getManagementClusterTKGVersionMutex.RLock()
	defer fake.getManagementClusterTKGVersionMutex.RUnlock()
	return len(fake.getManagementClusterTKGVersionArgsForCall)
}

func (fake *ClusterClient) GetManagementClusterTKGVersionCalls(stub func(string, string) (string, error)) {
	fake.getManagementClusterTKGVersionMutex.Lock()
	defer fake.getManagementClusterTKGVersionMutex.Unlock()
	fake.GetManagementClusterTKGVersionStub = stub
}

func (fake *ClusterClient) GetManagementClusterTKGVersionArgsForCall(i int) (string, string) {
	fake.getManagementClusterTKGVersionMutex.RLock()
	defer fake.getManagementClusterTKGVersionMutex.RUnlock()
	argsForCall := fake.getManagementClusterTKGVersionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ClusterClient) GetManagementClusterTKGVersionReturns(result1 string, result2 error) {
	fake.getManagementClusterTKGVersionMutex.Lock()
	defer fake.getManagementClusterTKGVersionMutex.Unlock()
	fake.GetManagementClusterTKGVersionStub = nil
	fake.getManagementClusterTKGVersionReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetManagementClusterTKGVersionReturnsOnCall(i int, result1 string, result2 error) {
	fake.getManagementClusterTKGVersionMutex.Lock()
	defer fake.getManagementClusterTKGVersionMutex.Unlock()
	fake.GetManagementClusterTKGVersionStub = nil
	if fake.getManagementClusterTKGVersionReturnsOnCall == nil {
		fake.getManagementClusterTKGVersionReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getManagementClusterTKGVersionReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetPacificClusterObject(arg1 string, arg2 string) (*v1alpha2.TanzuKubernetesCluster, error) {
	fake.getPacificClusterObjectMutex.Lock()
	ret, specificReturn := fake.getPacificClusterObjectReturnsOnCall[len(fake.getPacificClusterObjectArgsForCall)]
	fake.getPacificClusterObjectArgsForCall = append(fake.getPacificClusterObjectArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.GetPacificClusterObjectStub
	fakeReturns := fake.getPacificClusterObjectReturns
	fake.recordInvocation("GetPacificClusterObject", []interface{}{arg1, arg2})
	fake.getPacificClusterObjectMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ClusterClient) GetPacificClusterObjectCallCount() int {
	fake.getPacificClusterObjectMutex.RLock()
	defer fake.getPacificClusterObjectMutex.RUnlock()
	return len(fake.getPacificClusterObjectArgsForCall)
}

func (fake *ClusterClient) GetPacificClusterObjectCalls(stub func(string, string) (*v1alpha2.TanzuKubernetesCluster, error)) {
	fake.getPacificClusterObjectMutex.Lock()
	defer fake.getPacificClusterObjectMutex.Unlock()
	fake.GetPacificClusterObjectStub = stub
}

func (fake *ClusterClient) GetPacificClusterObjectArgsForCall(i int) (string, string) {
	fake.getPacificClusterObjectMutex.RLock()
	defer fake.getPacificClusterObjectMutex.RUnlock()
	argsForCall := fake.getPacificClusterObjectArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ClusterClient) GetPacificClusterObjectReturns(result1 *v1alpha2.TanzuKubernetesCluster, result2 error) {
	fake.getPacificClusterObjectMutex.Lock()
	defer fake.getPacificClusterObjectMutex.Unlock()
	fake.GetPacificClusterObjectStub = nil
	fake.getPacificClusterObjectReturns = struct {
		result1 *v1alpha2.TanzuKubernetesCluster
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetPacificClusterObjectReturnsOnCall(i int, result1 *v1alpha2.TanzuKubernetesCluster, result2 error) {
	fake.getPacificClusterObjectMutex.Lock()
	defer fake.getPacificClusterObjectMutex.Unlock()
	fake.GetPacificClusterObjectStub = nil
	if fake.getPacificClusterObjectReturnsOnCall == nil {
		fake.getPacificClusterObjectReturnsOnCall = make(map[int]struct {
			result1 *v1alpha2.TanzuKubernetesCluster
			result2 error
		})
	}
	fake.getPacificClusterObjectReturnsOnCall[i] = struct {
		result1 *v1alpha2.TanzuKubernetesCluster
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetPacificTKCAPIVersion() (string, error) {
	fake.getPacificTKCAPIVersionMutex.Lock()
	ret, specificReturn := fake.getPacificTKCAPIVersionReturnsOnCall[len(fake.getPacificTKCAPIVersionArgsForCall)]
	fake.getPacificTKCAPIVersionArgsForCall = append(fake.getPacificTKCAPIVersionArgsForCall, struct {
	}{})
	stub := fake.GetPacificTKCAPIVersionStub
	fakeReturns := fake.getPacificTKCAPIVersionReturns
	fake.recordInvocation("GetPacificTKCAPIVersion", []interface{}{})
	fake.getPacificTKCAPIVersionMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ClusterClient) GetPacificTKCAPIVersionCallCount() int {
	fake.getPacificTKCAPIVersionMutex.RLock()
	defer fake.getPacificTKCAPIVersionMutex.RUnlock()
	return len(fake.getPacificTKCAPIVersionArgsForCall)
}

func (fake *ClusterClient) GetPacificTKCAPIVersionCalls(stub func() (string, error)) {
	fake.getPacificTKCAPIVersionMutex.Lock()
	defer fake.getPacificTKCAPIVersionMutex.Unlock()
	fake.GetPacificTKCAPIVersionStub = stub
}

func (fake *ClusterClient) GetPacificTKCAPIVersionReturns(result1 string, result2 error) {
	fake.getPacificTKCAPIVersionMutex.Lock()
	defer fake.getPacificTKCAPIVersionMutex.Unlock()
	fake.GetPacificTKCAPIVersionStub = nil
	fake.getPacificTKCAPIVersionReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetPacificTKCAPIVersionReturnsOnCall(i int, result1 string, result2 error) {
	fake.getPacificTKCAPIVersionMutex.Lock()
	defer fake.getPacificTKCAPIVersionMutex.Unlock()
	fake.GetPacificTKCAPIVersionStub = nil
	if fake.getPacificTKCAPIVersionReturnsOnCall == nil {
		fake.getPacificTKCAPIVersionReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getPacificTKCAPIVersionReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetPacificTanzuKubernetesReleases() ([]string, error) {
	fake.getPacificTanzuKubernetesReleasesMutex.Lock()
	ret, specificReturn := fake.getPacificTanzuKubernetesReleasesReturnsOnCall[len(fake.getPacificTanzuKubernetesReleasesArgsForCall)]
	fake.getPacificTanzuKubernetesReleasesArgsForCall = append(fake.getPacificTanzuKubernetesReleasesArgsForCall, struct {
	}{})
	stub := fake.GetPacificTanzuKubernetesReleasesStub
	fakeReturns := fake.getPacificTanzuKubernetesReleasesReturns
	fake.recordInvocation("GetPacificTanzuKubernetesReleases", []interface{}{})
	fake.getPacificTanzuKubernetesReleasesMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ClusterClient) GetPacificTanzuKubernetesReleasesCallCount() int {
	fake.getPacificTanzuKubernetesReleasesMutex.RLock()
	defer fake.getPacificTanzuKubernetesReleasesMutex.RUnlock()
	return len(fake.getPacificTanzuKubernetesReleasesArgsForCall)
}

func (fake *ClusterClient) GetPacificTanzuKubernetesReleasesCalls(stub func() ([]string, error)) {
	fake.getPacificTanzuKubernetesReleasesMutex.Lock()
	defer fake.getPacificTanzuKubernetesReleasesMutex.Unlock()
	fake.GetPacificTanzuKubernetesReleasesStub = stub
}

func (fake *ClusterClient) GetPacificTanzuKubernetesReleasesReturns(result1 []string, result2 error) {
	fake.getPacificTanzuKubernetesReleasesMutex.Lock()
	defer fake.getPacificTanzuKubernetesReleasesMutex.Unlock()
	fake.GetPacificTanzuKubernetesReleasesStub = nil
	fake.getPacificTanzuKubernetesReleasesReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetPacificTanzuKubernetesReleasesReturnsOnCall(i int, result1 []string, result2 error) {
	fake.getPacificTanzuKubernetesReleasesMutex.Lock()
	defer fake.getPacificTanzuKubernetesReleasesMutex.Unlock()
	fake.GetPacificTanzuKubernetesReleasesStub = nil
	if fake.getPacificTanzuKubernetesReleasesReturnsOnCall == nil {
		fake.getPacificTanzuKubernetesReleasesReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.getPacificTanzuKubernetesReleasesReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetPackage(arg1 string, arg2 string) (*v1alpha1.Package, error) {
	fake.getPackageMutex.Lock()
	ret, specificReturn := fake.getPackageReturnsOnCall[len(fake.getPackageArgsForCall)]
	fake.getPackageArgsForCall = append(fake.getPackageArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.GetPackageStub
	fakeReturns := fake.getPackageReturns
	fake.recordInvocation("GetPackage", []interface{}{arg1, arg2})
	fake.getPackageMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ClusterClient) GetPackageCallCount() int {
	fake.getPackageMutex.RLock()
	defer fake.getPackageMutex.RUnlock()
	return len(fake.getPackageArgsForCall)
}

func (fake *ClusterClient) GetPackageCalls(stub func(string, string) (*v1alpha1.Package, error)) {
	fake.getPackageMutex.Lock()
	defer fake.getPackageMutex.Unlock()
	fake.GetPackageStub = stub
}

func (fake *ClusterClient) GetPackageArgsForCall(i int) (string, string) {
	fake.getPackageMutex.RLock()
	defer fake.getPackageMutex.RUnlock()
	argsForCall := fake.getPackageArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ClusterClient) GetPackageReturns(result1 *v1alpha1.Package, result2 error) {
	fake.getPackageMutex.Lock()
	defer fake.getPackageMutex.Unlock()
	fake.GetPackageStub = nil
	fake.getPackageReturns = struct {
		result1 *v1alpha1.Package
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetPackageReturnsOnCall(i int, result1 *v1alpha1.Package, result2 error) {
	fake.getPackageMutex.Lock()
	defer fake.getPackageMutex.Unlock()
	fake.GetPackageStub = nil
	if fake.getPackageReturnsOnCall == nil {
		fake.getPackageReturnsOnCall = make(map[int]struct {
			result1 *v1alpha1.Package
			result2 error
		})
	}
	fake.getPackageReturnsOnCall[i] = struct {
		result1 *v1alpha1.Package
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetPinnipedIssuerURLAndCA() (string, string, error) {
	fake.getPinnipedIssuerURLAndCAMutex.Lock()
	ret, specificReturn := fake.getPinnipedIssuerURLAndCAReturnsOnCall[len(fake.getPinnipedIssuerURLAndCAArgsForCall)]
	fake.getPinnipedIssuerURLAndCAArgsForCall = append(fake.getPinnipedIssuerURLAndCAArgsForCall, struct {
	}{})
	stub := fake.GetPinnipedIssuerURLAndCAStub
	fakeReturns := fake.getPinnipedIssuerURLAndCAReturns
	fake.recordInvocation("GetPinnipedIssuerURLAndCA", []interface{}{})
	fake.getPinnipedIssuerURLAndCAMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *ClusterClient) GetPinnipedIssuerURLAndCACallCount() int {
	fake.getPinnipedIssuerURLAndCAMutex.RLock()
	defer fake.getPinnipedIssuerURLAndCAMutex.RUnlock()
	return len(fake.getPinnipedIssuerURLAndCAArgsForCall)
}

func (fake *ClusterClient) GetPinnipedIssuerURLAndCACalls(stub func() (string, string, error)) {
	fake.getPinnipedIssuerURLAndCAMutex.Lock()
	defer fake.getPinnipedIssuerURLAndCAMutex.Unlock()
	fake.GetPinnipedIssuerURLAndCAStub = stub
}

func (fake *ClusterClient) GetPinnipedIssuerURLAndCAReturns(result1 string, result2 string, result3 error) {
	fake.getPinnipedIssuerURLAndCAMutex.Lock()
	defer fake.getPinnipedIssuerURLAndCAMutex.Unlock()
	fake.GetPinnipedIssuerURLAndCAStub = nil
	fake.getPinnipedIssuerURLAndCAReturns = struct {
		result1 string
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *ClusterClient) GetPinnipedIssuerURLAndCAReturnsOnCall(i int, result1 string, result2 string, result3 error) {
	fake.getPinnipedIssuerURLAndCAMutex.Lock()
	defer fake.getPinnipedIssuerURLAndCAMutex.Unlock()
	fake.GetPinnipedIssuerURLAndCAStub = nil
	if fake.getPinnipedIssuerURLAndCAReturnsOnCall == nil {
		fake.getPinnipedIssuerURLAndCAReturnsOnCall = make(map[int]struct {
			result1 string
			result2 string
			result3 error
		})
	}
	fake.getPinnipedIssuerURLAndCAReturnsOnCall[i] = struct {
		result1 string
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *ClusterClient) GetRegionalClusterDefaultProviderName(arg1 v1alpha3a.ProviderType) (string, error) {
	fake.getRegionalClusterDefaultProviderNameMutex.Lock()
	ret, specificReturn := fake.getRegionalClusterDefaultProviderNameReturnsOnCall[len(fake.getRegionalClusterDefaultProviderNameArgsForCall)]
	fake.getRegionalClusterDefaultProviderNameArgsForCall = append(fake.getRegionalClusterDefaultProviderNameArgsForCall, struct {
		arg1 v1alpha3a.ProviderType
	}{arg1})
	stub := fake.GetRegionalClusterDefaultProviderNameStub
	fakeReturns := fake.getRegionalClusterDefaultProviderNameReturns
	fake.recordInvocation("GetRegionalClusterDefaultProviderName", []interface{}{arg1})
	fake.getRegionalClusterDefaultProviderNameMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ClusterClient) GetRegionalClusterDefaultProviderNameCallCount() int {
	fake.getRegionalClusterDefaultProviderNameMutex.RLock()
	defer fake.getRegionalClusterDefaultProviderNameMutex.RUnlock()
	return len(fake.getRegionalClusterDefaultProviderNameArgsForCall)
}

func (fake *ClusterClient) GetRegionalClusterDefaultProviderNameCalls(stub func(v1alpha3a.ProviderType) (string, error)) {
	fake.getRegionalClusterDefaultProviderNameMutex.Lock()
	defer fake.getRegionalClusterDefaultProviderNameMutex.Unlock()
	fake.GetRegionalClusterDefaultProviderNameStub = stub
}

func (fake *ClusterClient) GetRegionalClusterDefaultProviderNameArgsForCall(i int) v1alpha3a.ProviderType {
	fake.getRegionalClusterDefaultProviderNameMutex.RLock()
	defer fake.getRegionalClusterDefaultProviderNameMutex.RUnlock()
	argsForCall := fake.getRegionalClusterDefaultProviderNameArgsForCall[i]
	return argsForCall.arg1
}

func (fake *ClusterClient) GetRegionalClusterDefaultProviderNameReturns(result1 string, result2 error) {
	fake.getRegionalClusterDefaultProviderNameMutex.Lock()
	defer fake.getRegionalClusterDefaultProviderNameMutex.Unlock()
	fake.GetRegionalClusterDefaultProviderNameStub = nil
	fake.getRegionalClusterDefaultProviderNameReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetRegionalClusterDefaultProviderNameReturnsOnCall(i int, result1 string, result2 error) {
	fake.getRegionalClusterDefaultProviderNameMutex.Lock()
	defer fake.getRegionalClusterDefaultProviderNameMutex.Unlock()
	fake.GetRegionalClusterDefaultProviderNameStub = nil
	if fake.getRegionalClusterDefaultProviderNameReturnsOnCall == nil {
		fake.getRegionalClusterDefaultProviderNameReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getRegionalClusterDefaultProviderNameReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetResource(arg1 interface{}, arg2 string, arg3 string, arg4 clusterclient.PostVerifyrFunc, arg5 *clusterclient.PollOptions) error {
	fake.getResourceMutex.Lock()
	ret, specificReturn := fake.getResourceReturnsOnCall[len(fake.getResourceArgsForCall)]
	fake.getResourceArgsForCall = append(fake.getResourceArgsForCall, struct {
		arg1 interface{}
		arg2 string
		arg3 string
		arg4 clusterclient.PostVerifyrFunc
		arg5 *clusterclient.PollOptions
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.GetResourceStub
	fakeReturns := fake.getResourceReturns
	fake.recordInvocation("GetResource", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.getResourceMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ClusterClient) GetResourceCallCount() int {
	fake.getResourceMutex.RLock()
	defer fake.getResourceMutex.RUnlock()
	return len(fake.getResourceArgsForCall)
}

func (fake *ClusterClient) GetResourceCalls(stub func(interface{}, string, string, clusterclient.PostVerifyrFunc, *clusterclient.PollOptions) error) {
	fake.getResourceMutex.Lock()
	defer fake.getResourceMutex.Unlock()
	fake.GetResourceStub = stub
}

func (fake *ClusterClient) GetResourceArgsForCall(i int) (interface{}, string, string, clusterclient.PostVerifyrFunc, *clusterclient.PollOptions) {
	fake.getResourceMutex.RLock()
	defer fake.getResourceMutex.RUnlock()
	argsForCall := fake.getResourceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *ClusterClient) GetResourceReturns(result1 error) {
	fake.getResourceMutex.Lock()
	defer fake.getResourceMutex.Unlock()
	fake.GetResourceStub = nil
	fake.getResourceReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) GetResourceReturnsOnCall(i int, result1 error) {
	fake.getResourceMutex.Lock()
	defer fake.getResourceMutex.Unlock()
	fake.GetResourceStub = nil
	if fake.getResourceReturnsOnCall == nil {
		fake.getResourceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.getResourceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) GetResourceList(arg1 interface{}, arg2 string, arg3 string, arg4 clusterclient.PostVerifyListrFunc, arg5 *clusterclient.PollOptions) error {
	fake.getResourceListMutex.Lock()
	ret, specificReturn := fake.getResourceListReturnsOnCall[len(fake.getResourceListArgsForCall)]
	fake.getResourceListArgsForCall = append(fake.getResourceListArgsForCall, struct {
		arg1 interface{}
		arg2 string
		arg3 string
		arg4 clusterclient.PostVerifyListrFunc
		arg5 *clusterclient.PollOptions
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.GetResourceListStub
	fakeReturns := fake.getResourceListReturns
	fake.recordInvocation("GetResourceList", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.getResourceListMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ClusterClient) GetResourceListCallCount() int {
	fake.getResourceListMutex.RLock()
	defer fake.getResourceListMutex.RUnlock()
	return len(fake.getResourceListArgsForCall)
}

func (fake *ClusterClient) GetResourceListCalls(stub func(interface{}, string, string, clusterclient.PostVerifyListrFunc, *clusterclient.PollOptions) error) {
	fake.getResourceListMutex.Lock()
	defer fake.getResourceListMutex.Unlock()
	fake.GetResourceListStub = stub
}

func (fake *ClusterClient) GetResourceListArgsForCall(i int) (interface{}, string, string, clusterclient.PostVerifyListrFunc, *clusterclient.PollOptions) {
	fake.getResourceListMutex.RLock()
	defer fake.getResourceListMutex.RUnlock()
	argsForCall := fake.getResourceListArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *ClusterClient) GetResourceListReturns(result1 error) {
	fake.getResourceListMutex.Lock()
	defer fake.getResourceListMutex.Unlock()
	fake.GetResourceListStub = nil
	fake.getResourceListReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) GetResourceListReturnsOnCall(i int, result1 error) {
	fake.getResourceListMutex.Lock()
	defer fake.getResourceListMutex.Unlock()
	fake.GetResourceListStub = nil
	if fake.getResourceListReturnsOnCall == nil {
		fake.getResourceListReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.getResourceListReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) GetSecretValue(arg1 string, arg2 string, arg3 string, arg4 *clusterclient.PollOptions) ([]byte, error) {
	fake.getSecretValueMutex.Lock()
	ret, specificReturn := fake.getSecretValueReturnsOnCall[len(fake.getSecretValueArgsForCall)]
	fake.getSecretValueArgsForCall = append(fake.getSecretValueArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 *clusterclient.PollOptions
	}{arg1, arg2, arg3, arg4})
	stub := fake.GetSecretValueStub
	fakeReturns := fake.getSecretValueReturns
	fake.recordInvocation("GetSecretValue", []interface{}{arg1, arg2, arg3, arg4})
	fake.getSecretValueMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ClusterClient) GetSecretValueCallCount() int {
	fake.getSecretValueMutex.RLock()
	defer fake.getSecretValueMutex.RUnlock()
	return len(fake.getSecretValueArgsForCall)
}

func (fake *ClusterClient) GetSecretValueCalls(stub func(string, string, string, *clusterclient.PollOptions) ([]byte, error)) {
	fake.getSecretValueMutex.Lock()
	defer fake.getSecretValueMutex.Unlock()
	fake.GetSecretValueStub = stub
}

func (fake *ClusterClient) GetSecretValueArgsForCall(i int) (string, string, string, *clusterclient.PollOptions) {
	fake.getSecretValueMutex.RLock()
	defer fake.getSecretValueMutex.RUnlock()
	argsForCall := fake.getSecretValueArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *ClusterClient) GetSecretValueReturns(result1 []byte, result2 error) {
	fake.getSecretValueMutex.Lock()
	defer fake.getSecretValueMutex.Unlock()
	fake.GetSecretValueStub = nil
	fake.getSecretValueReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetSecretValueReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.getSecretValueMutex.Lock()
	defer fake.getSecretValueMutex.Unlock()
	fake.GetSecretValueStub = nil
	if fake.getSecretValueReturnsOnCall == nil {
		fake.getSecretValueReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.getSecretValueReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetTanzuKubernetesReleases(arg1 string) ([]v1alpha1a.TanzuKubernetesRelease, error) {
	fake.getTanzuKubernetesReleasesMutex.Lock()
	ret, specificReturn := fake.getTanzuKubernetesReleasesReturnsOnCall[len(fake.getTanzuKubernetesReleasesArgsForCall)]
	fake.getTanzuKubernetesReleasesArgsForCall = append(fake.getTanzuKubernetesReleasesArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetTanzuKubernetesReleasesStub
	fakeReturns := fake.getTanzuKubernetesReleasesReturns
	fake.recordInvocation("GetTanzuKubernetesReleases", []interface{}{arg1})
	fake.getTanzuKubernetesReleasesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ClusterClient) GetTanzuKubernetesReleasesCallCount() int {
	fake.getTanzuKubernetesReleasesMutex.RLock()
	defer fake.getTanzuKubernetesReleasesMutex.RUnlock()
	return len(fake.getTanzuKubernetesReleasesArgsForCall)
}

func (fake *ClusterClient) GetTanzuKubernetesReleasesCalls(stub func(string) ([]v1alpha1a.TanzuKubernetesRelease, error)) {
	fake.getTanzuKubernetesReleasesMutex.Lock()
	defer fake.getTanzuKubernetesReleasesMutex.Unlock()
	fake.GetTanzuKubernetesReleasesStub = stub
}

func (fake *ClusterClient) GetTanzuKubernetesReleasesArgsForCall(i int) string {
	fake.getTanzuKubernetesReleasesMutex.RLock()
	defer fake.getTanzuKubernetesReleasesMutex.RUnlock()
	argsForCall := fake.getTanzuKubernetesReleasesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *ClusterClient) GetTanzuKubernetesReleasesReturns(result1 []v1alpha1a.TanzuKubernetesRelease, result2 error) {
	fake.getTanzuKubernetesReleasesMutex.Lock()
	defer fake.getTanzuKubernetesReleasesMutex.Unlock()
	fake.GetTanzuKubernetesReleasesStub = nil
	fake.getTanzuKubernetesReleasesReturns = struct {
		result1 []v1alpha1a.TanzuKubernetesRelease
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetTanzuKubernetesReleasesReturnsOnCall(i int, result1 []v1alpha1a.TanzuKubernetesRelease, result2 error) {
	fake.getTanzuKubernetesReleasesMutex.Lock()
	defer fake.getTanzuKubernetesReleasesMutex.Unlock()
	fake.GetTanzuKubernetesReleasesStub = nil
	if fake.getTanzuKubernetesReleasesReturnsOnCall == nil {
		fake.getTanzuKubernetesReleasesReturnsOnCall = make(map[int]struct {
			result1 []v1alpha1a.TanzuKubernetesRelease
			result2 error
		})
	}
	fake.getTanzuKubernetesReleasesReturnsOnCall[i] = struct {
		result1 []v1alpha1a.TanzuKubernetesRelease
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetVCClientAndDataCenter(arg1 string, arg2 string, arg3 string, arg4 vc.VcClientFactory) (vc.Client, string, error) {
	fake.getVCClientAndDataCenterMutex.Lock()
	ret, specificReturn := fake.getVCClientAndDataCenterReturnsOnCall[len(fake.getVCClientAndDataCenterArgsForCall)]
	fake.getVCClientAndDataCenterArgsForCall = append(fake.getVCClientAndDataCenterArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 vc.VcClientFactory
	}{arg1, arg2, arg3, arg4})
	stub := fake.GetVCClientAndDataCenterStub
	fakeReturns := fake.getVCClientAndDataCenterReturns
	fake.recordInvocation("GetVCClientAndDataCenter", []interface{}{arg1, arg2, arg3, arg4})
	fake.getVCClientAndDataCenterMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *ClusterClient) GetVCClientAndDataCenterCallCount() int {
	fake.getVCClientAndDataCenterMutex.RLock()
	defer fake.getVCClientAndDataCenterMutex.RUnlock()
	return len(fake.getVCClientAndDataCenterArgsForCall)
}

func (fake *ClusterClient) GetVCClientAndDataCenterCalls(stub func(string, string, string, vc.VcClientFactory) (vc.Client, string, error)) {
	fake.getVCClientAndDataCenterMutex.Lock()
	defer fake.getVCClientAndDataCenterMutex.Unlock()
	fake.GetVCClientAndDataCenterStub = stub
}

func (fake *ClusterClient) GetVCClientAndDataCenterArgsForCall(i int) (string, string, string, vc.VcClientFactory) {
	fake.getVCClientAndDataCenterMutex.RLock()
	defer fake.getVCClientAndDataCenterMutex.RUnlock()
	argsForCall := fake.getVCClientAndDataCenterArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *ClusterClient) GetVCClientAndDataCenterReturns(result1 vc.Client, result2 string, result3 error) {
	fake.getVCClientAndDataCenterMutex.Lock()
	defer fake.getVCClientAndDataCenterMutex.Unlock()
	fake.GetVCClientAndDataCenterStub = nil
	fake.getVCClientAndDataCenterReturns = struct {
		result1 vc.Client
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *ClusterClient) GetVCClientAndDataCenterReturnsOnCall(i int, result1 vc.Client, result2 string, result3 error) {
	fake.getVCClientAndDataCenterMutex.Lock()
	defer fake.getVCClientAndDataCenterMutex.Unlock()
	fake.GetVCClientAndDataCenterStub = nil
	if fake.getVCClientAndDataCenterReturnsOnCall == nil {
		fake.getVCClientAndDataCenterReturnsOnCall = make(map[int]struct {
			result1 vc.Client
			result2 string
			result3 error
		})
	}
	fake.getVCClientAndDataCenterReturnsOnCall[i] = struct {
		result1 vc.Client
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *ClusterClient) GetVCCredentialsFromCluster(arg1 string, arg2 string) (string, string, error) {
	fake.getVCCredentialsFromClusterMutex.Lock()
	ret, specificReturn := fake.getVCCredentialsFromClusterReturnsOnCall[len(fake.getVCCredentialsFromClusterArgsForCall)]
	fake.getVCCredentialsFromClusterArgsForCall = append(fake.getVCCredentialsFromClusterArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.GetVCCredentialsFromClusterStub
	fakeReturns := fake.getVCCredentialsFromClusterReturns
	fake.recordInvocation("GetVCCredentialsFromCluster", []interface{}{arg1, arg2})
	fake.getVCCredentialsFromClusterMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *ClusterClient) GetVCCredentialsFromClusterCallCount() int {
	fake.getVCCredentialsFromClusterMutex.RLock()
	defer fake.getVCCredentialsFromClusterMutex.RUnlock()
	return len(fake.getVCCredentialsFromClusterArgsForCall)
}

func (fake *ClusterClient) GetVCCredentialsFromClusterCalls(stub func(string, string) (string, string, error)) {
	fake.getVCCredentialsFromClusterMutex.Lock()
	defer fake.getVCCredentialsFromClusterMutex.Unlock()
	fake.GetVCCredentialsFromClusterStub = stub
}

func (fake *ClusterClient) GetVCCredentialsFromClusterArgsForCall(i int) (string, string) {
	fake.getVCCredentialsFromClusterMutex.RLock()
	defer fake.getVCCredentialsFromClusterMutex.RUnlock()
	argsForCall := fake.getVCCredentialsFromClusterArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ClusterClient) GetVCCredentialsFromClusterReturns(result1 string, result2 string, result3 error) {
	fake.getVCCredentialsFromClusterMutex.Lock()
	defer fake.getVCCredentialsFromClusterMutex.Unlock()
	fake.GetVCCredentialsFromClusterStub = nil
	fake.getVCCredentialsFromClusterReturns = struct {
		result1 string
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *ClusterClient) GetVCCredentialsFromClusterReturnsOnCall(i int, result1 string, result2 string, result3 error) {
	fake.getVCCredentialsFromClusterMutex.Lock()
	defer fake.getVCCredentialsFromClusterMutex.Unlock()
	fake.GetVCCredentialsFromClusterStub = nil
	if fake.getVCCredentialsFromClusterReturnsOnCall == nil {
		fake.getVCCredentialsFromClusterReturnsOnCall = make(map[int]struct {
			result1 string
			result2 string
			result3 error
		})
	}
	fake.getVCCredentialsFromClusterReturnsOnCall[i] = struct {
		result1 string
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *ClusterClient) GetVCCredentialsFromSecret(arg1 string) (string, string, error) {
	fake.getVCCredentialsFromSecretMutex.Lock()
	ret, specificReturn := fake.getVCCredentialsFromSecretReturnsOnCall[len(fake.getVCCredentialsFromSecretArgsForCall)]
	fake.getVCCredentialsFromSecretArgsForCall = append(fake.getVCCredentialsFromSecretArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetVCCredentialsFromSecretStub
	fakeReturns := fake.getVCCredentialsFromSecretReturns
	fake.recordInvocation("GetVCCredentialsFromSecret", []interface{}{arg1})
	fake.getVCCredentialsFromSecretMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *ClusterClient) GetVCCredentialsFromSecretCallCount() int {
	fake.getVCCredentialsFromSecretMutex.RLock()
	defer fake.getVCCredentialsFromSecretMutex.RUnlock()
	return len(fake.getVCCredentialsFromSecretArgsForCall)
}

func (fake *ClusterClient) GetVCCredentialsFromSecretCalls(stub func(string) (string, string, error)) {
	fake.getVCCredentialsFromSecretMutex.Lock()
	defer fake.getVCCredentialsFromSecretMutex.Unlock()
	fake.GetVCCredentialsFromSecretStub = stub
}

func (fake *ClusterClient) GetVCCredentialsFromSecretArgsForCall(i int) string {
	fake.getVCCredentialsFromSecretMutex.RLock()
	defer fake.getVCCredentialsFromSecretMutex.RUnlock()
	argsForCall := fake.getVCCredentialsFromSecretArgsForCall[i]
	return argsForCall.arg1
}

func (fake *ClusterClient) GetVCCredentialsFromSecretReturns(result1 string, result2 string, result3 error) {
	fake.getVCCredentialsFromSecretMutex.Lock()
	defer fake.getVCCredentialsFromSecretMutex.Unlock()
	fake.GetVCCredentialsFromSecretStub = nil
	fake.getVCCredentialsFromSecretReturns = struct {
		result1 string
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *ClusterClient) GetVCCredentialsFromSecretReturnsOnCall(i int, result1 string, result2 string, result3 error) {
	fake.getVCCredentialsFromSecretMutex.Lock()
	defer fake.getVCCredentialsFromSecretMutex.Unlock()
	fake.GetVCCredentialsFromSecretStub = nil
	if fake.getVCCredentialsFromSecretReturnsOnCall == nil {
		fake.getVCCredentialsFromSecretReturnsOnCall = make(map[int]struct {
			result1 string
			result2 string
			result3 error
		})
	}
	fake.getVCCredentialsFromSecretReturnsOnCall[i] = struct {
		result1 string
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *ClusterClient) GetVCServer() (string, error) {
	fake.getVCServerMutex.Lock()
	ret, specificReturn := fake.getVCServerReturnsOnCall[len(fake.getVCServerArgsForCall)]
	fake.getVCServerArgsForCall = append(fake.getVCServerArgsForCall, struct {
	}{})
	stub := fake.GetVCServerStub
	fakeReturns := fake.getVCServerReturns
	fake.recordInvocation("GetVCServer", []interface{}{})
	fake.getVCServerMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ClusterClient) GetVCServerCallCount() int {
	fake.getVCServerMutex.RLock()
	defer fake.getVCServerMutex.RUnlock()
	return len(fake.getVCServerArgsForCall)
}

func (fake *ClusterClient) GetVCServerCalls(stub func() (string, error)) {
	fake.getVCServerMutex.Lock()
	defer fake.getVCServerMutex.Unlock()
	fake.GetVCServerStub = stub
}

func (fake *ClusterClient) GetVCServerReturns(result1 string, result2 error) {
	fake.getVCServerMutex.Lock()
	defer fake.getVCServerMutex.Unlock()
	fake.GetVCServerStub = nil
	fake.getVCServerReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) GetVCServerReturnsOnCall(i int, result1 string, result2 error) {
	fake.getVCServerMutex.Lock()
	defer fake.getVCServerMutex.Unlock()
	fake.GetVCServerStub = nil
	if fake.getVCServerReturnsOnCall == nil {
		fake.getVCServerReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getVCServerReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) HasCEIPTelemetryJob(arg1 string) (bool, error) {
	fake.hasCEIPTelemetryJobMutex.Lock()
	ret, specificReturn := fake.hasCEIPTelemetryJobReturnsOnCall[len(fake.hasCEIPTelemetryJobArgsForCall)]
	fake.hasCEIPTelemetryJobArgsForCall = append(fake.hasCEIPTelemetryJobArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.HasCEIPTelemetryJobStub
	fakeReturns := fake.hasCEIPTelemetryJobReturns
	fake.recordInvocation("HasCEIPTelemetryJob", []interface{}{arg1})
	fake.hasCEIPTelemetryJobMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ClusterClient) HasCEIPTelemetryJobCallCount() int {
	fake.hasCEIPTelemetryJobMutex.RLock()
	defer fake.hasCEIPTelemetryJobMutex.RUnlock()
	return len(fake.hasCEIPTelemetryJobArgsForCall)
}

func (fake *ClusterClient) HasCEIPTelemetryJobCalls(stub func(string) (bool, error)) {
	fake.hasCEIPTelemetryJobMutex.Lock()
	defer fake.hasCEIPTelemetryJobMutex.Unlock()
	fake.HasCEIPTelemetryJobStub = stub
}

func (fake *ClusterClient) HasCEIPTelemetryJobArgsForCall(i int) string {
	fake.hasCEIPTelemetryJobMutex.RLock()
	defer fake.hasCEIPTelemetryJobMutex.RUnlock()
	argsForCall := fake.hasCEIPTelemetryJobArgsForCall[i]
	return argsForCall.arg1
}

func (fake *ClusterClient) HasCEIPTelemetryJobReturns(result1 bool, result2 error) {
	fake.hasCEIPTelemetryJobMutex.Lock()
	defer fake.hasCEIPTelemetryJobMutex.Unlock()
	fake.HasCEIPTelemetryJobStub = nil
	fake.hasCEIPTelemetryJobReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) HasCEIPTelemetryJobReturnsOnCall(i int, result1 bool, result2 error) {
	fake.hasCEIPTelemetryJobMutex.Lock()
	defer fake.hasCEIPTelemetryJobMutex.Unlock()
	fake.HasCEIPTelemetryJobStub = nil
	if fake.hasCEIPTelemetryJobReturnsOnCall == nil {
		fake.hasCEIPTelemetryJobReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.hasCEIPTelemetryJobReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) IsClusterClassBased(arg1 string, arg2 string) (bool, error) {
	fake.isClusterClassBasedMutex.Lock()
	ret, specificReturn := fake.isClusterClassBasedReturnsOnCall[len(fake.isClusterClassBasedArgsForCall)]
	fake.isClusterClassBasedArgsForCall = append(fake.isClusterClassBasedArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.IsClusterClassBasedStub
	fakeReturns := fake.isClusterClassBasedReturns
	fake.recordInvocation("IsClusterClassBased", []interface{}{arg1, arg2})
	fake.isClusterClassBasedMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ClusterClient) IsClusterClassBasedCallCount() int {
	fake.isClusterClassBasedMutex.RLock()
	defer fake.isClusterClassBasedMutex.RUnlock()
	return len(fake.isClusterClassBasedArgsForCall)
}

func (fake *ClusterClient) IsClusterClassBasedCalls(stub func(string, string) (bool, error)) {
	fake.isClusterClassBasedMutex.Lock()
	defer fake.isClusterClassBasedMutex.Unlock()
	fake.IsClusterClassBasedStub = stub
}

func (fake *ClusterClient) IsClusterClassBasedArgsForCall(i int) (string, string) {
	fake.isClusterClassBasedMutex.RLock()
	defer fake.isClusterClassBasedMutex.RUnlock()
	argsForCall := fake.isClusterClassBasedArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ClusterClient) IsClusterClassBasedReturns(result1 bool, result2 error) {
	fake.isClusterClassBasedMutex.Lock()
	defer fake.isClusterClassBasedMutex.Unlock()
	fake.IsClusterClassBasedStub = nil
	fake.isClusterClassBasedReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) IsClusterClassBasedReturnsOnCall(i int, result1 bool, result2 error) {
	fake.isClusterClassBasedMutex.Lock()
	defer fake.isClusterClassBasedMutex.Unlock()
	fake.IsClusterClassBasedStub = nil
	if fake.isClusterClassBasedReturnsOnCall == nil {
		fake.isClusterClassBasedReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.isClusterClassBasedReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) IsClusterRegisteredToTMC() (bool, error) {
	fake.isClusterRegisteredToTMCMutex.Lock()
	ret, specificReturn := fake.isClusterRegisteredToTMCReturnsOnCall[len(fake.isClusterRegisteredToTMCArgsForCall)]
	fake.isClusterRegisteredToTMCArgsForCall = append(fake.isClusterRegisteredToTMCArgsForCall, struct {
	}{})
	stub := fake.IsClusterRegisteredToTMCStub
	fakeReturns := fake.isClusterRegisteredToTMCReturns
	fake.recordInvocation("IsClusterRegisteredToTMC", []interface{}{})
	fake.isClusterRegisteredToTMCMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ClusterClient) IsClusterRegisteredToTMCCallCount() int {
	fake.isClusterRegisteredToTMCMutex.RLock()
	defer fake.isClusterRegisteredToTMCMutex.RUnlock()
	return len(fake.isClusterRegisteredToTMCArgsForCall)
}

func (fake *ClusterClient) IsClusterRegisteredToTMCCalls(stub func() (bool, error)) {
	fake.isClusterRegisteredToTMCMutex.Lock()
	defer fake.isClusterRegisteredToTMCMutex.Unlock()
	fake.IsClusterRegisteredToTMCStub = stub
}

func (fake *ClusterClient) IsClusterRegisteredToTMCReturns(result1 bool, result2 error) {
	fake.isClusterRegisteredToTMCMutex.Lock()
	defer fake.isClusterRegisteredToTMCMutex.Unlock()
	fake.IsClusterRegisteredToTMCStub = nil
	fake.isClusterRegisteredToTMCReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) IsClusterRegisteredToTMCReturnsOnCall(i int, result1 bool, result2 error) {
	fake.isClusterRegisteredToTMCMutex.Lock()
	defer fake.isClusterRegisteredToTMCMutex.Unlock()
	fake.IsClusterRegisteredToTMCStub = nil
	if fake.isClusterRegisteredToTMCReturnsOnCall == nil {
		fake.isClusterRegisteredToTMCReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.isClusterRegisteredToTMCReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) IsPacificRegionalCluster() (bool, error) {
	fake.isPacificRegionalClusterMutex.Lock()
	ret, specificReturn := fake.isPacificRegionalClusterReturnsOnCall[len(fake.isPacificRegionalClusterArgsForCall)]
	fake.isPacificRegionalClusterArgsForCall = append(fake.isPacificRegionalClusterArgsForCall, struct {
	}{})
	stub := fake.IsPacificRegionalClusterStub
	fakeReturns := fake.isPacificRegionalClusterReturns
	fake.recordInvocation("IsPacificRegionalCluster", []interface{}{})
	fake.isPacificRegionalClusterMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ClusterClient) IsPacificRegionalClusterCallCount() int {
	fake.isPacificRegionalClusterMutex.RLock()
	defer fake.isPacificRegionalClusterMutex.RUnlock()
	return len(fake.isPacificRegionalClusterArgsForCall)
}

func (fake *ClusterClient) IsPacificRegionalClusterCalls(stub func() (bool, error)) {
	fake.isPacificRegionalClusterMutex.Lock()
	defer fake.isPacificRegionalClusterMutex.Unlock()
	fake.IsPacificRegionalClusterStub = stub
}

func (fake *ClusterClient) IsPacificRegionalClusterReturns(result1 bool, result2 error) {
	fake.isPacificRegionalClusterMutex.Lock()
	defer fake.isPacificRegionalClusterMutex.Unlock()
	fake.IsPacificRegionalClusterStub = nil
	fake.isPacificRegionalClusterReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) IsPacificRegionalClusterReturnsOnCall(i int, result1 bool, result2 error) {
	fake.isPacificRegionalClusterMutex.Lock()
	defer fake.isPacificRegionalClusterMutex.Unlock()
	fake.IsPacificRegionalClusterStub = nil
	if fake.isPacificRegionalClusterReturnsOnCall == nil {
		fake.isPacificRegionalClusterReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.isPacificRegionalClusterReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) IsRegionalCluster() error {
	fake.isRegionalClusterMutex.Lock()
	ret, specificReturn := fake.isRegionalClusterReturnsOnCall[len(fake.isRegionalClusterArgsForCall)]
	fake.isRegionalClusterArgsForCall = append(fake.isRegionalClusterArgsForCall, struct {
	}{})
	stub := fake.IsRegionalClusterStub
	fakeReturns := fake.isRegionalClusterReturns
	fake.recordInvocation("IsRegionalCluster", []interface{}{})
	fake.isRegionalClusterMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ClusterClient) IsRegionalClusterCallCount() int {
	fake.isRegionalClusterMutex.RLock()
	defer fake.isRegionalClusterMutex.RUnlock()
	return len(fake.isRegionalClusterArgsForCall)
}

func (fake *ClusterClient) IsRegionalClusterCalls(stub func() error) {
	fake.isRegionalClusterMutex.Lock()
	defer fake.isRegionalClusterMutex.Unlock()
	fake.IsRegionalClusterStub = stub
}

func (fake *ClusterClient) IsRegionalClusterReturns(result1 error) {
	fake.isRegionalClusterMutex.Lock()
	defer fake.isRegionalClusterMutex.Unlock()
	fake.IsRegionalClusterStub = nil
	fake.isRegionalClusterReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) IsRegionalClusterReturnsOnCall(i int, result1 error) {
	fake.isRegionalClusterMutex.Lock()
	defer fake.isRegionalClusterMutex.Unlock()
	fake.IsRegionalClusterStub = nil
	if fake.isRegionalClusterReturnsOnCall == nil {
		fake.isRegionalClusterReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.isRegionalClusterReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) ListCLIPluginResources() ([]v1alpha1b.CLIPlugin, error) {
	fake.listCLIPluginResourcesMutex.Lock()
	ret, specificReturn := fake.listCLIPluginResourcesReturnsOnCall[len(fake.listCLIPluginResourcesArgsForCall)]
	fake.listCLIPluginResourcesArgsForCall = append(fake.listCLIPluginResourcesArgsForCall, struct {
	}{})
	stub := fake.ListCLIPluginResourcesStub
	fakeReturns := fake.listCLIPluginResourcesReturns
	fake.recordInvocation("ListCLIPluginResources", []interface{}{})
	fake.listCLIPluginResourcesMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ClusterClient) ListCLIPluginResourcesCallCount() int {
	fake.listCLIPluginResourcesMutex.RLock()
	defer fake.listCLIPluginResourcesMutex.RUnlock()
	return len(fake.listCLIPluginResourcesArgsForCall)
}

func (fake *ClusterClient) ListCLIPluginResourcesCalls(stub func() ([]v1alpha1b.CLIPlugin, error)) {
	fake.listCLIPluginResourcesMutex.Lock()
	defer fake.listCLIPluginResourcesMutex.Unlock()
	fake.ListCLIPluginResourcesStub = stub
}

func (fake *ClusterClient) ListCLIPluginResourcesReturns(result1 []v1alpha1b.CLIPlugin, result2 error) {
	fake.listCLIPluginResourcesMutex.Lock()
	defer fake.listCLIPluginResourcesMutex.Unlock()
	fake.ListCLIPluginResourcesStub = nil
	fake.listCLIPluginResourcesReturns = struct {
		result1 []v1alpha1b.CLIPlugin
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) ListCLIPluginResourcesReturnsOnCall(i int, result1 []v1alpha1b.CLIPlugin, result2 error) {
	fake.listCLIPluginResourcesMutex.Lock()
	defer fake.listCLIPluginResourcesMutex.Unlock()
	fake.ListCLIPluginResourcesStub = nil
	if fake.listCLIPluginResourcesReturnsOnCall == nil {
		fake.listCLIPluginResourcesReturnsOnCall = make(map[int]struct {
			result1 []v1alpha1b.CLIPlugin
			result2 error
		})
	}
	fake.listCLIPluginResourcesReturnsOnCall[i] = struct {
		result1 []v1alpha1b.CLIPlugin
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) ListClusters(arg1 string) ([]v1beta1a.Cluster, error) {
	fake.listClustersMutex.Lock()
	ret, specificReturn := fake.listClustersReturnsOnCall[len(fake.listClustersArgsForCall)]
	fake.listClustersArgsForCall = append(fake.listClustersArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ListClustersStub
	fakeReturns := fake.listClustersReturns
	fake.recordInvocation("ListClusters", []interface{}{arg1})
	fake.listClustersMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ClusterClient) ListClustersCallCount() int {
	fake.listClustersMutex.RLock()
	defer fake.listClustersMutex.RUnlock()
	return len(fake.listClustersArgsForCall)
}

func (fake *ClusterClient) ListClustersCalls(stub func(string) ([]v1beta1a.Cluster, error)) {
	fake.listClustersMutex.Lock()
	defer fake.listClustersMutex.Unlock()
	fake.ListClustersStub = stub
}

func (fake *ClusterClient) ListClustersArgsForCall(i int) string {
	fake.listClustersMutex.RLock()
	defer fake.listClustersMutex.RUnlock()
	argsForCall := fake.listClustersArgsForCall[i]
	return argsForCall.arg1
}

func (fake *ClusterClient) ListClustersReturns(result1 []v1beta1a.Cluster, result2 error) {
	fake.listClustersMutex.Lock()
	defer fake.listClustersMutex.Unlock()
	fake.ListClustersStub = nil
	fake.listClustersReturns = struct {
		result1 []v1beta1a.Cluster
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) ListClustersReturnsOnCall(i int, result1 []v1beta1a.Cluster, result2 error) {
	fake.listClustersMutex.Lock()
	defer fake.listClustersMutex.Unlock()
	fake.ListClustersStub = nil
	if fake.listClustersReturnsOnCall == nil {
		fake.listClustersReturnsOnCall = make(map[int]struct {
			result1 []v1beta1a.Cluster
			result2 error
		})
	}
	fake.listClustersReturnsOnCall[i] = struct {
		result1 []v1beta1a.Cluster
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) ListPacificClusterObjects(arg1 string, arg2 *client.ListOptions) ([]interface{}, error) {
	fake.listPacificClusterObjectsMutex.Lock()
	ret, specificReturn := fake.listPacificClusterObjectsReturnsOnCall[len(fake.listPacificClusterObjectsArgsForCall)]
	fake.listPacificClusterObjectsArgsForCall = append(fake.listPacificClusterObjectsArgsForCall, struct {
		arg1 string
		arg2 *client.ListOptions
	}{arg1, arg2})
	stub := fake.ListPacificClusterObjectsStub
	fakeReturns := fake.listPacificClusterObjectsReturns
	fake.recordInvocation("ListPacificClusterObjects", []interface{}{arg1, arg2})
	fake.listPacificClusterObjectsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ClusterClient) ListPacificClusterObjectsCallCount() int {
	fake.listPacificClusterObjectsMutex.RLock()
	defer fake.listPacificClusterObjectsMutex.RUnlock()
	return len(fake.listPacificClusterObjectsArgsForCall)
}

func (fake *ClusterClient) ListPacificClusterObjectsCalls(stub func(string, *client.ListOptions) ([]interface{}, error)) {
	fake.listPacificClusterObjectsMutex.Lock()
	defer fake.listPacificClusterObjectsMutex.Unlock()
	fake.ListPacificClusterObjectsStub = stub
}

func (fake *ClusterClient) ListPacificClusterObjectsArgsForCall(i int) (string, *client.ListOptions) {
	fake.listPacificClusterObjectsMutex.RLock()
	defer fake.listPacificClusterObjectsMutex.RUnlock()
	argsForCall := fake.listPacificClusterObjectsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ClusterClient) ListPacificClusterObjectsReturns(result1 []interface{}, result2 error) {
	fake.listPacificClusterObjectsMutex.Lock()
	defer fake.listPacificClusterObjectsMutex.Unlock()
	fake.ListPacificClusterObjectsStub = nil
	fake.listPacificClusterObjectsReturns = struct {
		result1 []interface{}
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) ListPacificClusterObjectsReturnsOnCall(i int, result1 []interface{}, result2 error) {
	fake.listPacificClusterObjectsMutex.Lock()
	defer fake.listPacificClusterObjectsMutex.Unlock()
	fake.ListPacificClusterObjectsStub = nil
	if fake.listPacificClusterObjectsReturnsOnCall == nil {
		fake.listPacificClusterObjectsReturnsOnCall = make(map[int]struct {
			result1 []interface{}
			result2 error
		})
	}
	fake.listPacificClusterObjectsReturnsOnCall[i] = struct {
		result1 []interface{}
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) ListResources(arg1 interface{}, arg2 ...client.ListOption) error {
	fake.listResourcesMutex.Lock()
	ret, specificReturn := fake.listResourcesReturnsOnCall[len(fake.listResourcesArgsForCall)]
	fake.listResourcesArgsForCall = append(fake.listResourcesArgsForCall, struct {
		arg1 interface{}
		arg2 []client.ListOption
	}{arg1, arg2})
	stub := fake.ListResourcesStub
	fakeReturns := fake.listResourcesReturns
	fake.recordInvocation("ListResources", []interface{}{arg1, arg2})
	fake.listResourcesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ClusterClient) ListResourcesCallCount() int {
	fake.listResourcesMutex.RLock()
	defer fake.listResourcesMutex.RUnlock()
	return len(fake.listResourcesArgsForCall)
}

func (fake *ClusterClient) ListResourcesCalls(stub func(interface{}, ...client.ListOption) error) {
	fake.listResourcesMutex.Lock()
	defer fake.listResourcesMutex.Unlock()
	fake.ListResourcesStub = stub
}

func (fake *ClusterClient) ListResourcesArgsForCall(i int) (interface{}, []client.ListOption) {
	fake.listResourcesMutex.RLock()
	defer fake.listResourcesMutex.RUnlock()
	argsForCall := fake.listResourcesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ClusterClient) ListResourcesReturns(result1 error) {
	fake.listResourcesMutex.Lock()
	defer fake.listResourcesMutex.Unlock()
	fake.ListResourcesStub = nil
	fake.listResourcesReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) ListResourcesReturnsOnCall(i int, result1 error) {
	fake.listResourcesMutex.Lock()
	defer fake.listResourcesMutex.Unlock()
	fake.ListResourcesStub = nil
	if fake.listResourcesReturnsOnCall == nil {
		fake.listResourcesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listResourcesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) LoadCurrentKubeconfigBytes() ([]byte, error) {
	fake.loadCurrentKubeconfigBytesMutex.Lock()
	ret, specificReturn := fake.loadCurrentKubeconfigBytesReturnsOnCall[len(fake.loadCurrentKubeconfigBytesArgsForCall)]
	fake.loadCurrentKubeconfigBytesArgsForCall = append(fake.loadCurrentKubeconfigBytesArgsForCall, struct {
	}{})
	stub := fake.LoadCurrentKubeconfigBytesStub
	fakeReturns := fake.loadCurrentKubeconfigBytesReturns
	fake.recordInvocation("LoadCurrentKubeconfigBytes", []interface{}{})
	fake.loadCurrentKubeconfigBytesMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ClusterClient) LoadCurrentKubeconfigBytesCallCount() int {
	fake.loadCurrentKubeconfigBytesMutex.RLock()
	defer fake.loadCurrentKubeconfigBytesMutex.RUnlock()
	return len(fake.loadCurrentKubeconfigBytesArgsForCall)
}

func (fake *ClusterClient) LoadCurrentKubeconfigBytesCalls(stub func() ([]byte, error)) {
	fake.loadCurrentKubeconfigBytesMutex.Lock()
	defer fake.loadCurrentKubeconfigBytesMutex.Unlock()
	fake.LoadCurrentKubeconfigBytesStub = stub
}

func (fake *ClusterClient) LoadCurrentKubeconfigBytesReturns(result1 []byte, result2 error) {
	fake.loadCurrentKubeconfigBytesMutex.Lock()
	defer fake.loadCurrentKubeconfigBytesMutex.Unlock()
	fake.LoadCurrentKubeconfigBytesStub = nil
	fake.loadCurrentKubeconfigBytesReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) LoadCurrentKubeconfigBytesReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.loadCurrentKubeconfigBytesMutex.Lock()
	defer fake.loadCurrentKubeconfigBytesMutex.Unlock()
	fake.LoadCurrentKubeconfigBytesStub = nil
	if fake.loadCurrentKubeconfigBytesReturnsOnCall == nil {
		fake.loadCurrentKubeconfigBytesReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.loadCurrentKubeconfigBytesReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) MergeAndUseConfigForCluster(arg1 []byte, arg2 string) (string, string, error) {
	var arg1Copy []byte
	if arg1 != nil {
		arg1Copy = make([]byte, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.mergeAndUseConfigForClusterMutex.Lock()
	ret, specificReturn := fake.mergeAndUseConfigForClusterReturnsOnCall[len(fake.mergeAndUseConfigForClusterArgsForCall)]
	fake.mergeAndUseConfigForClusterArgsForCall = append(fake.mergeAndUseConfigForClusterArgsForCall, struct {
		arg1 []byte
		arg2 string
	}{arg1Copy, arg2})
	stub := fake.MergeAndUseConfigForClusterStub
	fakeReturns := fake.mergeAndUseConfigForClusterReturns
	fake.recordInvocation("MergeAndUseConfigForCluster", []interface{}{arg1Copy, arg2})
	fake.mergeAndUseConfigForClusterMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *ClusterClient) MergeAndUseConfigForClusterCallCount() int {
	fake.mergeAndUseConfigForClusterMutex.RLock()
	defer fake.mergeAndUseConfigForClusterMutex.RUnlock()
	return len(fake.mergeAndUseConfigForClusterArgsForCall)
}

func (fake *ClusterClient) MergeAndUseConfigForClusterCalls(stub func([]byte, string) (string, string, error)) {
	fake.mergeAndUseConfigForClusterMutex.Lock()
	defer fake.mergeAndUseConfigForClusterMutex.Unlock()
	fake.MergeAndUseConfigForClusterStub = stub
}

func (fake *ClusterClient) MergeAndUseConfigForClusterArgsForCall(i int) ([]byte, string) {
	fake.mergeAndUseConfigForClusterMutex.RLock()
	defer fake.mergeAndUseConfigForClusterMutex.RUnlock()
	argsForCall := fake.mergeAndUseConfigForClusterArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ClusterClient) MergeAndUseConfigForClusterReturns(result1 string, result2 string, result3 error) {
	fake.mergeAndUseConfigForClusterMutex.Lock()
	defer fake.mergeAndUseConfigForClusterMutex.Unlock()
	fake.MergeAndUseConfigForClusterStub = nil
	fake.mergeAndUseConfigForClusterReturns = struct {
		result1 string
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *ClusterClient) MergeAndUseConfigForClusterReturnsOnCall(i int, result1 string, result2 string, result3 error) {
	fake.mergeAndUseConfigForClusterMutex.Lock()
	defer fake.mergeAndUseConfigForClusterMutex.Unlock()
	fake.MergeAndUseConfigForClusterStub = nil
	if fake.mergeAndUseConfigForClusterReturnsOnCall == nil {
		fake.mergeAndUseConfigForClusterReturnsOnCall = make(map[int]struct {
			result1 string
			result2 string
			result3 error
		})
	}
	fake.mergeAndUseConfigForClusterReturnsOnCall[i] = struct {
		result1 string
		result2 string
		result3 error
	}{result1, result2, result3}
}

func (fake *ClusterClient) MergeConfigForCluster(arg1 []byte, arg2 string) error {
	var arg1Copy []byte
	if arg1 != nil {
		arg1Copy = make([]byte, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.mergeConfigForClusterMutex.Lock()
	ret, specificReturn := fake.mergeConfigForClusterReturnsOnCall[len(fake.mergeConfigForClusterArgsForCall)]
	fake.mergeConfigForClusterArgsForCall = append(fake.mergeConfigForClusterArgsForCall, struct {
		arg1 []byte
		arg2 string
	}{arg1Copy, arg2})
	stub := fake.MergeConfigForClusterStub
	fakeReturns := fake.mergeConfigForClusterReturns
	fake.recordInvocation("MergeConfigForCluster", []interface{}{arg1Copy, arg2})
	fake.mergeConfigForClusterMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ClusterClient) MergeConfigForClusterCallCount() int {
	fake.mergeConfigForClusterMutex.RLock()
	defer fake.mergeConfigForClusterMutex.RUnlock()
	return len(fake.mergeConfigForClusterArgsForCall)
}

func (fake *ClusterClient) MergeConfigForClusterCalls(stub func([]byte, string) error) {
	fake.mergeConfigForClusterMutex.Lock()
	defer fake.mergeConfigForClusterMutex.Unlock()
	fake.MergeConfigForClusterStub = stub
}

func (fake *ClusterClient) MergeConfigForClusterArgsForCall(i int) ([]byte, string) {
	fake.mergeConfigForClusterMutex.RLock()
	defer fake.mergeConfigForClusterMutex.RUnlock()
	argsForCall := fake.mergeConfigForClusterArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ClusterClient) MergeConfigForClusterReturns(result1 error) {
	fake.mergeConfigForClusterMutex.Lock()
	defer fake.mergeConfigForClusterMutex.Unlock()
	fake.MergeConfigForClusterStub = nil
	fake.mergeConfigForClusterReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) MergeConfigForClusterReturnsOnCall(i int, result1 error) {
	fake.mergeConfigForClusterMutex.Lock()
	defer fake.mergeConfigForClusterMutex.Unlock()
	fake.MergeConfigForClusterStub = nil
	if fake.mergeConfigForClusterReturnsOnCall == nil {
		fake.mergeConfigForClusterReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.mergeConfigForClusterReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) PatchCalicoKubeControllerDeploymentWithNewNodeSelector(arg1 string, arg2 string) error {
	fake.patchCalicoKubeControllerDeploymentWithNewNodeSelectorMutex.Lock()
	ret, specificReturn := fake.patchCalicoKubeControllerDeploymentWithNewNodeSelectorReturnsOnCall[len(fake.patchCalicoKubeControllerDeploymentWithNewNodeSelectorArgsForCall)]
	fake.patchCalicoKubeControllerDeploymentWithNewNodeSelectorArgsForCall = append(fake.patchCalicoKubeControllerDeploymentWithNewNodeSelectorArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.PatchCalicoKubeControllerDeploymentWithNewNodeSelectorStub
	fakeReturns := fake.patchCalicoKubeControllerDeploymentWithNewNodeSelectorReturns
	fake.recordInvocation("PatchCalicoKubeControllerDeploymentWithNewNodeSelector", []interface{}{arg1, arg2})
	fake.patchCalicoKubeControllerDeploymentWithNewNodeSelectorMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ClusterClient) PatchCalicoKubeControllerDeploymentWithNewNodeSelectorCallCount() int {
	fake.patchCalicoKubeControllerDeploymentWithNewNodeSelectorMutex.RLock()
	defer fake.patchCalicoKubeControllerDeploymentWithNewNodeSelectorMutex.RUnlock()
	return len(fake.patchCalicoKubeControllerDeploymentWithNewNodeSelectorArgsForCall)
}

func (fake *ClusterClient) PatchCalicoKubeControllerDeploymentWithNewNodeSelectorCalls(stub func(string, string) error) {
	fake.patchCalicoKubeControllerDeploymentWithNewNodeSelectorMutex.Lock()
	defer fake.patchCalicoKubeControllerDeploymentWithNewNodeSelectorMutex.Unlock()
	fake.PatchCalicoKubeControllerDeploymentWithNewNodeSelectorStub = stub
}

func (fake *ClusterClient) PatchCalicoKubeControllerDeploymentWithNewNodeSelectorArgsForCall(i int) (string, string) {
	fake.patchCalicoKubeControllerDeploymentWithNewNodeSelectorMutex.RLock()
	defer fake.patchCalicoKubeControllerDeploymentWithNewNodeSelectorMutex.RUnlock()
	argsForCall := fake.patchCalicoKubeControllerDeploymentWithNewNodeSelectorArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ClusterClient) PatchCalicoKubeControllerDeploymentWithNewNodeSelectorReturns(result1 error) {
	fake.patchCalicoKubeControllerDeploymentWithNewNodeSelectorMutex.Lock()
	defer fake.patchCalicoKubeControllerDeploymentWithNewNodeSelectorMutex.Unlock()
	fake.PatchCalicoKubeControllerDeploymentWithNewNodeSelectorStub = nil
	fake.patchCalicoKubeControllerDeploymentWithNewNodeSelectorReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) PatchCalicoKubeControllerDeploymentWithNewNodeSelectorReturnsOnCall(i int, result1 error) {
	fake.patchCalicoKubeControllerDeploymentWithNewNodeSelectorMutex.Lock()
	defer fake.patchCalicoKubeControllerDeploymentWithNewNodeSelectorMutex.Unlock()
	fake.PatchCalicoKubeControllerDeploymentWithNewNodeSelectorStub = nil
	if fake.patchCalicoKubeControllerDeploymentWithNewNodeSelectorReturnsOnCall == nil {
		fake.patchCalicoKubeControllerDeploymentWithNewNodeSelectorReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.patchCalicoKubeControllerDeploymentWithNewNodeSelectorReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) PatchCalicoNodeDaemonSetWithNewNodeSelector(arg1 string, arg2 string) error {
	fake.patchCalicoNodeDaemonSetWithNewNodeSelectorMutex.Lock()
	ret, specificReturn := fake.patchCalicoNodeDaemonSetWithNewNodeSelectorReturnsOnCall[len(fake.patchCalicoNodeDaemonSetWithNewNodeSelectorArgsForCall)]
	fake.patchCalicoNodeDaemonSetWithNewNodeSelectorArgsForCall = append(fake.patchCalicoNodeDaemonSetWithNewNodeSelectorArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.PatchCalicoNodeDaemonSetWithNewNodeSelectorStub
	fakeReturns := fake.patchCalicoNodeDaemonSetWithNewNodeSelectorReturns
	fake.recordInvocation("PatchCalicoNodeDaemonSetWithNewNodeSelector", []interface{}{arg1, arg2})
	fake.patchCalicoNodeDaemonSetWithNewNodeSelectorMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ClusterClient) PatchCalicoNodeDaemonSetWithNewNodeSelectorCallCount() int {
	fake.patchCalicoNodeDaemonSetWithNewNodeSelectorMutex.RLock()
	defer fake.patchCalicoNodeDaemonSetWithNewNodeSelectorMutex.RUnlock()
	return len(fake.patchCalicoNodeDaemonSetWithNewNodeSelectorArgsForCall)
}

func (fake *ClusterClient) PatchCalicoNodeDaemonSetWithNewNodeSelectorCalls(stub func(string, string) error) {
	fake.patchCalicoNodeDaemonSetWithNewNodeSelectorMutex.Lock()
	defer fake.patchCalicoNodeDaemonSetWithNewNodeSelectorMutex.Unlock()
	fake.PatchCalicoNodeDaemonSetWithNewNodeSelectorStub = stub
}

func (fake *ClusterClient) PatchCalicoNodeDaemonSetWithNewNodeSelectorArgsForCall(i int) (string, string) {
	fake.patchCalicoNodeDaemonSetWithNewNodeSelectorMutex.RLock()
	defer fake.patchCalicoNodeDaemonSetWithNewNodeSelectorMutex.RUnlock()
	argsForCall := fake.patchCalicoNodeDaemonSetWithNewNodeSelectorArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ClusterClient) PatchCalicoNodeDaemonSetWithNewNodeSelectorReturns(result1 error) {
	fake.patchCalicoNodeDaemonSetWithNewNodeSelectorMutex.Lock()
	defer fake.patchCalicoNodeDaemonSetWithNewNodeSelectorMutex.Unlock()
	fake.PatchCalicoNodeDaemonSetWithNewNodeSelectorStub = nil
	fake.patchCalicoNodeDaemonSetWithNewNodeSelectorReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) PatchCalicoNodeDaemonSetWithNewNodeSelectorReturnsOnCall(i int, result1 error) {
	fake.patchCalicoNodeDaemonSetWithNewNodeSelectorMutex.Lock()
	defer fake.patchCalicoNodeDaemonSetWithNewNodeSelectorMutex.Unlock()
	fake.PatchCalicoNodeDaemonSetWithNewNodeSelectorStub = nil
	if fake.patchCalicoNodeDaemonSetWithNewNodeSelectorReturnsOnCall == nil {
		fake.patchCalicoNodeDaemonSetWithNewNodeSelectorReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.patchCalicoNodeDaemonSetWithNewNodeSelectorReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) PatchClusterAPIAWSControllersToUseEC2Credentials() error {
	fake.patchClusterAPIAWSControllersToUseEC2CredentialsMutex.Lock()
	ret, specificReturn := fake.patchClusterAPIAWSControllersToUseEC2CredentialsReturnsOnCall[len(fake.patchClusterAPIAWSControllersToUseEC2CredentialsArgsForCall)]
	fake.patchClusterAPIAWSControllersToUseEC2CredentialsArgsForCall = append(fake.patchClusterAPIAWSControllersToUseEC2CredentialsArgsForCall, struct {
	}{})
	stub := fake.PatchClusterAPIAWSControllersToUseEC2CredentialsStub
	fakeReturns := fake.patchClusterAPIAWSControllersToUseEC2CredentialsReturns
	fake.recordInvocation("PatchClusterAPIAWSControllersToUseEC2Credentials", []interface{}{})
	fake.patchClusterAPIAWSControllersToUseEC2CredentialsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ClusterClient) PatchClusterAPIAWSControllersToUseEC2CredentialsCallCount() int {
	fake.patchClusterAPIAWSControllersToUseEC2CredentialsMutex.RLock()
	defer fake.patchClusterAPIAWSControllersToUseEC2CredentialsMutex.RUnlock()
	return len(fake.patchClusterAPIAWSControllersToUseEC2CredentialsArgsForCall)
}

func (fake *ClusterClient) PatchClusterAPIAWSControllersToUseEC2CredentialsCalls(stub func() error) {
	fake.patchClusterAPIAWSControllersToUseEC2CredentialsMutex.Lock()
	defer fake.patchClusterAPIAWSControllersToUseEC2CredentialsMutex.Unlock()
	fake.PatchClusterAPIAWSControllersToUseEC2CredentialsStub = stub
}

func (fake *ClusterClient) PatchClusterAPIAWSControllersToUseEC2CredentialsReturns(result1 error) {
	fake.patchClusterAPIAWSControllersToUseEC2CredentialsMutex.Lock()
	defer fake.patchClusterAPIAWSControllersToUseEC2CredentialsMutex.Unlock()
	fake.PatchClusterAPIAWSControllersToUseEC2CredentialsStub = nil
	fake.patchClusterAPIAWSControllersToUseEC2CredentialsReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) PatchClusterAPIAWSControllersToUseEC2CredentialsReturnsOnCall(i int, result1 error) {
	fake.patchClusterAPIAWSControllersToUseEC2CredentialsMutex.Lock()
	defer fake.patchClusterAPIAWSControllersToUseEC2CredentialsMutex.Unlock()
	fake.PatchClusterAPIAWSControllersToUseEC2CredentialsStub = nil
	if fake.patchClusterAPIAWSControllersToUseEC2CredentialsReturnsOnCall == nil {
		fake.patchClusterAPIAWSControllersToUseEC2CredentialsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.patchClusterAPIAWSControllersToUseEC2CredentialsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) PatchClusterObject(arg1 string, arg2 string, arg3 string) error {
	fake.patchClusterObjectMutex.Lock()
	ret, specificReturn := fake.patchClusterObjectReturnsOnCall[len(fake.patchClusterObjectArgsForCall)]
	fake.patchClusterObjectArgsForCall = append(fake.patchClusterObjectArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.PatchClusterObjectStub
	fakeReturns := fake.patchClusterObjectReturns
	fake.recordInvocation("PatchClusterObject", []interface{}{arg1, arg2, arg3})
	fake.patchClusterObjectMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ClusterClient) PatchClusterObjectCallCount() int {
	fake.patchClusterObjectMutex.RLock()
	defer fake.patchClusterObjectMutex.RUnlock()
	return len(fake.patchClusterObjectArgsForCall)
}

func (fake *ClusterClient) PatchClusterObjectCalls(stub func(string, string, string) error) {
	fake.patchClusterObjectMutex.Lock()
	defer fake.patchClusterObjectMutex.Unlock()
	fake.PatchClusterObjectStub = stub
}

func (fake *ClusterClient) PatchClusterObjectArgsForCall(i int) (string, string, string) {
	fake.patchClusterObjectMutex.RLock()
	defer fake.patchClusterObjectMutex.RUnlock()
	argsForCall := fake.patchClusterObjectArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *ClusterClient) PatchClusterObjectReturns(result1 error) {
	fake.patchClusterObjectMutex.Lock()
	defer fake.patchClusterObjectMutex.Unlock()
	fake.PatchClusterObjectStub = nil
	fake.patchClusterObjectReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) PatchClusterObjectReturnsOnCall(i int, result1 error) {
	fake.patchClusterObjectMutex.Lock()
	defer fake.patchClusterObjectMutex.Unlock()
	fake.PatchClusterObjectStub = nil
	if fake.patchClusterObjectReturnsOnCall == nil {
		fake.patchClusterObjectReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.patchClusterObjectReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) PatchClusterObjectAnnotations(arg1 string, arg2 string, arg3 string, arg4 string) error {
	fake.patchClusterObjectAnnotationsMutex.Lock()
	ret, specificReturn := fake.patchClusterObjectAnnotationsReturnsOnCall[len(fake.patchClusterObjectAnnotationsArgsForCall)]
	fake.patchClusterObjectAnnotationsArgsForCall = append(fake.patchClusterObjectAnnotationsArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.PatchClusterObjectAnnotationsStub
	fakeReturns := fake.patchClusterObjectAnnotationsReturns
	fake.recordInvocation("PatchClusterObjectAnnotations", []interface{}{arg1, arg2, arg3, arg4})
	fake.patchClusterObjectAnnotationsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ClusterClient) PatchClusterObjectAnnotationsCallCount() int {
	fake.patchClusterObjectAnnotationsMutex.RLock()
	defer fake.patchClusterObjectAnnotationsMutex.RUnlock()
	return len(fake.patchClusterObjectAnnotationsArgsForCall)
}

func (fake *ClusterClient) PatchClusterObjectAnnotationsCalls(stub func(string, string, string, string) error) {
	fake.patchClusterObjectAnnotationsMutex.Lock()
	defer fake.patchClusterObjectAnnotationsMutex.Unlock()
	fake.PatchClusterObjectAnnotationsStub = stub
}

func (fake *ClusterClient) PatchClusterObjectAnnotationsArgsForCall(i int) (string, string, string, string) {
	fake.patchClusterObjectAnnotationsMutex.RLock()
	defer fake.patchClusterObjectAnnotationsMutex.RUnlock()
	argsForCall := fake.patchClusterObjectAnnotationsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *ClusterClient) PatchClusterObjectAnnotationsReturns(result1 error) {
	fake.patchClusterObjectAnnotationsMutex.Lock()
	defer fake.patchClusterObjectAnnotationsMutex.Unlock()
	fake.PatchClusterObjectAnnotationsStub = nil
	fake.patchClusterObjectAnnotationsReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) PatchClusterObjectAnnotationsReturnsOnCall(i int, result1 error) {
	fake.patchClusterObjectAnnotationsMutex.Lock()
	defer fake.patchClusterObjectAnnotationsMutex.Unlock()
	fake.PatchClusterObjectAnnotationsStub = nil
	if fake.patchClusterObjectAnnotationsReturnsOnCall == nil {
		fake.patchClusterObjectAnnotationsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.patchClusterObjectAnnotationsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) PatchClusterObjectWithOptionalMetadata(arg1 string, arg2 string, arg3 string, arg4 map[string]string) (string, error) {
	fake.patchClusterObjectWithOptionalMetadataMutex.Lock()
	ret, specificReturn := fake.patchClusterObjectWithOptionalMetadataReturnsOnCall[len(fake.patchClusterObjectWithOptionalMetadataArgsForCall)]
	fake.patchClusterObjectWithOptionalMetadataArgsForCall = append(fake.patchClusterObjectWithOptionalMetadataArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 map[string]string
	}{arg1, arg2, arg3, arg4})
	stub := fake.PatchClusterObjectWithOptionalMetadataStub
	fakeReturns := fake.patchClusterObjectWithOptionalMetadataReturns
	fake.recordInvocation("PatchClusterObjectWithOptionalMetadata", []interface{}{arg1, arg2, arg3, arg4})
	fake.patchClusterObjectWithOptionalMetadataMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ClusterClient) PatchClusterObjectWithOptionalMetadataCallCount() int {
	fake.patchClusterObjectWithOptionalMetadataMutex.RLock()
	defer fake.patchClusterObjectWithOptionalMetadataMutex.RUnlock()
	return len(fake.patchClusterObjectWithOptionalMetadataArgsForCall)
}

func (fake *ClusterClient) PatchClusterObjectWithOptionalMetadataCalls(stub func(string, string, string, map[string]string) (string, error)) {
	fake.patchClusterObjectWithOptionalMetadataMutex.Lock()
	defer fake.patchClusterObjectWithOptionalMetadataMutex.Unlock()
	fake.PatchClusterObjectWithOptionalMetadataStub = stub
}

func (fake *ClusterClient) PatchClusterObjectWithOptionalMetadataArgsForCall(i int) (string, string, string, map[string]string) {
	fake.patchClusterObjectWithOptionalMetadataMutex.RLock()
	defer fake.patchClusterObjectWithOptionalMetadataMutex.RUnlock()
	argsForCall := fake.patchClusterObjectWithOptionalMetadataArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *ClusterClient) PatchClusterObjectWithOptionalMetadataReturns(result1 string, result2 error) {
	fake.patchClusterObjectWithOptionalMetadataMutex.Lock()
	defer fake.patchClusterObjectWithOptionalMetadataMutex.Unlock()
	fake.PatchClusterObjectWithOptionalMetadataStub = nil
	fake.patchClusterObjectWithOptionalMetadataReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) PatchClusterObjectWithOptionalMetadataReturnsOnCall(i int, result1 string, result2 error) {
	fake.patchClusterObjectWithOptionalMetadataMutex.Lock()
	defer fake.patchClusterObjectWithOptionalMetadataMutex.Unlock()
	fake.PatchClusterObjectWithOptionalMetadataStub = nil
	if fake.patchClusterObjectWithOptionalMetadataReturnsOnCall == nil {
		fake.patchClusterObjectWithOptionalMetadataReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.patchClusterObjectWithOptionalMetadataReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) PatchClusterObjectWithPollOptions(arg1 string, arg2 string, arg3 string, arg4 *clusterclient.PollOptions) error {
	fake.patchClusterObjectWithPollOptionsMutex.Lock()
	ret, specificReturn := fake.patchClusterObjectWithPollOptionsReturnsOnCall[len(fake.patchClusterObjectWithPollOptionsArgsForCall)]
	fake.patchClusterObjectWithPollOptionsArgsForCall = append(fake.patchClusterObjectWithPollOptionsArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 *clusterclient.PollOptions
	}{arg1, arg2, arg3, arg4})
	stub := fake.PatchClusterObjectWithPollOptionsStub
	fakeReturns := fake.patchClusterObjectWithPollOptionsReturns
	fake.recordInvocation("PatchClusterObjectWithPollOptions", []interface{}{arg1, arg2, arg3, arg4})
	fake.patchClusterObjectWithPollOptionsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ClusterClient) PatchClusterObjectWithPollOptionsCallCount() int {
	fake.patchClusterObjectWithPollOptionsMutex.RLock()
	defer fake.patchClusterObjectWithPollOptionsMutex.RUnlock()
	return len(fake.patchClusterObjectWithPollOptionsArgsForCall)
}

func (fake *ClusterClient) PatchClusterObjectWithPollOptionsCalls(stub func(string, string, string, *clusterclient.PollOptions) error) {
	fake.patchClusterObjectWithPollOptionsMutex.Lock()
	defer fake.patchClusterObjectWithPollOptionsMutex.Unlock()
	fake.PatchClusterObjectWithPollOptionsStub = stub
}

func (fake *ClusterClient) PatchClusterObjectWithPollOptionsArgsForCall(i int) (string, string, string, *clusterclient.PollOptions) {
	fake.patchClusterObjectWithPollOptionsMutex.RLock()
	defer fake.patchClusterObjectWithPollOptionsMutex.RUnlock()
	argsForCall := fake.patchClusterObjectWithPollOptionsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *ClusterClient) PatchClusterObjectWithPollOptionsReturns(result1 error) {
	fake.patchClusterObjectWithPollOptionsMutex.Lock()
	defer fake.patchClusterObjectWithPollOptionsMutex.Unlock()
	fake.PatchClusterObjectWithPollOptionsStub = nil
	fake.patchClusterObjectWithPollOptionsReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) PatchClusterObjectWithPollOptionsReturnsOnCall(i int, result1 error) {
	fake.patchClusterObjectWithPollOptionsMutex.Lock()
	defer fake.patchClusterObjectWithPollOptionsMutex.Unlock()
	fake.PatchClusterObjectWithPollOptionsStub = nil
	if fake.patchClusterObjectWithPollOptionsReturnsOnCall == nil {
		fake.patchClusterObjectWithPollOptionsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.patchClusterObjectWithPollOptionsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) PatchClusterObjectWithTKGVersion(arg1 string, arg2 string, arg3 string) error {
	fake.patchClusterObjectWithTKGVersionMutex.Lock()
	ret, specificReturn := fake.patchClusterObjectWithTKGVersionReturnsOnCall[len(fake.patchClusterObjectWithTKGVersionArgsForCall)]
	fake.patchClusterObjectWithTKGVersionArgsForCall = append(fake.patchClusterObjectWithTKGVersionArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.PatchClusterObjectWithTKGVersionStub
	fakeReturns := fake.patchClusterObjectWithTKGVersionReturns
	fake.recordInvocation("PatchClusterObjectWithTKGVersion", []interface{}{arg1, arg2, arg3})
	fake.patchClusterObjectWithTKGVersionMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ClusterClient) PatchClusterObjectWithTKGVersionCallCount() int {
	fake.patchClusterObjectWithTKGVersionMutex.RLock()
	defer fake.patchClusterObjectWithTKGVersionMutex.RUnlock()
	return len(fake.patchClusterObjectWithTKGVersionArgsForCall)
}

func (fake *ClusterClient) PatchClusterObjectWithTKGVersionCalls(stub func(string, string, string) error) {
	fake.patchClusterObjectWithTKGVersionMutex.Lock()
	defer fake.patchClusterObjectWithTKGVersionMutex.Unlock()
	fake.PatchClusterObjectWithTKGVersionStub = stub
}

func (fake *ClusterClient) PatchClusterObjectWithTKGVersionArgsForCall(i int) (string, string, string) {
	fake.patchClusterObjectWithTKGVersionMutex.RLock()
	defer fake.patchClusterObjectWithTKGVersionMutex.RUnlock()
	argsForCall := fake.patchClusterObjectWithTKGVersionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *ClusterClient) PatchClusterObjectWithTKGVersionReturns(result1 error) {
	fake.patchClusterObjectWithTKGVersionMutex.Lock()
	defer fake.patchClusterObjectWithTKGVersionMutex.Unlock()
	fake.PatchClusterObjectWithTKGVersionStub = nil
	fake.patchClusterObjectWithTKGVersionReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) PatchClusterObjectWithTKGVersionReturnsOnCall(i int, result1 error) {
	fake.patchClusterObjectWithTKGVersionMutex.Lock()
	defer fake.patchClusterObjectWithTKGVersionMutex.Unlock()
	fake.PatchClusterObjectWithTKGVersionStub = nil
	if fake.patchClusterObjectWithTKGVersionReturnsOnCall == nil {
		fake.patchClusterObjectWithTKGVersionReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.patchClusterObjectWithTKGVersionReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) PatchClusterWithOperationStartedStatus(arg1 string, arg2 string, arg3 string, arg4 time.Duration) error {
	fake.patchClusterWithOperationStartedStatusMutex.Lock()
	ret, specificReturn := fake.patchClusterWithOperationStartedStatusReturnsOnCall[len(fake.patchClusterWithOperationStartedStatusArgsForCall)]
	fake.patchClusterWithOperationStartedStatusArgsForCall = append(fake.patchClusterWithOperationStartedStatusArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 time.Duration
	}{arg1, arg2, arg3, arg4})
	stub := fake.PatchClusterWithOperationStartedStatusStub
	fakeReturns := fake.patchClusterWithOperationStartedStatusReturns
	fake.recordInvocation("PatchClusterWithOperationStartedStatus", []interface{}{arg1, arg2, arg3, arg4})
	fake.patchClusterWithOperationStartedStatusMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ClusterClient) PatchClusterWithOperationStartedStatusCallCount() int {
	fake.patchClusterWithOperationStartedStatusMutex.RLock()
	defer fake.patchClusterWithOperationStartedStatusMutex.RUnlock()
	return len(fake.patchClusterWithOperationStartedStatusArgsForCall)
}

func (fake *ClusterClient) PatchClusterWithOperationStartedStatusCalls(stub func(string, string, string, time.Duration) error) {
	fake.patchClusterWithOperationStartedStatusMutex.Lock()
	defer fake.patchClusterWithOperationStartedStatusMutex.Unlock()
	fake.PatchClusterWithOperationStartedStatusStub = stub
}

func (fake *ClusterClient) PatchClusterWithOperationStartedStatusArgsForCall(i int) (string, string, string, time.Duration) {
	fake.patchClusterWithOperationStartedStatusMutex.RLock()
	defer fake.patchClusterWithOperationStartedStatusMutex.RUnlock()
	argsForCall := fake.patchClusterWithOperationStartedStatusArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *ClusterClient) PatchClusterWithOperationStartedStatusReturns(result1 error) {
	fake.patchClusterWithOperationStartedStatusMutex.Lock()
	defer fake.patchClusterWithOperationStartedStatusMutex.Unlock()
	fake.PatchClusterWithOperationStartedStatusStub = nil
	fake.patchClusterWithOperationStartedStatusReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) PatchClusterWithOperationStartedStatusReturnsOnCall(i int, result1 error) {
	fake.patchClusterWithOperationStartedStatusMutex.Lock()
	defer fake.patchClusterWithOperationStartedStatusMutex.Unlock()
	fake.PatchClusterWithOperationStartedStatusStub = nil
	if fake.patchClusterWithOperationStartedStatusReturnsOnCall == nil {
		fake.patchClusterWithOperationStartedStatusReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.patchClusterWithOperationStartedStatusReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) PatchCoreDNSImageRepositoryInKubeadmConfigMap(arg1 string) error {
	fake.patchCoreDNSImageRepositoryInKubeadmConfigMapMutex.Lock()
	ret, specificReturn := fake.patchCoreDNSImageRepositoryInKubeadmConfigMapReturnsOnCall[len(fake.patchCoreDNSImageRepositoryInKubeadmConfigMapArgsForCall)]
	fake.patchCoreDNSImageRepositoryInKubeadmConfigMapArgsForCall = append(fake.patchCoreDNSImageRepositoryInKubeadmConfigMapArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.PatchCoreDNSImageRepositoryInKubeadmConfigMapStub
	fakeReturns := fake.patchCoreDNSImageRepositoryInKubeadmConfigMapReturns
	fake.recordInvocation("PatchCoreDNSImageRepositoryInKubeadmConfigMap", []interface{}{arg1})
	fake.patchCoreDNSImageRepositoryInKubeadmConfigMapMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ClusterClient) PatchCoreDNSImageRepositoryInKubeadmConfigMapCallCount() int {
	fake.patchCoreDNSImageRepositoryInKubeadmConfigMapMutex.RLock()
	defer fake.patchCoreDNSImageRepositoryInKubeadmConfigMapMutex.RUnlock()
	return len(fake.patchCoreDNSImageRepositoryInKubeadmConfigMapArgsForCall)
}

func (fake *ClusterClient) PatchCoreDNSImageRepositoryInKubeadmConfigMapCalls(stub func(string) error) {
	fake.patchCoreDNSImageRepositoryInKubeadmConfigMapMutex.Lock()
	defer fake.patchCoreDNSImageRepositoryInKubeadmConfigMapMutex.Unlock()
	fake.PatchCoreDNSImageRepositoryInKubeadmConfigMapStub = stub
}

func (fake *ClusterClient) PatchCoreDNSImageRepositoryInKubeadmConfigMapArgsForCall(i int) string {
	fake.patchCoreDNSImageRepositoryInKubeadmConfigMapMutex.RLock()
	defer fake.patchCoreDNSImageRepositoryInKubeadmConfigMapMutex.RUnlock()
	argsForCall := fake.patchCoreDNSImageRepositoryInKubeadmConfigMapArgsForCall[i]
	return argsForCall.arg1
}

func (fake *ClusterClient) PatchCoreDNSImageRepositoryInKubeadmConfigMapReturns(result1 error) {
	fake.patchCoreDNSImageRepositoryInKubeadmConfigMapMutex.Lock()
	defer fake.patchCoreDNSImageRepositoryInKubeadmConfigMapMutex.Unlock()
	fake.PatchCoreDNSImageRepositoryInKubeadmConfigMapStub = nil
	fake.patchCoreDNSImageRepositoryInKubeadmConfigMapReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) PatchCoreDNSImageRepositoryInKubeadmConfigMapReturnsOnCall(i int, result1 error) {
	fake.patchCoreDNSImageRepositoryInKubeadmConfigMapMutex.Lock()
	defer fake.patchCoreDNSImageRepositoryInKubeadmConfigMapMutex.Unlock()
	fake.PatchCoreDNSImageRepositoryInKubeadmConfigMapStub = nil
	if fake.patchCoreDNSImageRepositoryInKubeadmConfigMapReturnsOnCall == nil {
		fake.patchCoreDNSImageRepositoryInKubeadmConfigMapReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.patchCoreDNSImageRepositoryInKubeadmConfigMapReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) PatchImageRepositoryInKubeProxyDaemonSet(arg1 string) error {
	fake.patchImageRepositoryInKubeProxyDaemonSetMutex.Lock()
	ret, specificReturn := fake.patchImageRepositoryInKubeProxyDaemonSetReturnsOnCall[len(fake.patchImageRepositoryInKubeProxyDaemonSetArgsForCall)]
	fake.patchImageRepositoryInKubeProxyDaemonSetArgsForCall = append(fake.patchImageRepositoryInKubeProxyDaemonSetArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.PatchImageRepositoryInKubeProxyDaemonSetStub
	fakeReturns := fake.patchImageRepositoryInKubeProxyDaemonSetReturns
	fake.recordInvocation("PatchImageRepositoryInKubeProxyDaemonSet", []interface{}{arg1})
	fake.patchImageRepositoryInKubeProxyDaemonSetMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ClusterClient) PatchImageRepositoryInKubeProxyDaemonSetCallCount() int {
	fake.patchImageRepositoryInKubeProxyDaemonSetMutex.RLock()
	defer fake.patchImageRepositoryInKubeProxyDaemonSetMutex.RUnlock()
	return len(fake.patchImageRepositoryInKubeProxyDaemonSetArgsForCall)
}

func (fake *ClusterClient) PatchImageRepositoryInKubeProxyDaemonSetCalls(stub func(string) error) {
	fake.patchImageRepositoryInKubeProxyDaemonSetMutex.Lock()
	defer fake.patchImageRepositoryInKubeProxyDaemonSetMutex.Unlock()
	fake.PatchImageRepositoryInKubeProxyDaemonSetStub = stub
}

func (fake *ClusterClient) PatchImageRepositoryInKubeProxyDaemonSetArgsForCall(i int) string {
	fake.patchImageRepositoryInKubeProxyDaemonSetMutex.RLock()
	defer fake.patchImageRepositoryInKubeProxyDaemonSetMutex.RUnlock()
	argsForCall := fake.patchImageRepositoryInKubeProxyDaemonSetArgsForCall[i]
	return argsForCall.arg1
}

func (fake *ClusterClient) PatchImageRepositoryInKubeProxyDaemonSetReturns(result1 error) {
	fake.patchImageRepositoryInKubeProxyDaemonSetMutex.Lock()
	defer fake.patchImageRepositoryInKubeProxyDaemonSetMutex.Unlock()
	fake.PatchImageRepositoryInKubeProxyDaemonSetStub = nil
	fake.patchImageRepositoryInKubeProxyDaemonSetReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) PatchImageRepositoryInKubeProxyDaemonSetReturnsOnCall(i int, result1 error) {
	fake.patchImageRepositoryInKubeProxyDaemonSetMutex.Lock()
	defer fake.patchImageRepositoryInKubeProxyDaemonSetMutex.Unlock()
	fake.PatchImageRepositoryInKubeProxyDaemonSetStub = nil
	if fake.patchImageRepositoryInKubeProxyDaemonSetReturnsOnCall == nil {
		fake.patchImageRepositoryInKubeProxyDaemonSetReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.patchImageRepositoryInKubeProxyDaemonSetReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) PatchK8SVersionToPacificCluster(arg1 string, arg2 string, arg3 string) error {
	fake.patchK8SVersionToPacificClusterMutex.Lock()
	ret, specificReturn := fake.patchK8SVersionToPacificClusterReturnsOnCall[len(fake.patchK8SVersionToPacificClusterArgsForCall)]
	fake.patchK8SVersionToPacificClusterArgsForCall = append(fake.patchK8SVersionToPacificClusterArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.PatchK8SVersionToPacificClusterStub
	fakeReturns := fake.patchK8SVersionToPacificClusterReturns
	fake.recordInvocation("PatchK8SVersionToPacificCluster", []interface{}{arg1, arg2, arg3})
	fake.patchK8SVersionToPacificClusterMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ClusterClient) PatchK8SVersionToPacificClusterCallCount() int {
	fake.patchK8SVersionToPacificClusterMutex.RLock()
	defer fake.patchK8SVersionToPacificClusterMutex.RUnlock()
	return len(fake.patchK8SVersionToPacificClusterArgsForCall)
}

func (fake *ClusterClient) PatchK8SVersionToPacificClusterCalls(stub func(string, string, string) error) {
	fake.patchK8SVersionToPacificClusterMutex.Lock()
	defer fake.patchK8SVersionToPacificClusterMutex.Unlock()
	fake.PatchK8SVersionToPacificClusterStub = stub
}

func (fake *ClusterClient) PatchK8SVersionToPacificClusterArgsForCall(i int) (string, string, string) {
	fake.patchK8SVersionToPacificClusterMutex.RLock()
	defer fake.patchK8SVersionToPacificClusterMutex.RUnlock()
	argsForCall := fake.patchK8SVersionToPacificClusterArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *ClusterClient) PatchK8SVersionToPacificClusterReturns(result1 error) {
	fake.patchK8SVersionToPacificClusterMutex.Lock()
	defer fake.patchK8SVersionToPacificClusterMutex.Unlock()
	fake.PatchK8SVersionToPacificClusterStub = nil
	fake.patchK8SVersionToPacificClusterReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) PatchK8SVersionToPacificClusterReturnsOnCall(i int, result1 error) {
	fake.patchK8SVersionToPacificClusterMutex.Lock()
	defer fake.patchK8SVersionToPacificClusterMutex.Unlock()
	fake.PatchK8SVersionToPacificClusterStub = nil
	if fake.patchK8SVersionToPacificClusterReturnsOnCall == nil {
		fake.patchK8SVersionToPacificClusterReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.patchK8SVersionToPacificClusterReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) PatchKappControllerLastAppliedAnnotation(arg1 string) error {
	fake.patchKappControllerLastAppliedAnnotationMutex.Lock()
	ret, specificReturn := fake.patchKappControllerLastAppliedAnnotationReturnsOnCall[len(fake.patchKappControllerLastAppliedAnnotationArgsForCall)]
	fake.patchKappControllerLastAppliedAnnotationArgsForCall = append(fake.patchKappControllerLastAppliedAnnotationArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.PatchKappControllerLastAppliedAnnotationStub
	fakeReturns := fake.patchKappControllerLastAppliedAnnotationReturns
	fake.recordInvocation("PatchKappControllerLastAppliedAnnotation", []interface{}{arg1})
	fake.patchKappControllerLastAppliedAnnotationMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ClusterClient) PatchKappControllerLastAppliedAnnotationCallCount() int {
	fake.patchKappControllerLastAppliedAnnotationMutex.RLock()
	defer fake.patchKappControllerLastAppliedAnnotationMutex.RUnlock()
	return len(fake.patchKappControllerLastAppliedAnnotationArgsForCall)
}

func (fake *ClusterClient) PatchKappControllerLastAppliedAnnotationCalls(stub func(string) error) {
	fake.patchKappControllerLastAppliedAnnotationMutex.Lock()
	defer fake.patchKappControllerLastAppliedAnnotationMutex.Unlock()
	fake.PatchKappControllerLastAppliedAnnotationStub = stub
}

func (fake *ClusterClient) PatchKappControllerLastAppliedAnnotationArgsForCall(i int) string {
	fake.patchKappControllerLastAppliedAnnotationMutex.RLock()
	defer fake.patchKappControllerLastAppliedAnnotationMutex.RUnlock()
	argsForCall := fake.patchKappControllerLastAppliedAnnotationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *ClusterClient) PatchKappControllerLastAppliedAnnotationReturns(result1 error) {
	fake.patchKappControllerLastAppliedAnnotationMutex.Lock()
	defer fake.patchKappControllerLastAppliedAnnotationMutex.Unlock()
	fake.PatchKappControllerLastAppliedAnnotationStub = nil
	fake.patchKappControllerLastAppliedAnnotationReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) PatchKappControllerLastAppliedAnnotationReturnsOnCall(i int, result1 error) {
	fake.patchKappControllerLastAppliedAnnotationMutex.Lock()
	defer fake.patchKappControllerLastAppliedAnnotationMutex.Unlock()
	fake.PatchKappControllerLastAppliedAnnotationStub = nil
	if fake.patchKappControllerLastAppliedAnnotationReturnsOnCall == nil {
		fake.patchKappControllerLastAppliedAnnotationReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.patchKappControllerLastAppliedAnnotationReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) PatchResource(arg1 interface{}, arg2 string, arg3 string, arg4 string, arg5 types.PatchType, arg6 *clusterclient.PollOptions) error {
	fake.patchResourceMutex.Lock()
	ret, specificReturn := fake.patchResourceReturnsOnCall[len(fake.patchResourceArgsForCall)]
	fake.patchResourceArgsForCall = append(fake.patchResourceArgsForCall, struct {
		arg1 interface{}
		arg2 string
		arg3 string
		arg4 string
		arg5 types.PatchType
		arg6 *clusterclient.PollOptions
	}{arg1, arg2, arg3, arg4, arg5, arg6})
	stub := fake.PatchResourceStub
	fakeReturns := fake.patchResourceReturns
	fake.recordInvocation("PatchResource", []interface{}{arg1, arg2, arg3, arg4, arg5, arg6})
	fake.patchResourceMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5, arg6)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ClusterClient) PatchResourceCallCount() int {
	fake.patchResourceMutex.RLock()
	defer fake.patchResourceMutex.RUnlock()
	return len(fake.patchResourceArgsForCall)
}

func (fake *ClusterClient) PatchResourceCalls(stub func(interface{}, string, string, string, types.PatchType, *clusterclient.PollOptions) error) {
	fake.patchResourceMutex.Lock()
	defer fake.patchResourceMutex.Unlock()
	fake.PatchResourceStub = stub
}

func (fake *ClusterClient) PatchResourceArgsForCall(i int) (interface{}, string, string, string, types.PatchType, *clusterclient.PollOptions) {
	fake.patchResourceMutex.RLock()
	defer fake.patchResourceMutex.RUnlock()
	argsForCall := fake.patchResourceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5, argsForCall.arg6
}

func (fake *ClusterClient) PatchResourceReturns(result1 error) {
	fake.patchResourceMutex.Lock()
	defer fake.patchResourceMutex.Unlock()
	fake.PatchResourceStub = nil
	fake.patchResourceReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) PatchResourceReturnsOnCall(i int, result1 error) {
	fake.patchResourceMutex.Lock()
	defer fake.patchResourceMutex.Unlock()
	fake.PatchResourceStub = nil
	if fake.patchResourceReturnsOnCall == nil {
		fake.patchResourceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.patchResourceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) RemoveCEIPTelemetryJob(arg1 string) error {
	fake.removeCEIPTelemetryJobMutex.Lock()
	ret, specificReturn := fake.removeCEIPTelemetryJobReturnsOnCall[len(fake.removeCEIPTelemetryJobArgsForCall)]
	fake.removeCEIPTelemetryJobArgsForCall = append(fake.removeCEIPTelemetryJobArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.RemoveCEIPTelemetryJobStub
	fakeReturns := fake.removeCEIPTelemetryJobReturns
	fake.recordInvocation("RemoveCEIPTelemetryJob", []interface{}{arg1})
	fake.removeCEIPTelemetryJobMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ClusterClient) RemoveCEIPTelemetryJobCallCount() int {
	fake.removeCEIPTelemetryJobMutex.RLock()
	defer fake.removeCEIPTelemetryJobMutex.RUnlock()
	return len(fake.removeCEIPTelemetryJobArgsForCall)
}

func (fake *ClusterClient) RemoveCEIPTelemetryJobCalls(stub func(string) error) {
	fake.removeCEIPTelemetryJobMutex.Lock()
	defer fake.removeCEIPTelemetryJobMutex.Unlock()
	fake.RemoveCEIPTelemetryJobStub = stub
}

func (fake *ClusterClient) RemoveCEIPTelemetryJobArgsForCall(i int) string {
	fake.removeCEIPTelemetryJobMutex.RLock()
	defer fake.removeCEIPTelemetryJobMutex.RUnlock()
	argsForCall := fake.removeCEIPTelemetryJobArgsForCall[i]
	return argsForCall.arg1
}

func (fake *ClusterClient) RemoveCEIPTelemetryJobReturns(result1 error) {
	fake.removeCEIPTelemetryJobMutex.Lock()
	defer fake.removeCEIPTelemetryJobMutex.Unlock()
	fake.RemoveCEIPTelemetryJobStub = nil
	fake.removeCEIPTelemetryJobReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) RemoveCEIPTelemetryJobReturnsOnCall(i int, result1 error) {
	fake.removeCEIPTelemetryJobMutex.Lock()
	defer fake.removeCEIPTelemetryJobMutex.Unlock()
	fake.RemoveCEIPTelemetryJobStub = nil
	if fake.removeCEIPTelemetryJobReturnsOnCall == nil {
		fake.removeCEIPTelemetryJobReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.removeCEIPTelemetryJobReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) RemoveMatchingMetadataFromResources(arg1 schema.GroupVersionKind, arg2 string, arg3 string, arg4 []string) error {
	var arg4Copy []string
	if arg4 != nil {
		arg4Copy = make([]string, len(arg4))
		copy(arg4Copy, arg4)
	}
	fake.removeMatchingMetadataFromResourcesMutex.Lock()
	ret, specificReturn := fake.removeMatchingMetadataFromResourcesReturnsOnCall[len(fake.removeMatchingMetadataFromResourcesArgsForCall)]
	fake.removeMatchingMetadataFromResourcesArgsForCall = append(fake.removeMatchingMetadataFromResourcesArgsForCall, struct {
		arg1 schema.GroupVersionKind
		arg2 string
		arg3 string
		arg4 []string
	}{arg1, arg2, arg3, arg4Copy})
	stub := fake.RemoveMatchingMetadataFromResourcesStub
	fakeReturns := fake.removeMatchingMetadataFromResourcesReturns
	fake.recordInvocation("RemoveMatchingMetadataFromResources", []interface{}{arg1, arg2, arg3, arg4Copy})
	fake.removeMatchingMetadataFromResourcesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ClusterClient) RemoveMatchingMetadataFromResourcesCallCount() int {
	fake.removeMatchingMetadataFromResourcesMutex.RLock()
	defer fake.removeMatchingMetadataFromResourcesMutex.RUnlock()
	return len(fake.removeMatchingMetadataFromResourcesArgsForCall)
}

func (fake *ClusterClient) RemoveMatchingMetadataFromResourcesCalls(stub func(schema.GroupVersionKind, string, string, []string) error) {
	fake.removeMatchingMetadataFromResourcesMutex.Lock()
	defer fake.removeMatchingMetadataFromResourcesMutex.Unlock()
	fake.RemoveMatchingMetadataFromResourcesStub = stub
}

func (fake *ClusterClient) RemoveMatchingMetadataFromResourcesArgsForCall(i int) (schema.GroupVersionKind, string, string, []string) {
	fake.removeMatchingMetadataFromResourcesMutex.RLock()
	defer fake.removeMatchingMetadataFromResourcesMutex.RUnlock()
	argsForCall := fake.removeMatchingMetadataFromResourcesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *ClusterClient) RemoveMatchingMetadataFromResourcesReturns(result1 error) {
	fake.removeMatchingMetadataFromResourcesMutex.Lock()
	defer fake.removeMatchingMetadataFromResourcesMutex.Unlock()
	fake.RemoveMatchingMetadataFromResourcesStub = nil
	fake.removeMatchingMetadataFromResourcesReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) RemoveMatchingMetadataFromResourcesReturnsOnCall(i int, result1 error) {
	fake.removeMatchingMetadataFromResourcesMutex.Lock()
	defer fake.removeMatchingMetadataFromResourcesMutex.Unlock()
	fake.RemoveMatchingMetadataFromResourcesStub = nil
	if fake.removeMatchingMetadataFromResourcesReturnsOnCall == nil {
		fake.removeMatchingMetadataFromResourcesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.removeMatchingMetadataFromResourcesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) ScalePacificClusterControlPlane(arg1 string, arg2 string, arg3 int32) error {
	fake.scalePacificClusterControlPlaneMutex.Lock()
	ret, specificReturn := fake.scalePacificClusterControlPlaneReturnsOnCall[len(fake.scalePacificClusterControlPlaneArgsForCall)]
	fake.scalePacificClusterControlPlaneArgsForCall = append(fake.scalePacificClusterControlPlaneArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 int32
	}{arg1, arg2, arg3})
	stub := fake.ScalePacificClusterControlPlaneStub
	fakeReturns := fake.scalePacificClusterControlPlaneReturns
	fake.recordInvocation("ScalePacificClusterControlPlane", []interface{}{arg1, arg2, arg3})
	fake.scalePacificClusterControlPlaneMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ClusterClient) ScalePacificClusterControlPlaneCallCount() int {
	fake.scalePacificClusterControlPlaneMutex.RLock()
	defer fake.scalePacificClusterControlPlaneMutex.RUnlock()
	return len(fake.scalePacificClusterControlPlaneArgsForCall)
}

func (fake *ClusterClient) ScalePacificClusterControlPlaneCalls(stub func(string, string, int32) error) {
	fake.scalePacificClusterControlPlaneMutex.Lock()
	defer fake.scalePacificClusterControlPlaneMutex.Unlock()
	fake.ScalePacificClusterControlPlaneStub = stub
}

func (fake *ClusterClient) ScalePacificClusterControlPlaneArgsForCall(i int) (string, string, int32) {
	fake.scalePacificClusterControlPlaneMutex.RLock()
	defer fake.scalePacificClusterControlPlaneMutex.RUnlock()
	argsForCall := fake.scalePacificClusterControlPlaneArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *ClusterClient) ScalePacificClusterControlPlaneReturns(result1 error) {
	fake.scalePacificClusterControlPlaneMutex.Lock()
	defer fake.scalePacificClusterControlPlaneMutex.Unlock()
	fake.ScalePacificClusterControlPlaneStub = nil
	fake.scalePacificClusterControlPlaneReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) ScalePacificClusterControlPlaneReturnsOnCall(i int, result1 error) {
	fake.scalePacificClusterControlPlaneMutex.Lock()
	defer fake.scalePacificClusterControlPlaneMutex.Unlock()
	fake.ScalePacificClusterControlPlaneStub = nil
	if fake.scalePacificClusterControlPlaneReturnsOnCall == nil {
		fake.scalePacificClusterControlPlaneReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.scalePacificClusterControlPlaneReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) ScalePacificClusterWorkerNodes(arg1 string, arg2 string, arg3 int32) error {
	fake.scalePacificClusterWorkerNodesMutex.Lock()
	ret, specificReturn := fake.scalePacificClusterWorkerNodesReturnsOnCall[len(fake.scalePacificClusterWorkerNodesArgsForCall)]
	fake.scalePacificClusterWorkerNodesArgsForCall = append(fake.scalePacificClusterWorkerNodesArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 int32
	}{arg1, arg2, arg3})
	stub := fake.ScalePacificClusterWorkerNodesStub
	fakeReturns := fake.scalePacificClusterWorkerNodesReturns
	fake.recordInvocation("ScalePacificClusterWorkerNodes", []interface{}{arg1, arg2, arg3})
	fake.scalePacificClusterWorkerNodesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ClusterClient) ScalePacificClusterWorkerNodesCallCount() int {
	fake.scalePacificClusterWorkerNodesMutex.RLock()
	defer fake.scalePacificClusterWorkerNodesMutex.RUnlock()
	return len(fake.scalePacificClusterWorkerNodesArgsForCall)
}

func (fake *ClusterClient) ScalePacificClusterWorkerNodesCalls(stub func(string, string, int32) error) {
	fake.scalePacificClusterWorkerNodesMutex.Lock()
	defer fake.scalePacificClusterWorkerNodesMutex.Unlock()
	fake.ScalePacificClusterWorkerNodesStub = stub
}

func (fake *ClusterClient) ScalePacificClusterWorkerNodesArgsForCall(i int) (string, string, int32) {
	fake.scalePacificClusterWorkerNodesMutex.RLock()
	defer fake.scalePacificClusterWorkerNodesMutex.RUnlock()
	argsForCall := fake.scalePacificClusterWorkerNodesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *ClusterClient) ScalePacificClusterWorkerNodesReturns(result1 error) {
	fake.scalePacificClusterWorkerNodesMutex.Lock()
	defer fake.scalePacificClusterWorkerNodesMutex.Unlock()
	fake.ScalePacificClusterWorkerNodesStub = nil
	fake.scalePacificClusterWorkerNodesReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) ScalePacificClusterWorkerNodesReturnsOnCall(i int, result1 error) {
	fake.scalePacificClusterWorkerNodesMutex.Lock()
	defer fake.scalePacificClusterWorkerNodesMutex.Unlock()
	fake.ScalePacificClusterWorkerNodesStub = nil
	if fake.scalePacificClusterWorkerNodesReturnsOnCall == nil {
		fake.scalePacificClusterWorkerNodesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.scalePacificClusterWorkerNodesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) UpdateAWSCNIIngressRules(arg1 string, arg2 string, arg3 v1beta2.CNIIngressRule) error {
	fake.updateAWSCNIIngressRulesMutex.Lock()
	ret, specificReturn := fake.updateAWSCNIIngressRulesReturnsOnCall[len(fake.updateAWSCNIIngressRulesArgsForCall)]
	fake.updateAWSCNIIngressRulesArgsForCall = append(fake.updateAWSCNIIngressRulesArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 v1beta2.CNIIngressRule
	}{arg1, arg2, arg3})
	stub := fake.UpdateAWSCNIIngressRulesStub
	fakeReturns := fake.updateAWSCNIIngressRulesReturns
	fake.recordInvocation("UpdateAWSCNIIngressRules", []interface{}{arg1, arg2, arg3})
	fake.updateAWSCNIIngressRulesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ClusterClient) UpdateAWSCNIIngressRulesCallCount() int {
	fake.updateAWSCNIIngressRulesMutex.RLock()
	defer fake.updateAWSCNIIngressRulesMutex.RUnlock()
	return len(fake.updateAWSCNIIngressRulesArgsForCall)
}

func (fake *ClusterClient) UpdateAWSCNIIngressRulesCalls(stub func(string, string, v1beta2.CNIIngressRule) error) {
	fake.updateAWSCNIIngressRulesMutex.Lock()
	defer fake.updateAWSCNIIngressRulesMutex.Unlock()
	fake.UpdateAWSCNIIngressRulesStub = stub
}

func (fake *ClusterClient) UpdateAWSCNIIngressRulesArgsForCall(i int) (string, string, v1beta2.CNIIngressRule) {
	fake.updateAWSCNIIngressRulesMutex.RLock()
	defer fake.updateAWSCNIIngressRulesMutex.RUnlock()
	argsForCall := fake.updateAWSCNIIngressRulesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *ClusterClient) UpdateAWSCNIIngressRulesReturns(result1 error) {
	fake.updateAWSCNIIngressRulesMutex.Lock()
	defer fake.updateAWSCNIIngressRulesMutex.Unlock()
	fake.UpdateAWSCNIIngressRulesStub = nil
	fake.updateAWSCNIIngressRulesReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) UpdateAWSCNIIngressRulesReturnsOnCall(i int, result1 error) {
	fake.updateAWSCNIIngressRulesMutex.Lock()
	defer fake.updateAWSCNIIngressRulesMutex.Unlock()
	fake.UpdateAWSCNIIngressRulesStub = nil
	if fake.updateAWSCNIIngressRulesReturnsOnCall == nil {
		fake.updateAWSCNIIngressRulesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateAWSCNIIngressRulesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) UpdateAzureClusterIdentity(arg1 string, arg2 string, arg3 string, arg4 string, arg5 string) error {
	fake.updateAzureClusterIdentityMutex.Lock()
	ret, specificReturn := fake.updateAzureClusterIdentityReturnsOnCall[len(fake.updateAzureClusterIdentityArgsForCall)]
	fake.updateAzureClusterIdentityArgsForCall = append(fake.updateAzureClusterIdentityArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
		arg5 string
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.UpdateAzureClusterIdentityStub
	fakeReturns := fake.updateAzureClusterIdentityReturns
	fake.recordInvocation("UpdateAzureClusterIdentity", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.updateAzureClusterIdentityMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ClusterClient) UpdateAzureClusterIdentityCallCount() int {
	fake.updateAzureClusterIdentityMutex.RLock()
	defer fake.updateAzureClusterIdentityMutex.RUnlock()
	return len(fake.updateAzureClusterIdentityArgsForCall)
}

func (fake *ClusterClient) UpdateAzureClusterIdentityCalls(stub func(string, string, string, string, string) error) {
	fake.updateAzureClusterIdentityMutex.Lock()
	defer fake.updateAzureClusterIdentityMutex.Unlock()
	fake.UpdateAzureClusterIdentityStub = stub
}

func (fake *ClusterClient) UpdateAzureClusterIdentityArgsForCall(i int) (string, string, string, string, string) {
	fake.updateAzureClusterIdentityMutex.RLock()
	defer fake.updateAzureClusterIdentityMutex.RUnlock()
	argsForCall := fake.updateAzureClusterIdentityArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *ClusterClient) UpdateAzureClusterIdentityReturns(result1 error) {
	fake.updateAzureClusterIdentityMutex.Lock()
	defer fake.updateAzureClusterIdentityMutex.Unlock()
	fake.UpdateAzureClusterIdentityStub = nil
	fake.updateAzureClusterIdentityReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) UpdateAzureClusterIdentityReturnsOnCall(i int, result1 error) {
	fake.updateAzureClusterIdentityMutex.Lock()
	defer fake.updateAzureClusterIdentityMutex.Unlock()
	fake.UpdateAzureClusterIdentityStub = nil
	if fake.updateAzureClusterIdentityReturnsOnCall == nil {
		fake.updateAzureClusterIdentityReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateAzureClusterIdentityReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) UpdateAzureKCP(arg1 string, arg2 string) error {
	fake.updateAzureKCPMutex.Lock()
	ret, specificReturn := fake.updateAzureKCPReturnsOnCall[len(fake.updateAzureKCPArgsForCall)]
	fake.updateAzureKCPArgsForCall = append(fake.updateAzureKCPArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.UpdateAzureKCPStub
	fakeReturns := fake.updateAzureKCPReturns
	fake.recordInvocation("UpdateAzureKCP", []interface{}{arg1, arg2})
	fake.updateAzureKCPMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ClusterClient) UpdateAzureKCPCallCount() int {
	fake.updateAzureKCPMutex.RLock()
	defer fake.updateAzureKCPMutex.RUnlock()
	return len(fake.updateAzureKCPArgsForCall)
}

func (fake *ClusterClient) UpdateAzureKCPCalls(stub func(string, string) error) {
	fake.updateAzureKCPMutex.Lock()
	defer fake.updateAzureKCPMutex.Unlock()
	fake.UpdateAzureKCPStub = stub
}

func (fake *ClusterClient) UpdateAzureKCPArgsForCall(i int) (string, string) {
	fake.updateAzureKCPMutex.RLock()
	defer fake.updateAzureKCPMutex.RUnlock()
	argsForCall := fake.updateAzureKCPArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ClusterClient) UpdateAzureKCPReturns(result1 error) {
	fake.updateAzureKCPMutex.Lock()
	defer fake.updateAzureKCPMutex.Unlock()
	fake.UpdateAzureKCPStub = nil
	fake.updateAzureKCPReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) UpdateAzureKCPReturnsOnCall(i int, result1 error) {
	fake.updateAzureKCPMutex.Lock()
	defer fake.updateAzureKCPMutex.Unlock()
	fake.UpdateAzureKCPStub = nil
	if fake.updateAzureKCPReturnsOnCall == nil {
		fake.updateAzureKCPReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateAzureKCPReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) UpdateCAPZControllerManagerDeploymentReplicas(arg1 int32) error {
	fake.updateCAPZControllerManagerDeploymentReplicasMutex.Lock()
	ret, specificReturn := fake.updateCAPZControllerManagerDeploymentReplicasReturnsOnCall[len(fake.updateCAPZControllerManagerDeploymentReplicasArgsForCall)]
	fake.updateCAPZControllerManagerDeploymentReplicasArgsForCall = append(fake.updateCAPZControllerManagerDeploymentReplicasArgsForCall, struct {
		arg1 int32
	}{arg1})
	stub := fake.UpdateCAPZControllerManagerDeploymentReplicasStub
	fakeReturns := fake.updateCAPZControllerManagerDeploymentReplicasReturns
	fake.recordInvocation("UpdateCAPZControllerManagerDeploymentReplicas", []interface{}{arg1})
	fake.updateCAPZControllerManagerDeploymentReplicasMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ClusterClient) UpdateCAPZControllerManagerDeploymentReplicasCallCount() int {
	fake.updateCAPZControllerManagerDeploymentReplicasMutex.RLock()
	defer fake.updateCAPZControllerManagerDeploymentReplicasMutex.RUnlock()
	return len(fake.updateCAPZControllerManagerDeploymentReplicasArgsForCall)
}

func (fake *ClusterClient) UpdateCAPZControllerManagerDeploymentReplicasCalls(stub func(int32) error) {
	fake.updateCAPZControllerManagerDeploymentReplicasMutex.Lock()
	defer fake.updateCAPZControllerManagerDeploymentReplicasMutex.Unlock()
	fake.UpdateCAPZControllerManagerDeploymentReplicasStub = stub
}

func (fake *ClusterClient) UpdateCAPZControllerManagerDeploymentReplicasArgsForCall(i int) int32 {
	fake.updateCAPZControllerManagerDeploymentReplicasMutex.RLock()
	defer fake.updateCAPZControllerManagerDeploymentReplicasMutex.RUnlock()
	argsForCall := fake.updateCAPZControllerManagerDeploymentReplicasArgsForCall[i]
	return argsForCall.arg1
}

func (fake *ClusterClient) UpdateCAPZControllerManagerDeploymentReplicasReturns(result1 error) {
	fake.updateCAPZControllerManagerDeploymentReplicasMutex.Lock()
	defer fake.updateCAPZControllerManagerDeploymentReplicasMutex.Unlock()
	fake.UpdateCAPZControllerManagerDeploymentReplicasStub = nil
	fake.updateCAPZControllerManagerDeploymentReplicasReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) UpdateCAPZControllerManagerDeploymentReplicasReturnsOnCall(i int, result1 error) {
	fake.updateCAPZControllerManagerDeploymentReplicasMutex.Lock()
	defer fake.updateCAPZControllerManagerDeploymentReplicasMutex.Unlock()
	fake.UpdateCAPZControllerManagerDeploymentReplicasStub = nil
	if fake.updateCAPZControllerManagerDeploymentReplicasReturnsOnCall == nil {
		fake.updateCAPZControllerManagerDeploymentReplicasReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateCAPZControllerManagerDeploymentReplicasReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) UpdateCapvManagerBootstrapCredentialsSecret(arg1 string, arg2 string) error {
	fake.updateCapvManagerBootstrapCredentialsSecretMutex.Lock()
	ret, specificReturn := fake.updateCapvManagerBootstrapCredentialsSecretReturnsOnCall[len(fake.updateCapvManagerBootstrapCredentialsSecretArgsForCall)]
	fake.updateCapvManagerBootstrapCredentialsSecretArgsForCall = append(fake.updateCapvManagerBootstrapCredentialsSecretArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.UpdateCapvManagerBootstrapCredentialsSecretStub
	fakeReturns := fake.updateCapvManagerBootstrapCredentialsSecretReturns
	fake.recordInvocation("UpdateCapvManagerBootstrapCredentialsSecret", []interface{}{arg1, arg2})
	fake.updateCapvManagerBootstrapCredentialsSecretMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ClusterClient) UpdateCapvManagerBootstrapCredentialsSecretCallCount() int {
	fake.updateCapvManagerBootstrapCredentialsSecretMutex.RLock()
	defer fake.updateCapvManagerBootstrapCredentialsSecretMutex.RUnlock()
	return len(fake.updateCapvManagerBootstrapCredentialsSecretArgsForCall)
}

func (fake *ClusterClient) UpdateCapvManagerBootstrapCredentialsSecretCalls(stub func(string, string) error) {
	fake.updateCapvManagerBootstrapCredentialsSecretMutex.Lock()
	defer fake.updateCapvManagerBootstrapCredentialsSecretMutex.Unlock()
	fake.UpdateCapvManagerBootstrapCredentialsSecretStub = stub
}

func (fake *ClusterClient) UpdateCapvManagerBootstrapCredentialsSecretArgsForCall(i int) (string, string) {
	fake.updateCapvManagerBootstrapCredentialsSecretMutex.RLock()
	defer fake.updateCapvManagerBootstrapCredentialsSecretMutex.RUnlock()
	argsForCall := fake.updateCapvManagerBootstrapCredentialsSecretArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ClusterClient) UpdateCapvManagerBootstrapCredentialsSecretReturns(result1 error) {
	fake.updateCapvManagerBootstrapCredentialsSecretMutex.Lock()
	defer fake.updateCapvManagerBootstrapCredentialsSecretMutex.Unlock()
	fake.UpdateCapvManagerBootstrapCredentialsSecretStub = nil
	fake.updateCapvManagerBootstrapCredentialsSecretReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) UpdateCapvManagerBootstrapCredentialsSecretReturnsOnCall(i int, result1 error) {
	fake.updateCapvManagerBootstrapCredentialsSecretMutex.Lock()
	defer fake.updateCapvManagerBootstrapCredentialsSecretMutex.Unlock()
	fake.UpdateCapvManagerBootstrapCredentialsSecretStub = nil
	if fake.updateCapvManagerBootstrapCredentialsSecretReturnsOnCall == nil {
		fake.updateCapvManagerBootstrapCredentialsSecretReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateCapvManagerBootstrapCredentialsSecretReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) UpdateCapzManagerBootstrapCredentialsSecret(arg1 string, arg2 string, arg3 string) error {
	fake.updateCapzManagerBootstrapCredentialsSecretMutex.Lock()
	ret, specificReturn := fake.updateCapzManagerBootstrapCredentialsSecretReturnsOnCall[len(fake.updateCapzManagerBootstrapCredentialsSecretArgsForCall)]
	fake.updateCapzManagerBootstrapCredentialsSecretArgsForCall = append(fake.updateCapzManagerBootstrapCredentialsSecretArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.UpdateCapzManagerBootstrapCredentialsSecretStub
	fakeReturns := fake.updateCapzManagerBootstrapCredentialsSecretReturns
	fake.recordInvocation("UpdateCapzManagerBootstrapCredentialsSecret", []interface{}{arg1, arg2, arg3})
	fake.updateCapzManagerBootstrapCredentialsSecretMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ClusterClient) UpdateCapzManagerBootstrapCredentialsSecretCallCount() int {
	fake.updateCapzManagerBootstrapCredentialsSecretMutex.RLock()
	defer fake.updateCapzManagerBootstrapCredentialsSecretMutex.RUnlock()
	return len(fake.updateCapzManagerBootstrapCredentialsSecretArgsForCall)
}

func (fake *ClusterClient) UpdateCapzManagerBootstrapCredentialsSecretCalls(stub func(string, string, string) error) {
	fake.updateCapzManagerBootstrapCredentialsSecretMutex.Lock()
	defer fake.updateCapzManagerBootstrapCredentialsSecretMutex.Unlock()
	fake.UpdateCapzManagerBootstrapCredentialsSecretStub = stub
}

func (fake *ClusterClient) UpdateCapzManagerBootstrapCredentialsSecretArgsForCall(i int) (string, string, string) {
	fake.updateCapzManagerBootstrapCredentialsSecretMutex.RLock()
	defer fake.updateCapzManagerBootstrapCredentialsSecretMutex.RUnlock()
	argsForCall := fake.updateCapzManagerBootstrapCredentialsSecretArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *ClusterClient) UpdateCapzManagerBootstrapCredentialsSecretReturns(result1 error) {
	fake.updateCapzManagerBootstrapCredentialsSecretMutex.Lock()
	defer fake.updateCapzManagerBootstrapCredentialsSecretMutex.Unlock()
	fake.UpdateCapzManagerBootstrapCredentialsSecretStub = nil
	fake.updateCapzManagerBootstrapCredentialsSecretReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) UpdateCapzManagerBootstrapCredentialsSecretReturnsOnCall(i int, result1 error) {
	fake.updateCapzManagerBootstrapCredentialsSecretMutex.Lock()
	defer fake.updateCapzManagerBootstrapCredentialsSecretMutex.Unlock()
	fake.UpdateCapzManagerBootstrapCredentialsSecretStub = nil
	if fake.updateCapzManagerBootstrapCredentialsSecretReturnsOnCall == nil {
		fake.updateCapzManagerBootstrapCredentialsSecretReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateCapzManagerBootstrapCredentialsSecretReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) UpdateReplicas(arg1 interface{}, arg2 string, arg3 string, arg4 int32) error {
	fake.updateReplicasMutex.Lock()
	ret, specificReturn := fake.updateReplicasReturnsOnCall[len(fake.updateReplicasArgsForCall)]
	fake.updateReplicasArgsForCall = append(fake.updateReplicasArgsForCall, struct {
		arg1 interface{}
		arg2 string
		arg3 string
		arg4 int32
	}{arg1, arg2, arg3, arg4})
	stub := fake.UpdateReplicasStub
	fakeReturns := fake.updateReplicasReturns
	fake.recordInvocation("UpdateReplicas", []interface{}{arg1, arg2, arg3, arg4})
	fake.updateReplicasMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ClusterClient) UpdateReplicasCallCount() int {
	fake.updateReplicasMutex.RLock()
	defer fake.updateReplicasMutex.RUnlock()
	return len(fake.updateReplicasArgsForCall)
}

func (fake *ClusterClient) UpdateReplicasCalls(stub func(interface{}, string, string, int32) error) {
	fake.updateReplicasMutex.Lock()
	defer fake.updateReplicasMutex.Unlock()
	fake.UpdateReplicasStub = stub
}

func (fake *ClusterClient) UpdateReplicasArgsForCall(i int) (interface{}, string, string, int32) {
	fake.updateReplicasMutex.RLock()
	defer fake.updateReplicasMutex.RUnlock()
	argsForCall := fake.updateReplicasArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *ClusterClient) UpdateReplicasReturns(result1 error) {
	fake.updateReplicasMutex.Lock()
	defer fake.updateReplicasMutex.Unlock()
	fake.UpdateReplicasStub = nil
	fake.updateReplicasReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) UpdateReplicasReturnsOnCall(i int, result1 error) {
	fake.updateReplicasMutex.Lock()
	defer fake.updateReplicasMutex.Unlock()
	fake.UpdateReplicasStub = nil
	if fake.updateReplicasReturnsOnCall == nil {
		fake.updateReplicasReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateReplicasReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) UpdateResource(arg1 interface{}, arg2 string, arg3 string, arg4 ...client.UpdateOption) error {
	fake.updateResourceMutex.Lock()
	ret, specificReturn := fake.updateResourceReturnsOnCall[len(fake.updateResourceArgsForCall)]
	fake.updateResourceArgsForCall = append(fake.updateResourceArgsForCall, struct {
		arg1 interface{}
		arg2 string
		arg3 string
		arg4 []client.UpdateOption
	}{arg1, arg2, arg3, arg4})
	stub := fake.UpdateResourceStub
	fakeReturns := fake.updateResourceReturns
	fake.recordInvocation("UpdateResource", []interface{}{arg1, arg2, arg3, arg4})
	fake.updateResourceMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ClusterClient) UpdateResourceCallCount() int {
	fake.updateResourceMutex.RLock()
	defer fake.updateResourceMutex.RUnlock()
	return len(fake.updateResourceArgsForCall)
}

func (fake *ClusterClient) UpdateResourceCalls(stub func(interface{}, string, string, ...client.UpdateOption) error) {
	fake.updateResourceMutex.Lock()
	defer fake.updateResourceMutex.Unlock()
	fake.UpdateResourceStub = stub
}

func (fake *ClusterClient) UpdateResourceArgsForCall(i int) (interface{}, string, string, []client.UpdateOption) {
	fake.updateResourceMutex.RLock()
	defer fake.updateResourceMutex.RUnlock()
	argsForCall := fake.updateResourceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *ClusterClient) UpdateResourceReturns(result1 error) {
	fake.updateResourceMutex.Lock()
	defer fake.updateResourceMutex.Unlock()
	fake.UpdateResourceStub = nil
	fake.updateResourceReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) UpdateResourceReturnsOnCall(i int, result1 error) {
	fake.updateResourceMutex.Lock()
	defer fake.updateResourceMutex.Unlock()
	fake.UpdateResourceStub = nil
	if fake.updateResourceReturnsOnCall == nil {
		fake.updateResourceReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateResourceReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) UpdateResourceWithPolling(arg1 interface{}, arg2 string, arg3 string, arg4 *clusterclient.PollOptions, arg5 ...client.UpdateOption) error {
	fake.updateResourceWithPollingMutex.Lock()
	ret, specificReturn := fake.updateResourceWithPollingReturnsOnCall[len(fake.updateResourceWithPollingArgsForCall)]
	fake.updateResourceWithPollingArgsForCall = append(fake.updateResourceWithPollingArgsForCall, struct {
		arg1 interface{}
		arg2 string
		arg3 string
		arg4 *clusterclient.PollOptions
		arg5 []client.UpdateOption
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.UpdateResourceWithPollingStub
	fakeReturns := fake.updateResourceWithPollingReturns
	fake.recordInvocation("UpdateResourceWithPolling", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.updateResourceWithPollingMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4, arg5...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ClusterClient) UpdateResourceWithPollingCallCount() int {
	fake.updateResourceWithPollingMutex.RLock()
	defer fake.updateResourceWithPollingMutex.RUnlock()
	return len(fake.updateResourceWithPollingArgsForCall)
}

func (fake *ClusterClient) UpdateResourceWithPollingCalls(stub func(interface{}, string, string, *clusterclient.PollOptions, ...client.UpdateOption) error) {
	fake.updateResourceWithPollingMutex.Lock()
	defer fake.updateResourceWithPollingMutex.Unlock()
	fake.UpdateResourceWithPollingStub = stub
}

func (fake *ClusterClient) UpdateResourceWithPollingArgsForCall(i int) (interface{}, string, string, *clusterclient.PollOptions, []client.UpdateOption) {
	fake.updateResourceWithPollingMutex.RLock()
	defer fake.updateResourceWithPollingMutex.RUnlock()
	argsForCall := fake.updateResourceWithPollingArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *ClusterClient) UpdateResourceWithPollingReturns(result1 error) {
	fake.updateResourceWithPollingMutex.Lock()
	defer fake.updateResourceWithPollingMutex.Unlock()
	fake.UpdateResourceWithPollingStub = nil
	fake.updateResourceWithPollingReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) UpdateResourceWithPollingReturnsOnCall(i int, result1 error) {
	fake.updateResourceWithPollingMutex.Lock()
	defer fake.updateResourceWithPollingMutex.Unlock()
	fake.UpdateResourceWithPollingStub = nil
	if fake.updateResourceWithPollingReturnsOnCall == nil {
		fake.updateResourceWithPollingReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateResourceWithPollingReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) UpdateVsphereCloudProviderCredentialsSecret(arg1 string, arg2 string, arg3 string, arg4 string) error {
	fake.updateVsphereCloudProviderCredentialsSecretMutex.Lock()
	ret, specificReturn := fake.updateVsphereCloudProviderCredentialsSecretReturnsOnCall[len(fake.updateVsphereCloudProviderCredentialsSecretArgsForCall)]
	fake.updateVsphereCloudProviderCredentialsSecretArgsForCall = append(fake.updateVsphereCloudProviderCredentialsSecretArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.UpdateVsphereCloudProviderCredentialsSecretStub
	fakeReturns := fake.updateVsphereCloudProviderCredentialsSecretReturns
	fake.recordInvocation("UpdateVsphereCloudProviderCredentialsSecret", []interface{}{arg1, arg2, arg3, arg4})
	fake.updateVsphereCloudProviderCredentialsSecretMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ClusterClient) UpdateVsphereCloudProviderCredentialsSecretCallCount() int {
	fake.updateVsphereCloudProviderCredentialsSecretMutex.RLock()
	defer fake.updateVsphereCloudProviderCredentialsSecretMutex.RUnlock()
	return len(fake.updateVsphereCloudProviderCredentialsSecretArgsForCall)
}

func (fake *ClusterClient) UpdateVsphereCloudProviderCredentialsSecretCalls(stub func(string, string, string, string) error) {
	fake.updateVsphereCloudProviderCredentialsSecretMutex.Lock()
	defer fake.updateVsphereCloudProviderCredentialsSecretMutex.Unlock()
	fake.UpdateVsphereCloudProviderCredentialsSecretStub = stub
}

func (fake *ClusterClient) UpdateVsphereCloudProviderCredentialsSecretArgsForCall(i int) (string, string, string, string) {
	fake.updateVsphereCloudProviderCredentialsSecretMutex.RLock()
	defer fake.updateVsphereCloudProviderCredentialsSecretMutex.RUnlock()
	argsForCall := fake.updateVsphereCloudProviderCredentialsSecretArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *ClusterClient) UpdateVsphereCloudProviderCredentialsSecretReturns(result1 error) {
	fake.updateVsphereCloudProviderCredentialsSecretMutex.Lock()
	defer fake.updateVsphereCloudProviderCredentialsSecretMutex.Unlock()
	fake.UpdateVsphereCloudProviderCredentialsSecretStub = nil
	fake.updateVsphereCloudProviderCredentialsSecretReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) UpdateVsphereCloudProviderCredentialsSecretReturnsOnCall(i int, result1 error) {
	fake.updateVsphereCloudProviderCredentialsSecretMutex.Lock()
	defer fake.updateVsphereCloudProviderCredentialsSecretMutex.Unlock()
	fake.UpdateVsphereCloudProviderCredentialsSecretStub = nil
	if fake.updateVsphereCloudProviderCredentialsSecretReturnsOnCall == nil {
		fake.updateVsphereCloudProviderCredentialsSecretReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateVsphereCloudProviderCredentialsSecretReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) UpdateVsphereCsiConfigSecret(arg1 string, arg2 string, arg3 string, arg4 string) error {
	fake.updateVsphereCsiConfigSecretMutex.Lock()
	ret, specificReturn := fake.updateVsphereCsiConfigSecretReturnsOnCall[len(fake.updateVsphereCsiConfigSecretArgsForCall)]
	fake.updateVsphereCsiConfigSecretArgsForCall = append(fake.updateVsphereCsiConfigSecretArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.UpdateVsphereCsiConfigSecretStub
	fakeReturns := fake.updateVsphereCsiConfigSecretReturns
	fake.recordInvocation("UpdateVsphereCsiConfigSecret", []interface{}{arg1, arg2, arg3, arg4})
	fake.updateVsphereCsiConfigSecretMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ClusterClient) UpdateVsphereCsiConfigSecretCallCount() int {
	fake.updateVsphereCsiConfigSecretMutex.RLock()
	defer fake.updateVsphereCsiConfigSecretMutex.RUnlock()
	return len(fake.updateVsphereCsiConfigSecretArgsForCall)
}

func (fake *ClusterClient) UpdateVsphereCsiConfigSecretCalls(stub func(string, string, string, string) error) {
	fake.updateVsphereCsiConfigSecretMutex.Lock()
	defer fake.updateVsphereCsiConfigSecretMutex.Unlock()
	fake.UpdateVsphereCsiConfigSecretStub = stub
}

func (fake *ClusterClient) UpdateVsphereCsiConfigSecretArgsForCall(i int) (string, string, string, string) {
	fake.updateVsphereCsiConfigSecretMutex.RLock()
	defer fake.updateVsphereCsiConfigSecretMutex.RUnlock()
	argsForCall := fake.updateVsphereCsiConfigSecretArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *ClusterClient) UpdateVsphereCsiConfigSecretReturns(result1 error) {
	fake.updateVsphereCsiConfigSecretMutex.Lock()
	defer fake.updateVsphereCsiConfigSecretMutex.Unlock()
	fake.UpdateVsphereCsiConfigSecretStub = nil
	fake.updateVsphereCsiConfigSecretReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) UpdateVsphereCsiConfigSecretReturnsOnCall(i int, result1 error) {
	fake.updateVsphereCsiConfigSecretMutex.Lock()
	defer fake.updateVsphereCsiConfigSecretMutex.Unlock()
	fake.UpdateVsphereCsiConfigSecretStub = nil
	if fake.updateVsphereCsiConfigSecretReturnsOnCall == nil {
		fake.updateVsphereCsiConfigSecretReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateVsphereCsiConfigSecretReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) UpdateVsphereIdentityRefSecret(arg1 string, arg2 string, arg3 string, arg4 string) error {
	fake.updateVsphereIdentityRefSecretMutex.Lock()
	ret, specificReturn := fake.updateVsphereIdentityRefSecretReturnsOnCall[len(fake.updateVsphereIdentityRefSecretArgsForCall)]
	fake.updateVsphereIdentityRefSecretArgsForCall = append(fake.updateVsphereIdentityRefSecretArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 string
	}{arg1, arg2, arg3, arg4})
	stub := fake.UpdateVsphereIdentityRefSecretStub
	fakeReturns := fake.updateVsphereIdentityRefSecretReturns
	fake.recordInvocation("UpdateVsphereIdentityRefSecret", []interface{}{arg1, arg2, arg3, arg4})
	fake.updateVsphereIdentityRefSecretMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ClusterClient) UpdateVsphereIdentityRefSecretCallCount() int {
	fake.updateVsphereIdentityRefSecretMutex.RLock()
	defer fake.updateVsphereIdentityRefSecretMutex.RUnlock()
	return len(fake.updateVsphereIdentityRefSecretArgsForCall)
}

func (fake *ClusterClient) UpdateVsphereIdentityRefSecretCalls(stub func(string, string, string, string) error) {
	fake.updateVsphereIdentityRefSecretMutex.Lock()
	defer fake.updateVsphereIdentityRefSecretMutex.Unlock()
	fake.UpdateVsphereIdentityRefSecretStub = stub
}

func (fake *ClusterClient) UpdateVsphereIdentityRefSecretArgsForCall(i int) (string, string, string, string) {
	fake.updateVsphereIdentityRefSecretMutex.RLock()
	defer fake.updateVsphereIdentityRefSecretMutex.RUnlock()
	argsForCall := fake.updateVsphereIdentityRefSecretArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *ClusterClient) UpdateVsphereIdentityRefSecretReturns(result1 error) {
	fake.updateVsphereIdentityRefSecretMutex.Lock()
	defer fake.updateVsphereIdentityRefSecretMutex.Unlock()
	fake.UpdateVsphereIdentityRefSecretStub = nil
	fake.updateVsphereIdentityRefSecretReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) UpdateVsphereIdentityRefSecretReturnsOnCall(i int, result1 error) {
	fake.updateVsphereIdentityRefSecretMutex.Lock()
	defer fake.updateVsphereIdentityRefSecretMutex.Unlock()
	fake.UpdateVsphereIdentityRefSecretStub = nil
	if fake.updateVsphereIdentityRefSecretReturnsOnCall == nil {
		fake.updateVsphereIdentityRefSecretReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.updateVsphereIdentityRefSecretReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) UseContext(arg1 string) error {
	fake.useContextMutex.Lock()
	ret, specificReturn := fake.useContextReturnsOnCall[len(fake.useContextArgsForCall)]
	fake.useContextArgsForCall = append(fake.useContextArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.UseContextStub
	fakeReturns := fake.useContextReturns
	fake.recordInvocation("UseContext", []interface{}{arg1})
	fake.useContextMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ClusterClient) UseContextCallCount() int {
	fake.useContextMutex.RLock()
	defer fake.useContextMutex.RUnlock()
	return len(fake.useContextArgsForCall)
}

func (fake *ClusterClient) UseContextCalls(stub func(string) error) {
	fake.useContextMutex.Lock()
	defer fake.useContextMutex.Unlock()
	fake.UseContextStub = stub
}

func (fake *ClusterClient) UseContextArgsForCall(i int) string {
	fake.useContextMutex.RLock()
	defer fake.useContextMutex.RUnlock()
	argsForCall := fake.useContextArgsForCall[i]
	return argsForCall.arg1
}

func (fake *ClusterClient) UseContextReturns(result1 error) {
	fake.useContextMutex.Lock()
	defer fake.useContextMutex.Unlock()
	fake.UseContextStub = nil
	fake.useContextReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) UseContextReturnsOnCall(i int, result1 error) {
	fake.useContextMutex.Lock()
	defer fake.useContextMutex.Unlock()
	fake.UseContextStub = nil
	if fake.useContextReturnsOnCall == nil {
		fake.useContextReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.useContextReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) VerifyCLIPluginCRD() (bool, error) {
	fake.verifyCLIPluginCRDMutex.Lock()
	ret, specificReturn := fake.verifyCLIPluginCRDReturnsOnCall[len(fake.verifyCLIPluginCRDArgsForCall)]
	fake.verifyCLIPluginCRDArgsForCall = append(fake.verifyCLIPluginCRDArgsForCall, struct {
	}{})
	stub := fake.VerifyCLIPluginCRDStub
	fakeReturns := fake.verifyCLIPluginCRDReturns
	fake.recordInvocation("VerifyCLIPluginCRD", []interface{}{})
	fake.verifyCLIPluginCRDMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ClusterClient) VerifyCLIPluginCRDCallCount() int {
	fake.verifyCLIPluginCRDMutex.RLock()
	defer fake.verifyCLIPluginCRDMutex.RUnlock()
	return len(fake.verifyCLIPluginCRDArgsForCall)
}

func (fake *ClusterClient) VerifyCLIPluginCRDCalls(stub func() (bool, error)) {
	fake.verifyCLIPluginCRDMutex.Lock()
	defer fake.verifyCLIPluginCRDMutex.Unlock()
	fake.VerifyCLIPluginCRDStub = stub
}

func (fake *ClusterClient) VerifyCLIPluginCRDReturns(result1 bool, result2 error) {
	fake.verifyCLIPluginCRDMutex.Lock()
	defer fake.verifyCLIPluginCRDMutex.Unlock()
	fake.VerifyCLIPluginCRDStub = nil
	fake.verifyCLIPluginCRDReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) VerifyCLIPluginCRDReturnsOnCall(i int, result1 bool, result2 error) {
	fake.verifyCLIPluginCRDMutex.Lock()
	defer fake.verifyCLIPluginCRDMutex.Unlock()
	fake.VerifyCLIPluginCRDStub = nil
	if fake.verifyCLIPluginCRDReturnsOnCall == nil {
		fake.verifyCLIPluginCRDReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.verifyCLIPluginCRDReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) VerifyExistenceOfCRD(arg1 string, arg2 string) (bool, error) {
	fake.verifyExistenceOfCRDMutex.Lock()
	ret, specificReturn := fake.verifyExistenceOfCRDReturnsOnCall[len(fake.verifyExistenceOfCRDArgsForCall)]
	fake.verifyExistenceOfCRDArgsForCall = append(fake.verifyExistenceOfCRDArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.VerifyExistenceOfCRDStub
	fakeReturns := fake.verifyExistenceOfCRDReturns
	fake.recordInvocation("VerifyExistenceOfCRD", []interface{}{arg1, arg2})
	fake.verifyExistenceOfCRDMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *ClusterClient) VerifyExistenceOfCRDCallCount() int {
	fake.verifyExistenceOfCRDMutex.RLock()
	defer fake.verifyExistenceOfCRDMutex.RUnlock()
	return len(fake.verifyExistenceOfCRDArgsForCall)
}

func (fake *ClusterClient) VerifyExistenceOfCRDCalls(stub func(string, string) (bool, error)) {
	fake.verifyExistenceOfCRDMutex.Lock()
	defer fake.verifyExistenceOfCRDMutex.Unlock()
	fake.VerifyExistenceOfCRDStub = stub
}

func (fake *ClusterClient) VerifyExistenceOfCRDArgsForCall(i int) (string, string) {
	fake.verifyExistenceOfCRDMutex.RLock()
	defer fake.verifyExistenceOfCRDMutex.RUnlock()
	argsForCall := fake.verifyExistenceOfCRDArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ClusterClient) VerifyExistenceOfCRDReturns(result1 bool, result2 error) {
	fake.verifyExistenceOfCRDMutex.Lock()
	defer fake.verifyExistenceOfCRDMutex.Unlock()
	fake.VerifyExistenceOfCRDStub = nil
	fake.verifyExistenceOfCRDReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) VerifyExistenceOfCRDReturnsOnCall(i int, result1 bool, result2 error) {
	fake.verifyExistenceOfCRDMutex.Lock()
	defer fake.verifyExistenceOfCRDMutex.Unlock()
	fake.VerifyExistenceOfCRDStub = nil
	if fake.verifyExistenceOfCRDReturnsOnCall == nil {
		fake.verifyExistenceOfCRDReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.verifyExistenceOfCRDReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *ClusterClient) WaitForAVIResourceCleanUp(arg1 string, arg2 string) error {
	fake.waitForAVIResourceCleanUpMutex.Lock()
	ret, specificReturn := fake.waitForAVIResourceCleanUpReturnsOnCall[len(fake.waitForAVIResourceCleanUpArgsForCall)]
	fake.waitForAVIResourceCleanUpArgsForCall = append(fake.waitForAVIResourceCleanUpArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.WaitForAVIResourceCleanUpStub
	fakeReturns := fake.waitForAVIResourceCleanUpReturns
	fake.recordInvocation("WaitForAVIResourceCleanUp", []interface{}{arg1, arg2})
	fake.waitForAVIResourceCleanUpMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ClusterClient) WaitForAVIResourceCleanUpCallCount() int {
	fake.waitForAVIResourceCleanUpMutex.RLock()
	defer fake.waitForAVIResourceCleanUpMutex.RUnlock()
	return len(fake.waitForAVIResourceCleanUpArgsForCall)
}

func (fake *ClusterClient) WaitForAVIResourceCleanUpCalls(stub func(string, string) error) {
	fake.waitForAVIResourceCleanUpMutex.Lock()
	defer fake.waitForAVIResourceCleanUpMutex.Unlock()
	fake.WaitForAVIResourceCleanUpStub = stub
}

func (fake *ClusterClient) WaitForAVIResourceCleanUpArgsForCall(i int) (string, string) {
	fake.waitForAVIResourceCleanUpMutex.RLock()
	defer fake.waitForAVIResourceCleanUpMutex.RUnlock()
	argsForCall := fake.waitForAVIResourceCleanUpArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ClusterClient) WaitForAVIResourceCleanUpReturns(result1 error) {
	fake.waitForAVIResourceCleanUpMutex.Lock()
	defer fake.waitForAVIResourceCleanUpMutex.Unlock()
	fake.WaitForAVIResourceCleanUpStub = nil
	fake.waitForAVIResourceCleanUpReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) WaitForAVIResourceCleanUpReturnsOnCall(i int, result1 error) {
	fake.waitForAVIResourceCleanUpMutex.Lock()
	defer fake.waitForAVIResourceCleanUpMutex.Unlock()
	fake.WaitForAVIResourceCleanUpStub = nil
	if fake.waitForAVIResourceCleanUpReturnsOnCall == nil {
		fake.waitForAVIResourceCleanUpReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitForAVIResourceCleanUpReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) WaitForAutoscalerDeployment(arg1 string, arg2 string) error {
	fake.waitForAutoscalerDeploymentMutex.Lock()
	ret, specificReturn := fake.waitForAutoscalerDeploymentReturnsOnCall[len(fake.waitForAutoscalerDeploymentArgsForCall)]
	fake.waitForAutoscalerDeploymentArgsForCall = append(fake.waitForAutoscalerDeploymentArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.WaitForAutoscalerDeploymentStub
	fakeReturns := fake.waitForAutoscalerDeploymentReturns
	fake.recordInvocation("WaitForAutoscalerDeployment", []interface{}{arg1, arg2})
	fake.waitForAutoscalerDeploymentMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ClusterClient) WaitForAutoscalerDeploymentCallCount() int {
	fake.waitForAutoscalerDeploymentMutex.RLock()
	defer fake.waitForAutoscalerDeploymentMutex.RUnlock()
	return len(fake.waitForAutoscalerDeploymentArgsForCall)
}

func (fake *ClusterClient) WaitForAutoscalerDeploymentCalls(stub func(string, string) error) {
	fake.waitForAutoscalerDeploymentMutex.Lock()
	defer fake.waitForAutoscalerDeploymentMutex.Unlock()
	fake.WaitForAutoscalerDeploymentStub = stub
}

func (fake *ClusterClient) WaitForAutoscalerDeploymentArgsForCall(i int) (string, string) {
	fake.waitForAutoscalerDeploymentMutex.RLock()
	defer fake.waitForAutoscalerDeploymentMutex.RUnlock()
	argsForCall := fake.waitForAutoscalerDeploymentArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ClusterClient) WaitForAutoscalerDeploymentReturns(result1 error) {
	fake.waitForAutoscalerDeploymentMutex.Lock()
	defer fake.waitForAutoscalerDeploymentMutex.Unlock()
	fake.WaitForAutoscalerDeploymentStub = nil
	fake.waitForAutoscalerDeploymentReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) WaitForAutoscalerDeploymentReturnsOnCall(i int, result1 error) {
	fake.waitForAutoscalerDeploymentMutex.Lock()
	defer fake.waitForAutoscalerDeploymentMutex.Unlock()
	fake.WaitForAutoscalerDeploymentStub = nil
	if fake.waitForAutoscalerDeploymentReturnsOnCall == nil {
		fake.waitForAutoscalerDeploymentReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitForAutoscalerDeploymentReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) WaitForClusterDeletion(arg1 string, arg2 string) error {
	fake.waitForClusterDeletionMutex.Lock()
	ret, specificReturn := fake.waitForClusterDeletionReturnsOnCall[len(fake.waitForClusterDeletionArgsForCall)]
	fake.waitForClusterDeletionArgsForCall = append(fake.waitForClusterDeletionArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.WaitForClusterDeletionStub
	fakeReturns := fake.waitForClusterDeletionReturns
	fake.recordInvocation("WaitForClusterDeletion", []interface{}{arg1, arg2})
	fake.waitForClusterDeletionMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ClusterClient) WaitForClusterDeletionCallCount() int {
	fake.waitForClusterDeletionMutex.RLock()
	defer fake.waitForClusterDeletionMutex.RUnlock()
	return len(fake.waitForClusterDeletionArgsForCall)
}

func (fake *ClusterClient) WaitForClusterDeletionCalls(stub func(string, string) error) {
	fake.waitForClusterDeletionMutex.Lock()
	defer fake.waitForClusterDeletionMutex.Unlock()
	fake.WaitForClusterDeletionStub = stub
}

func (fake *ClusterClient) WaitForClusterDeletionArgsForCall(i int) (string, string) {
	fake.waitForClusterDeletionMutex.RLock()
	defer fake.waitForClusterDeletionMutex.RUnlock()
	argsForCall := fake.waitForClusterDeletionArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ClusterClient) WaitForClusterDeletionReturns(result1 error) {
	fake.waitForClusterDeletionMutex.Lock()
	defer fake.waitForClusterDeletionMutex.Unlock()
	fake.WaitForClusterDeletionStub = nil
	fake.waitForClusterDeletionReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) WaitForClusterDeletionReturnsOnCall(i int, result1 error) {
	fake.waitForClusterDeletionMutex.Lock()
	defer fake.waitForClusterDeletionMutex.Unlock()
	fake.WaitForClusterDeletionStub = nil
	if fake.waitForClusterDeletionReturnsOnCall == nil {
		fake.waitForClusterDeletionReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitForClusterDeletionReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) WaitForClusterInitialized(arg1 string, arg2 string) error {
	fake.waitForClusterInitializedMutex.Lock()
	ret, specificReturn := fake.waitForClusterInitializedReturnsOnCall[len(fake.waitForClusterInitializedArgsForCall)]
	fake.waitForClusterInitializedArgsForCall = append(fake.waitForClusterInitializedArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.WaitForClusterInitializedStub
	fakeReturns := fake.waitForClusterInitializedReturns
	fake.recordInvocation("WaitForClusterInitialized", []interface{}{arg1, arg2})
	fake.waitForClusterInitializedMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ClusterClient) WaitForClusterInitializedCallCount() int {
	fake.waitForClusterInitializedMutex.RLock()
	defer fake.waitForClusterInitializedMutex.RUnlock()
	return len(fake.waitForClusterInitializedArgsForCall)
}

func (fake *ClusterClient) WaitForClusterInitializedCalls(stub func(string, string) error) {
	fake.waitForClusterInitializedMutex.Lock()
	defer fake.waitForClusterInitializedMutex.Unlock()
	fake.WaitForClusterInitializedStub = stub
}

func (fake *ClusterClient) WaitForClusterInitializedArgsForCall(i int) (string, string) {
	fake.waitForClusterInitializedMutex.RLock()
	defer fake.waitForClusterInitializedMutex.RUnlock()
	argsForCall := fake.waitForClusterInitializedArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ClusterClient) WaitForClusterInitializedReturns(result1 error) {
	fake.waitForClusterInitializedMutex.Lock()
	defer fake.waitForClusterInitializedMutex.Unlock()
	fake.WaitForClusterInitializedStub = nil
	fake.waitForClusterInitializedReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) WaitForClusterInitializedReturnsOnCall(i int, result1 error) {
	fake.waitForClusterInitializedMutex.Lock()
	defer fake.waitForClusterInitializedMutex.Unlock()
	fake.WaitForClusterInitializedStub = nil
	if fake.waitForClusterInitializedReturnsOnCall == nil {
		fake.waitForClusterInitializedReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitForClusterInitializedReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) WaitForClusterReady(arg1 string, arg2 string, arg3 bool) error {
	fake.waitForClusterReadyMutex.Lock()
	ret, specificReturn := fake.waitForClusterReadyReturnsOnCall[len(fake.waitForClusterReadyArgsForCall)]
	fake.waitForClusterReadyArgsForCall = append(fake.waitForClusterReadyArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 bool
	}{arg1, arg2, arg3})
	stub := fake.WaitForClusterReadyStub
	fakeReturns := fake.waitForClusterReadyReturns
	fake.recordInvocation("WaitForClusterReady", []interface{}{arg1, arg2, arg3})
	fake.waitForClusterReadyMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ClusterClient) WaitForClusterReadyCallCount() int {
	fake.waitForClusterReadyMutex.RLock()
	defer fake.waitForClusterReadyMutex.RUnlock()
	return len(fake.waitForClusterReadyArgsForCall)
}

func (fake *ClusterClient) WaitForClusterReadyCalls(stub func(string, string, bool) error) {
	fake.waitForClusterReadyMutex.Lock()
	defer fake.waitForClusterReadyMutex.Unlock()
	fake.WaitForClusterReadyStub = stub
}

func (fake *ClusterClient) WaitForClusterReadyArgsForCall(i int) (string, string, bool) {
	fake.waitForClusterReadyMutex.RLock()
	defer fake.waitForClusterReadyMutex.RUnlock()
	argsForCall := fake.waitForClusterReadyArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *ClusterClient) WaitForClusterReadyReturns(result1 error) {
	fake.waitForClusterReadyMutex.Lock()
	defer fake.waitForClusterReadyMutex.Unlock()
	fake.WaitForClusterReadyStub = nil
	fake.waitForClusterReadyReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) WaitForClusterReadyReturnsOnCall(i int, result1 error) {
	fake.waitForClusterReadyMutex.Lock()
	defer fake.waitForClusterReadyMutex.Unlock()
	fake.WaitForClusterReadyStub = nil
	if fake.waitForClusterReadyReturnsOnCall == nil {
		fake.waitForClusterReadyReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitForClusterReadyReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) WaitForControlPlaneAvailable(arg1 string, arg2 string) error {
	fake.waitForControlPlaneAvailableMutex.Lock()
	ret, specificReturn := fake.waitForControlPlaneAvailableReturnsOnCall[len(fake.waitForControlPlaneAvailableArgsForCall)]
	fake.waitForControlPlaneAvailableArgsForCall = append(fake.waitForControlPlaneAvailableArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.WaitForControlPlaneAvailableStub
	fakeReturns := fake.waitForControlPlaneAvailableReturns
	fake.recordInvocation("WaitForControlPlaneAvailable", []interface{}{arg1, arg2})
	fake.waitForControlPlaneAvailableMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ClusterClient) WaitForControlPlaneAvailableCallCount() int {
	fake.waitForControlPlaneAvailableMutex.RLock()
	defer fake.waitForControlPlaneAvailableMutex.RUnlock()
	return len(fake.waitForControlPlaneAvailableArgsForCall)
}

func (fake *ClusterClient) WaitForControlPlaneAvailableCalls(stub func(string, string) error) {
	fake.waitForControlPlaneAvailableMutex.Lock()
	defer fake.waitForControlPlaneAvailableMutex.Unlock()
	fake.WaitForControlPlaneAvailableStub = stub
}

func (fake *ClusterClient) WaitForControlPlaneAvailableArgsForCall(i int) (string, string) {
	fake.waitForControlPlaneAvailableMutex.RLock()
	defer fake.waitForControlPlaneAvailableMutex.RUnlock()
	argsForCall := fake.waitForControlPlaneAvailableArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ClusterClient) WaitForControlPlaneAvailableReturns(result1 error) {
	fake.waitForControlPlaneAvailableMutex.Lock()
	defer fake.waitForControlPlaneAvailableMutex.Unlock()
	fake.WaitForControlPlaneAvailableStub = nil
	fake.waitForControlPlaneAvailableReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) WaitForControlPlaneAvailableReturnsOnCall(i int, result1 error) {
	fake.waitForControlPlaneAvailableMutex.Lock()
	defer fake.waitForControlPlaneAvailableMutex.Unlock()
	fake.WaitForControlPlaneAvailableStub = nil
	if fake.waitForControlPlaneAvailableReturnsOnCall == nil {
		fake.waitForControlPlaneAvailableReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitForControlPlaneAvailableReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) WaitForDeployment(arg1 string, arg2 string) error {
	fake.waitForDeploymentMutex.Lock()
	ret, specificReturn := fake.waitForDeploymentReturnsOnCall[len(fake.waitForDeploymentArgsForCall)]
	fake.waitForDeploymentArgsForCall = append(fake.waitForDeploymentArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.WaitForDeploymentStub
	fakeReturns := fake.waitForDeploymentReturns
	fake.recordInvocation("WaitForDeployment", []interface{}{arg1, arg2})
	fake.waitForDeploymentMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ClusterClient) WaitForDeploymentCallCount() int {
	fake.waitForDeploymentMutex.RLock()
	defer fake.waitForDeploymentMutex.RUnlock()
	return len(fake.waitForDeploymentArgsForCall)
}

func (fake *ClusterClient) WaitForDeploymentCalls(stub func(string, string) error) {
	fake.waitForDeploymentMutex.Lock()
	defer fake.waitForDeploymentMutex.Unlock()
	fake.WaitForDeploymentStub = stub
}

func (fake *ClusterClient) WaitForDeploymentArgsForCall(i int) (string, string) {
	fake.waitForDeploymentMutex.RLock()
	defer fake.waitForDeploymentMutex.RUnlock()
	argsForCall := fake.waitForDeploymentArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ClusterClient) WaitForDeploymentReturns(result1 error) {
	fake.waitForDeploymentMutex.Lock()
	defer fake.waitForDeploymentMutex.Unlock()
	fake.WaitForDeploymentStub = nil
	fake.waitForDeploymentReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) WaitForDeploymentReturnsOnCall(i int, result1 error) {
	fake.waitForDeploymentMutex.Lock()
	defer fake.waitForDeploymentMutex.Unlock()
	fake.WaitForDeploymentStub = nil
	if fake.waitForDeploymentReturnsOnCall == nil {
		fake.waitForDeploymentReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitForDeploymentReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) WaitForPacificCluster(arg1 string, arg2 string) error {
	fake.waitForPacificClusterMutex.Lock()
	ret, specificReturn := fake.waitForPacificClusterReturnsOnCall[len(fake.waitForPacificClusterArgsForCall)]
	fake.waitForPacificClusterArgsForCall = append(fake.waitForPacificClusterArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.WaitForPacificClusterStub
	fakeReturns := fake.waitForPacificClusterReturns
	fake.recordInvocation("WaitForPacificCluster", []interface{}{arg1, arg2})
	fake.waitForPacificClusterMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ClusterClient) WaitForPacificClusterCallCount() int {
	fake.waitForPacificClusterMutex.RLock()
	defer fake.waitForPacificClusterMutex.RUnlock()
	return len(fake.waitForPacificClusterArgsForCall)
}

func (fake *ClusterClient) WaitForPacificClusterCalls(stub func(string, string) error) {
	fake.waitForPacificClusterMutex.Lock()
	defer fake.waitForPacificClusterMutex.Unlock()
	fake.WaitForPacificClusterStub = stub
}

func (fake *ClusterClient) WaitForPacificClusterArgsForCall(i int) (string, string) {
	fake.waitForPacificClusterMutex.RLock()
	defer fake.waitForPacificClusterMutex.RUnlock()
	argsForCall := fake.waitForPacificClusterArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *ClusterClient) WaitForPacificClusterReturns(result1 error) {
	fake.waitForPacificClusterMutex.Lock()
	defer fake.waitForPacificClusterMutex.Unlock()
	fake.WaitForPacificClusterStub = nil
	fake.waitForPacificClusterReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) WaitForPacificClusterReturnsOnCall(i int, result1 error) {
	fake.waitForPacificClusterMutex.Lock()
	defer fake.waitForPacificClusterMutex.Unlock()
	fake.WaitForPacificClusterStub = nil
	if fake.waitForPacificClusterReturnsOnCall == nil {
		fake.waitForPacificClusterReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitForPacificClusterReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) WaitForPacificClusterK8sVersionUpdate(arg1 string, arg2 string, arg3 string) error {
	fake.waitForPacificClusterK8sVersionUpdateMutex.Lock()
	ret, specificReturn := fake.waitForPacificClusterK8sVersionUpdateReturnsOnCall[len(fake.waitForPacificClusterK8sVersionUpdateArgsForCall)]
	fake.waitForPacificClusterK8sVersionUpdateArgsForCall = append(fake.waitForPacificClusterK8sVersionUpdateArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.WaitForPacificClusterK8sVersionUpdateStub
	fakeReturns := fake.waitForPacificClusterK8sVersionUpdateReturns
	fake.recordInvocation("WaitForPacificClusterK8sVersionUpdate", []interface{}{arg1, arg2, arg3})
	fake.waitForPacificClusterK8sVersionUpdateMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ClusterClient) WaitForPacificClusterK8sVersionUpdateCallCount() int {
	fake.waitForPacificClusterK8sVersionUpdateMutex.RLock()
	defer fake.waitForPacificClusterK8sVersionUpdateMutex.RUnlock()
	return len(fake.waitForPacificClusterK8sVersionUpdateArgsForCall)
}

func (fake *ClusterClient) WaitForPacificClusterK8sVersionUpdateCalls(stub func(string, string, string) error) {
	fake.waitForPacificClusterK8sVersionUpdateMutex.Lock()
	defer fake.waitForPacificClusterK8sVersionUpdateMutex.Unlock()
	fake.WaitForPacificClusterK8sVersionUpdateStub = stub
}

func (fake *ClusterClient) WaitForPacificClusterK8sVersionUpdateArgsForCall(i int) (string, string, string) {
	fake.waitForPacificClusterK8sVersionUpdateMutex.RLock()
	defer fake.waitForPacificClusterK8sVersionUpdateMutex.RUnlock()
	argsForCall := fake.waitForPacificClusterK8sVersionUpdateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *ClusterClient) WaitForPacificClusterK8sVersionUpdateReturns(result1 error) {
	fake.waitForPacificClusterK8sVersionUpdateMutex.Lock()
	defer fake.waitForPacificClusterK8sVersionUpdateMutex.Unlock()
	fake.WaitForPacificClusterK8sVersionUpdateStub = nil
	fake.waitForPacificClusterK8sVersionUpdateReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) WaitForPacificClusterK8sVersionUpdateReturnsOnCall(i int, result1 error) {
	fake.waitForPacificClusterK8sVersionUpdateMutex.Lock()
	defer fake.waitForPacificClusterK8sVersionUpdateMutex.Unlock()
	fake.WaitForPacificClusterK8sVersionUpdateStub = nil
	if fake.waitForPacificClusterK8sVersionUpdateReturnsOnCall == nil {
		fake.waitForPacificClusterK8sVersionUpdateReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitForPacificClusterK8sVersionUpdateReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) WaitForPackageInstall(arg1 string, arg2 string, arg3 time.Duration) error {
	fake.waitForPackageInstallMutex.Lock()
	ret, specificReturn := fake.waitForPackageInstallReturnsOnCall[len(fake.waitForPackageInstallArgsForCall)]
	fake.waitForPackageInstallArgsForCall = append(fake.waitForPackageInstallArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 time.Duration
	}{arg1, arg2, arg3})
	stub := fake.WaitForPackageInstallStub
	fakeReturns := fake.waitForPackageInstallReturns
	fake.recordInvocation("WaitForPackageInstall", []interface{}{arg1, arg2, arg3})
	fake.waitForPackageInstallMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ClusterClient) WaitForPackageInstallCallCount() int {
	fake.waitForPackageInstallMutex.RLock()
	defer fake.waitForPackageInstallMutex.RUnlock()
	return len(fake.waitForPackageInstallArgsForCall)
}

func (fake *ClusterClient) WaitForPackageInstallCalls(stub func(string, string, time.Duration) error) {
	fake.waitForPackageInstallMutex.Lock()
	defer fake.waitForPackageInstallMutex.Unlock()
	fake.WaitForPackageInstallStub = stub
}

func (fake *ClusterClient) WaitForPackageInstallArgsForCall(i int) (string, string, time.Duration) {
	fake.waitForPackageInstallMutex.RLock()
	defer fake.waitForPackageInstallMutex.RUnlock()
	argsForCall := fake.waitForPackageInstallArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *ClusterClient) WaitForPackageInstallReturns(result1 error) {
	fake.waitForPackageInstallMutex.Lock()
	defer fake.waitForPackageInstallMutex.Unlock()
	fake.WaitForPackageInstallStub = nil
	fake.waitForPackageInstallReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) WaitForPackageInstallReturnsOnCall(i int, result1 error) {
	fake.waitForPackageInstallMutex.Lock()
	defer fake.waitForPackageInstallMutex.Unlock()
	fake.WaitForPackageInstallStub = nil
	if fake.waitForPackageInstallReturnsOnCall == nil {
		fake.waitForPackageInstallReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitForPackageInstallReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) WaitK8sVersionUpdateForCPNodes(arg1 string, arg2 string, arg3 string, arg4 clusterclient.Client) error {
	fake.waitK8sVersionUpdateForCPNodesMutex.Lock()
	ret, specificReturn := fake.waitK8sVersionUpdateForCPNodesReturnsOnCall[len(fake.waitK8sVersionUpdateForCPNodesArgsForCall)]
	fake.waitK8sVersionUpdateForCPNodesArgsForCall = append(fake.waitK8sVersionUpdateForCPNodesArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 clusterclient.Client
	}{arg1, arg2, arg3, arg4})
	stub := fake.WaitK8sVersionUpdateForCPNodesStub
	fakeReturns := fake.waitK8sVersionUpdateForCPNodesReturns
	fake.recordInvocation("WaitK8sVersionUpdateForCPNodes", []interface{}{arg1, arg2, arg3, arg4})
	fake.waitK8sVersionUpdateForCPNodesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ClusterClient) WaitK8sVersionUpdateForCPNodesCallCount() int {
	fake.waitK8sVersionUpdateForCPNodesMutex.RLock()
	defer fake.waitK8sVersionUpdateForCPNodesMutex.RUnlock()
	return len(fake.waitK8sVersionUpdateForCPNodesArgsForCall)
}

func (fake *ClusterClient) WaitK8sVersionUpdateForCPNodesCalls(stub func(string, string, string, clusterclient.Client) error) {
	fake.waitK8sVersionUpdateForCPNodesMutex.Lock()
	defer fake.waitK8sVersionUpdateForCPNodesMutex.Unlock()
	fake.WaitK8sVersionUpdateForCPNodesStub = stub
}

func (fake *ClusterClient) WaitK8sVersionUpdateForCPNodesArgsForCall(i int) (string, string, string, clusterclient.Client) {
	fake.waitK8sVersionUpdateForCPNodesMutex.RLock()
	defer fake.waitK8sVersionUpdateForCPNodesMutex.RUnlock()
	argsForCall := fake.waitK8sVersionUpdateForCPNodesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *ClusterClient) WaitK8sVersionUpdateForCPNodesReturns(result1 error) {
	fake.waitK8sVersionUpdateForCPNodesMutex.Lock()
	defer fake.waitK8sVersionUpdateForCPNodesMutex.Unlock()
	fake.WaitK8sVersionUpdateForCPNodesStub = nil
	fake.waitK8sVersionUpdateForCPNodesReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) WaitK8sVersionUpdateForCPNodesReturnsOnCall(i int, result1 error) {
	fake.waitK8sVersionUpdateForCPNodesMutex.Lock()
	defer fake.waitK8sVersionUpdateForCPNodesMutex.Unlock()
	fake.WaitK8sVersionUpdateForCPNodesStub = nil
	if fake.waitK8sVersionUpdateForCPNodesReturnsOnCall == nil {
		fake.waitK8sVersionUpdateForCPNodesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitK8sVersionUpdateForCPNodesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) WaitK8sVersionUpdateForWorkerNodes(arg1 string, arg2 string, arg3 string, arg4 clusterclient.Client) error {
	fake.waitK8sVersionUpdateForWorkerNodesMutex.Lock()
	ret, specificReturn := fake.waitK8sVersionUpdateForWorkerNodesReturnsOnCall[len(fake.waitK8sVersionUpdateForWorkerNodesArgsForCall)]
	fake.waitK8sVersionUpdateForWorkerNodesArgsForCall = append(fake.waitK8sVersionUpdateForWorkerNodesArgsForCall, struct {
		arg1 string
		arg2 string
		arg3 string
		arg4 clusterclient.Client
	}{arg1, arg2, arg3, arg4})
	stub := fake.WaitK8sVersionUpdateForWorkerNodesStub
	fakeReturns := fake.waitK8sVersionUpdateForWorkerNodesReturns
	fake.recordInvocation("WaitK8sVersionUpdateForWorkerNodes", []interface{}{arg1, arg2, arg3, arg4})
	fake.waitK8sVersionUpdateForWorkerNodesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3, arg4)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *ClusterClient) WaitK8sVersionUpdateForWorkerNodesCallCount() int {
	fake.waitK8sVersionUpdateForWorkerNodesMutex.RLock()
	defer fake.waitK8sVersionUpdateForWorkerNodesMutex.RUnlock()
	return len(fake.waitK8sVersionUpdateForWorkerNodesArgsForCall)
}

func (fake *ClusterClient) WaitK8sVersionUpdateForWorkerNodesCalls(stub func(string, string, string, clusterclient.Client) error) {
	fake.waitK8sVersionUpdateForWorkerNodesMutex.Lock()
	defer fake.waitK8sVersionUpdateForWorkerNodesMutex.Unlock()
	fake.WaitK8sVersionUpdateForWorkerNodesStub = stub
}

func (fake *ClusterClient) WaitK8sVersionUpdateForWorkerNodesArgsForCall(i int) (string, string, string, clusterclient.Client) {
	fake.waitK8sVersionUpdateForWorkerNodesMutex.RLock()
	defer fake.waitK8sVersionUpdateForWorkerNodesMutex.RUnlock()
	argsForCall := fake.waitK8sVersionUpdateForWorkerNodesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4
}

func (fake *ClusterClient) WaitK8sVersionUpdateForWorkerNodesReturns(result1 error) {
	fake.waitK8sVersionUpdateForWorkerNodesMutex.Lock()
	defer fake.waitK8sVersionUpdateForWorkerNodesMutex.Unlock()
	fake.WaitK8sVersionUpdateForWorkerNodesStub = nil
	fake.waitK8sVersionUpdateForWorkerNodesReturns = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) WaitK8sVersionUpdateForWorkerNodesReturnsOnCall(i int, result1 error) {
	fake.waitK8sVersionUpdateForWorkerNodesMutex.Lock()
	defer fake.waitK8sVersionUpdateForWorkerNodesMutex.Unlock()
	fake.WaitK8sVersionUpdateForWorkerNodesStub = nil
	if fake.waitK8sVersionUpdateForWorkerNodesReturnsOnCall == nil {
		fake.waitK8sVersionUpdateForWorkerNodesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.waitK8sVersionUpdateForWorkerNodesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *ClusterClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.activateTanzuKubernetesReleasesMutex.RLock()
	defer fake.activateTanzuKubernetesReleasesMutex.RUnlock()
	fake.addCEIPTelemetryJobMutex.RLock()
	defer fake.addCEIPTelemetryJobMutex.RUnlock()
	fake.applyMutex.RLock()
	defer fake.applyMutex.RUnlock()
	fake.applyFileMutex.RLock()
	defer fake.applyFileMutex.RUnlock()
	fake.applyFileRecursivelyMutex.RLock()
	defer fake.applyFileRecursivelyMutex.RUnlock()
	fake.applyPatchForAutoScalerDeploymentMutex.RLock()
	defer fake.applyPatchForAutoScalerDeploymentMutex.RUnlock()
	fake.checkUnifiedAzureClusterIdentityMutex.RLock()
	defer fake.checkUnifiedAzureClusterIdentityMutex.RUnlock()
	fake.cloneWithTimeoutMutex.RLock()
	defer fake.cloneWithTimeoutMutex.RUnlock()
	fake.createNamespaceMutex.RLock()
	defer fake.createNamespaceMutex.RUnlock()
	fake.createResourceMutex.RLock()
	defer fake.createResourceMutex.RUnlock()
	fake.deactivateTanzuKubernetesReleasesMutex.RLock()
	defer fake.deactivateTanzuKubernetesReleasesMutex.RUnlock()
	fake.deleteClusterMutex.RLock()
	defer fake.deleteClusterMutex.RUnlock()
	fake.deleteExistingKappControllerMutex.RLock()
	defer fake.deleteExistingKappControllerMutex.RUnlock()
	fake.deleteResourceMutex.RLock()
	defer fake.deleteResourceMutex.RUnlock()
	fake.exportCurrentKubeconfigToFileMutex.RLock()
	defer fake.exportCurrentKubeconfigToFileMutex.RUnlock()
	fake.getAWSCredentialsFromSecretMutex.RLock()
	defer fake.getAWSCredentialsFromSecretMutex.RUnlock()
	fake.getAzureCredentialsFromSecretMutex.RLock()
	defer fake.getAzureCredentialsFromSecretMutex.RUnlock()
	fake.getBomConfigMapMutex.RLock()
	defer fake.getBomConfigMapMutex.RUnlock()
	fake.getCAPZControllerManagerDeploymentsReplicasMutex.RLock()
	defer fake.getCAPZControllerManagerDeploymentsReplicasMutex.RUnlock()
	fake.getCLIPluginImageRepositoryOverrideMutex.RLock()
	defer fake.getCLIPluginImageRepositoryOverrideMutex.RUnlock()
	fake.getClientSetMutex.RLock()
	defer fake.getClientSetMutex.RUnlock()
	fake.getClusterInfrastructureMutex.RLock()
	defer fake.getClusterInfrastructureMutex.RUnlock()
	fake.getClusterResolvedOSImagesFromTKRMutex.RLock()
	defer fake.getClusterResolvedOSImagesFromTKRMutex.RUnlock()
	fake.getClusterResolvedTanzuKubernetesReleaseMutex.RLock()
	defer fake.getClusterResolvedTanzuKubernetesReleaseMutex.RUnlock()
	fake.getClusterStatusInfoMutex.RLock()
	defer fake.getClusterStatusInfoMutex.RUnlock()
	fake.getCurrentClusterNameMutex.RLock()
	defer fake.getCurrentClusterNameMutex.RUnlock()
	fake.getCurrentKubeContextMutex.RLock()
	defer fake.getCurrentKubeContextMutex.RUnlock()
	fake.getCurrentKubeconfigFileMutex.RLock()
	defer fake.getCurrentKubeconfigFileMutex.RUnlock()
	fake.getCurrentNamespaceMutex.RLock()
	defer fake.getCurrentNamespaceMutex.RUnlock()
	fake.getDeploymentMutex.RLock()
	defer fake.getDeploymentMutex.RUnlock()
	fake.getKCPObjectForClusterMutex.RLock()
	defer fake.getKCPObjectForClusterMutex.RUnlock()
	fake.getKubeConfigForClusterMutex.RLock()
	defer fake.getKubeConfigForClusterMutex.RUnlock()
	fake.getKubernetesVersionMutex.RLock()
	defer fake.getKubernetesVersionMutex.RUnlock()
	fake.getMDObjectForClusterMutex.RLock()
	defer fake.getMDObjectForClusterMutex.RUnlock()
	fake.getMachineObjectsForClusterMutex.RLock()
	defer fake.getMachineObjectsForClusterMutex.RUnlock()
	fake.getManagementClusterTKGVersionMutex.RLock()
	defer fake.getManagementClusterTKGVersionMutex.RUnlock()
	fake.getPacificClusterObjectMutex.RLock()
	defer fake.getPacificClusterObjectMutex.RUnlock()
	fake.getPacificTKCAPIVersionMutex.RLock()
	defer fake.getPacificTKCAPIVersionMutex.RUnlock()
	fake.getPacificTanzuKubernetesReleasesMutex.RLock()
	defer fake.getPacificTanzuKubernetesReleasesMutex.RUnlock()
	fake.getPackageMutex.RLock()
	defer fake.getPackageMutex.RUnlock()
	fake.getPinnipedIssuerURLAndCAMutex.RLock()
	defer fake.getPinnipedIssuerURLAndCAMutex.RUnlock()
	fake.getRegionalClusterDefaultProviderNameMutex.RLock()
	defer fake.getRegionalClusterDefaultProviderNameMutex.RUnlock()
	fake.getResourceMutex.RLock()
	defer fake.getResourceMutex.RUnlock()
	fake.getResourceListMutex.RLock()
	defer fake.getResourceListMutex.RUnlock()
	fake.getSecretValueMutex.RLock()
	defer fake.getSecretValueMutex.RUnlock()
	fake.getTanzuKubernetesReleasesMutex.RLock()
	defer fake.getTanzuKubernetesReleasesMutex.RUnlock()
	fake.getVCClientAndDataCenterMutex.RLock()
	defer fake.getVCClientAndDataCenterMutex.RUnlock()
	fake.getVCCredentialsFromClusterMutex.RLock()
	defer fake.getVCCredentialsFromClusterMutex.RUnlock()
	fake.getVCCredentialsFromSecretMutex.RLock()
	defer fake.getVCCredentialsFromSecretMutex.RUnlock()
	fake.getVCServerMutex.RLock()
	defer fake.getVCServerMutex.RUnlock()
	fake.hasCEIPTelemetryJobMutex.RLock()
	defer fake.hasCEIPTelemetryJobMutex.RUnlock()
	fake.isClusterClassBasedMutex.RLock()
	defer fake.isClusterClassBasedMutex.RUnlock()
	fake.isClusterRegisteredToTMCMutex.RLock()
	defer fake.isClusterRegisteredToTMCMutex.RUnlock()
	fake.isPacificRegionalClusterMutex.RLock()
	defer fake.isPacificRegionalClusterMutex.RUnlock()
	fake.isRegionalClusterMutex.RLock()
	defer fake.isRegionalClusterMutex.RUnlock()
	fake.listCLIPluginResourcesMutex.RLock()
	defer fake.listCLIPluginResourcesMutex.RUnlock()
	fake.listClustersMutex.RLock()
	defer fake.listClustersMutex.RUnlock()
	fake.listPacificClusterObjectsMutex.RLock()
	defer fake.listPacificClusterObjectsMutex.RUnlock()
	fake.listResourcesMutex.RLock()
	defer fake.listResourcesMutex.RUnlock()
	fake.loadCurrentKubeconfigBytesMutex.RLock()
	defer fake.loadCurrentKubeconfigBytesMutex.RUnlock()
	fake.mergeAndUseConfigForClusterMutex.RLock()
	defer fake.mergeAndUseConfigForClusterMutex.RUnlock()
	fake.mergeConfigForClusterMutex.RLock()
	defer fake.mergeConfigForClusterMutex.RUnlock()
	fake.patchCalicoKubeControllerDeploymentWithNewNodeSelectorMutex.RLock()
	defer fake.patchCalicoKubeControllerDeploymentWithNewNodeSelectorMutex.RUnlock()
	fake.patchCalicoNodeDaemonSetWithNewNodeSelectorMutex.RLock()
	defer fake.patchCalicoNodeDaemonSetWithNewNodeSelectorMutex.RUnlock()
	fake.patchClusterAPIAWSControllersToUseEC2CredentialsMutex.RLock()
	defer fake.patchClusterAPIAWSControllersToUseEC2CredentialsMutex.RUnlock()
	fake.patchClusterObjectMutex.RLock()
	defer fake.patchClusterObjectMutex.RUnlock()
	fake.patchClusterObjectAnnotationsMutex.RLock()
	defer fake.patchClusterObjectAnnotationsMutex.RUnlock()
	fake.patchClusterObjectWithOptionalMetadataMutex.RLock()
	defer fake.patchClusterObjectWithOptionalMetadataMutex.RUnlock()
	fake.patchClusterObjectWithPollOptionsMutex.RLock()
	defer fake.patchClusterObjectWithPollOptionsMutex.RUnlock()
	fake.patchClusterObjectWithTKGVersionMutex.RLock()
	defer fake.patchClusterObjectWithTKGVersionMutex.RUnlock()
	fake.patchClusterWithOperationStartedStatusMutex.RLock()
	defer fake.patchClusterWithOperationStartedStatusMutex.RUnlock()
	fake.patchCoreDNSImageRepositoryInKubeadmConfigMapMutex.RLock()
	defer fake.patchCoreDNSImageRepositoryInKubeadmConfigMapMutex.RUnlock()
	fake.patchImageRepositoryInKubeProxyDaemonSetMutex.RLock()
	defer fake.patchImageRepositoryInKubeProxyDaemonSetMutex.RUnlock()
	fake.patchK8SVersionToPacificClusterMutex.RLock()
	defer fake.patchK8SVersionToPacificClusterMutex.RUnlock()
	fake.patchKappControllerLastAppliedAnnotationMutex.RLock()
	defer fake.patchKappControllerLastAppliedAnnotationMutex.RUnlock()
	fake.patchResourceMutex.RLock()
	defer fake.patchResourceMutex.RUnlock()
	fake.removeCEIPTelemetryJobMutex.RLock()
	defer fake.removeCEIPTelemetryJobMutex.RUnlock()
	fake.removeMatchingMetadataFromResourcesMutex.RLock()
	defer fake.removeMatchingMetadataFromResourcesMutex.RUnlock()
	fake.scalePacificClusterControlPlaneMutex.RLock()
	defer fake.scalePacificClusterControlPlaneMutex.RUnlock()
	fake.scalePacificClusterWorkerNodesMutex.RLock()
	defer fake.scalePacificClusterWorkerNodesMutex.RUnlock()
	fake.updateAWSCNIIngressRulesMutex.RLock()
	defer fake.updateAWSCNIIngressRulesMutex.RUnlock()
	fake.updateAzureClusterIdentityMutex.RLock()
	defer fake.updateAzureClusterIdentityMutex.RUnlock()
	fake.updateAzureKCPMutex.RLock()
	defer fake.updateAzureKCPMutex.RUnlock()
	fake.updateCAPZControllerManagerDeploymentReplicasMutex.RLock()
	defer fake.updateCAPZControllerManagerDeploymentReplicasMutex.RUnlock()
	fake.updateCapvManagerBootstrapCredentialsSecretMutex.RLock()
	defer fake.updateCapvManagerBootstrapCredentialsSecretMutex.RUnlock()
	fake.updateCapzManagerBootstrapCredentialsSecretMutex.RLock()
	defer fake.updateCapzManagerBootstrapCredentialsSecretMutex.RUnlock()
	fake.updateReplicasMutex.RLock()
	defer fake.updateReplicasMutex.RUnlock()
	fake.updateResourceMutex.RLock()
	defer fake.updateResourceMutex.RUnlock()
	fake.updateResourceWithPollingMutex.RLock()
	defer fake.updateResourceWithPollingMutex.RUnlock()
	fake.updateVsphereCloudProviderCredentialsSecretMutex.RLock()
	defer fake.updateVsphereCloudProviderCredentialsSecretMutex.RUnlock()
	fake.updateVsphereCsiConfigSecretMutex.RLock()
	defer fake.updateVsphereCsiConfigSecretMutex.RUnlock()
	fake.updateVsphereIdentityRefSecretMutex.RLock()
	defer fake.updateVsphereIdentityRefSecretMutex.RUnlock()
	fake.useContextMutex.RLock()
	defer fake.useContextMutex.RUnlock()
	fake.verifyCLIPluginCRDMutex.RLock()
	defer fake.verifyCLIPluginCRDMutex.RUnlock()
	fake.verifyExistenceOfCRDMutex.RLock()
	defer fake.verifyExistenceOfCRDMutex.RUnlock()
	fake.waitForAVIResourceCleanUpMutex.RLock()
	defer fake.waitForAVIResourceCleanUpMutex.RUnlock()
	fake.waitForAutoscalerDeploymentMutex.RLock()
	defer fake.waitForAutoscalerDeploymentMutex.RUnlock()
	fake.waitForClusterDeletionMutex.RLock()
	defer fake.waitForClusterDeletionMutex.RUnlock()
	fake.waitForClusterInitializedMutex.RLock()
	defer fake.waitForClusterInitializedMutex.RUnlock()
	fake.waitForClusterReadyMutex.RLock()
	defer fake.waitForClusterReadyMutex.RUnlock()
	fake.waitForControlPlaneAvailableMutex.RLock()
	defer fake.waitForControlPlaneAvailableMutex.RUnlock()
	fake.waitForDeploymentMutex.RLock()
	defer fake.waitForDeploymentMutex.RUnlock()
	fake.waitForPacificClusterMutex.RLock()
	defer fake.waitForPacificClusterMutex.RUnlock()
	fake.waitForPacificClusterK8sVersionUpdateMutex.RLock()
	defer fake.waitForPacificClusterK8sVersionUpdateMutex.RUnlock()
	fake.waitForPackageInstallMutex.RLock()
	defer fake.waitForPackageInstallMutex.RUnlock()
	fake.waitK8sVersionUpdateForCPNodesMutex.RLock()
	defer fake.waitK8sVersionUpdateForCPNodesMutex.RUnlock()
	fake.waitK8sVersionUpdateForWorkerNodesMutex.RLock()
	defer fake.waitK8sVersionUpdateForWorkerNodesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *ClusterClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ clusterclient.Client = new(ClusterClient)
