// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/vmware-tanzu/tanzu-framework/tkg/registry"
)

type Registry struct {
	DownloadBundleStub        func(string, string) error
	downloadBundleMutex       sync.RWMutex
	downloadBundleArgsForCall []struct {
		arg1 string
		arg2 string
	}
	downloadBundleReturns struct {
		result1 error
	}
	downloadBundleReturnsOnCall map[int]struct {
		result1 error
	}
	GetFileStub        func(string, string) ([]byte, error)
	getFileMutex       sync.RWMutex
	getFileArgsForCall []struct {
		arg1 string
		arg2 string
	}
	getFileReturns struct {
		result1 []byte
		result2 error
	}
	getFileReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	GetFilesStub        func(string) (map[string][]byte, error)
	getFilesMutex       sync.RWMutex
	getFilesArgsForCall []struct {
		arg1 string
	}
	getFilesReturns struct {
		result1 map[string][]byte
		result2 error
	}
	getFilesReturnsOnCall map[int]struct {
		result1 map[string][]byte
		result2 error
	}
	ListImageTagsStub        func(string) ([]string, error)
	listImageTagsMutex       sync.RWMutex
	listImageTagsArgsForCall []struct {
		arg1 string
	}
	listImageTagsReturns struct {
		result1 []string
		result2 error
	}
	listImageTagsReturnsOnCall map[int]struct {
		result1 []string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Registry) DownloadBundle(arg1 string, arg2 string) error {
	fake.downloadBundleMutex.Lock()
	ret, specificReturn := fake.downloadBundleReturnsOnCall[len(fake.downloadBundleArgsForCall)]
	fake.downloadBundleArgsForCall = append(fake.downloadBundleArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.DownloadBundleStub
	fakeReturns := fake.downloadBundleReturns
	fake.recordInvocation("DownloadBundle", []interface{}{arg1, arg2})
	fake.downloadBundleMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *Registry) DownloadBundleCallCount() int {
	fake.downloadBundleMutex.RLock()
	defer fake.downloadBundleMutex.RUnlock()
	return len(fake.downloadBundleArgsForCall)
}

func (fake *Registry) DownloadBundleCalls(stub func(string, string) error) {
	fake.downloadBundleMutex.Lock()
	defer fake.downloadBundleMutex.Unlock()
	fake.DownloadBundleStub = stub
}

func (fake *Registry) DownloadBundleArgsForCall(i int) (string, string) {
	fake.downloadBundleMutex.RLock()
	defer fake.downloadBundleMutex.RUnlock()
	argsForCall := fake.downloadBundleArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *Registry) DownloadBundleReturns(result1 error) {
	fake.downloadBundleMutex.Lock()
	defer fake.downloadBundleMutex.Unlock()
	fake.DownloadBundleStub = nil
	fake.downloadBundleReturns = struct {
		result1 error
	}{result1}
}

func (fake *Registry) DownloadBundleReturnsOnCall(i int, result1 error) {
	fake.downloadBundleMutex.Lock()
	defer fake.downloadBundleMutex.Unlock()
	fake.DownloadBundleStub = nil
	if fake.downloadBundleReturnsOnCall == nil {
		fake.downloadBundleReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.downloadBundleReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *Registry) GetFile(arg1 string, arg2 string) ([]byte, error) {
	fake.getFileMutex.Lock()
	ret, specificReturn := fake.getFileReturnsOnCall[len(fake.getFileArgsForCall)]
	fake.getFileArgsForCall = append(fake.getFileArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	stub := fake.GetFileStub
	fakeReturns := fake.getFileReturns
	fake.recordInvocation("GetFile", []interface{}{arg1, arg2})
	fake.getFileMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Registry) GetFileCallCount() int {
	fake.getFileMutex.RLock()
	defer fake.getFileMutex.RUnlock()
	return len(fake.getFileArgsForCall)
}

func (fake *Registry) GetFileCalls(stub func(string, string) ([]byte, error)) {
	fake.getFileMutex.Lock()
	defer fake.getFileMutex.Unlock()
	fake.GetFileStub = stub
}

func (fake *Registry) GetFileArgsForCall(i int) (string, string) {
	fake.getFileMutex.RLock()
	defer fake.getFileMutex.RUnlock()
	argsForCall := fake.getFileArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *Registry) GetFileReturns(result1 []byte, result2 error) {
	fake.getFileMutex.Lock()
	defer fake.getFileMutex.Unlock()
	fake.GetFileStub = nil
	fake.getFileReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *Registry) GetFileReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.getFileMutex.Lock()
	defer fake.getFileMutex.Unlock()
	fake.GetFileStub = nil
	if fake.getFileReturnsOnCall == nil {
		fake.getFileReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.getFileReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *Registry) GetFiles(arg1 string) (map[string][]byte, error) {
	fake.getFilesMutex.Lock()
	ret, specificReturn := fake.getFilesReturnsOnCall[len(fake.getFilesArgsForCall)]
	fake.getFilesArgsForCall = append(fake.getFilesArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetFilesStub
	fakeReturns := fake.getFilesReturns
	fake.recordInvocation("GetFiles", []interface{}{arg1})
	fake.getFilesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Registry) GetFilesCallCount() int {
	fake.getFilesMutex.RLock()
	defer fake.getFilesMutex.RUnlock()
	return len(fake.getFilesArgsForCall)
}

func (fake *Registry) GetFilesCalls(stub func(string) (map[string][]byte, error)) {
	fake.getFilesMutex.Lock()
	defer fake.getFilesMutex.Unlock()
	fake.GetFilesStub = stub
}

func (fake *Registry) GetFilesArgsForCall(i int) string {
	fake.getFilesMutex.RLock()
	defer fake.getFilesMutex.RUnlock()
	argsForCall := fake.getFilesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *Registry) GetFilesReturns(result1 map[string][]byte, result2 error) {
	fake.getFilesMutex.Lock()
	defer fake.getFilesMutex.Unlock()
	fake.GetFilesStub = nil
	fake.getFilesReturns = struct {
		result1 map[string][]byte
		result2 error
	}{result1, result2}
}

func (fake *Registry) GetFilesReturnsOnCall(i int, result1 map[string][]byte, result2 error) {
	fake.getFilesMutex.Lock()
	defer fake.getFilesMutex.Unlock()
	fake.GetFilesStub = nil
	if fake.getFilesReturnsOnCall == nil {
		fake.getFilesReturnsOnCall = make(map[int]struct {
			result1 map[string][]byte
			result2 error
		})
	}
	fake.getFilesReturnsOnCall[i] = struct {
		result1 map[string][]byte
		result2 error
	}{result1, result2}
}

func (fake *Registry) ListImageTags(arg1 string) ([]string, error) {
	fake.listImageTagsMutex.Lock()
	ret, specificReturn := fake.listImageTagsReturnsOnCall[len(fake.listImageTagsArgsForCall)]
	fake.listImageTagsArgsForCall = append(fake.listImageTagsArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ListImageTagsStub
	fakeReturns := fake.listImageTagsReturns
	fake.recordInvocation("ListImageTags", []interface{}{arg1})
	fake.listImageTagsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *Registry) ListImageTagsCallCount() int {
	fake.listImageTagsMutex.RLock()
	defer fake.listImageTagsMutex.RUnlock()
	return len(fake.listImageTagsArgsForCall)
}

func (fake *Registry) ListImageTagsCalls(stub func(string) ([]string, error)) {
	fake.listImageTagsMutex.Lock()
	defer fake.listImageTagsMutex.Unlock()
	fake.ListImageTagsStub = stub
}

func (fake *Registry) ListImageTagsArgsForCall(i int) string {
	fake.listImageTagsMutex.RLock()
	defer fake.listImageTagsMutex.RUnlock()
	argsForCall := fake.listImageTagsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *Registry) ListImageTagsReturns(result1 []string, result2 error) {
	fake.listImageTagsMutex.Lock()
	defer fake.listImageTagsMutex.Unlock()
	fake.ListImageTagsStub = nil
	fake.listImageTagsReturns = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *Registry) ListImageTagsReturnsOnCall(i int, result1 []string, result2 error) {
	fake.listImageTagsMutex.Lock()
	defer fake.listImageTagsMutex.Unlock()
	fake.ListImageTagsStub = nil
	if fake.listImageTagsReturnsOnCall == nil {
		fake.listImageTagsReturnsOnCall = make(map[int]struct {
			result1 []string
			result2 error
		})
	}
	fake.listImageTagsReturnsOnCall[i] = struct {
		result1 []string
		result2 error
	}{result1, result2}
}

func (fake *Registry) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.downloadBundleMutex.RLock()
	defer fake.downloadBundleMutex.RUnlock()
	fake.getFileMutex.RLock()
	defer fake.getFileMutex.RUnlock()
	fake.getFilesMutex.RLock()
	defer fake.getFilesMutex.RUnlock()
	fake.listImageTagsMutex.RLock()
	defer fake.listImageTagsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Registry) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ registry.Registry = new(Registry)
