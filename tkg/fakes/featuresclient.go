// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/vmware-tanzu/tanzu-framework/tkg/features"
)

type FeaturesClient struct {
	GetFeatureFlagStub        func(string) (string, error)
	getFeatureFlagMutex       sync.RWMutex
	getFeatureFlagArgsForCall []struct {
		arg1 string
	}
	getFeatureFlagReturns struct {
		result1 string
		result2 error
	}
	getFeatureFlagReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GetFeatureFlagsStub        func() (map[string]string, error)
	getFeatureFlagsMutex       sync.RWMutex
	getFeatureFlagsArgsForCall []struct {
	}
	getFeatureFlagsReturns struct {
		result1 map[string]string
		result2 error
	}
	getFeatureFlagsReturnsOnCall map[int]struct {
		result1 map[string]string
		result2 error
	}
	IsFeatureFlagEnabledStub        func(string) (bool, error)
	isFeatureFlagEnabledMutex       sync.RWMutex
	isFeatureFlagEnabledArgsForCall []struct {
		arg1 string
	}
	isFeatureFlagEnabledReturns struct {
		result1 bool
		result2 error
	}
	isFeatureFlagEnabledReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	WriteFeatureFlagsStub        func(map[string]string) error
	writeFeatureFlagsMutex       sync.RWMutex
	writeFeatureFlagsArgsForCall []struct {
		arg1 map[string]string
	}
	writeFeatureFlagsReturns struct {
		result1 error
	}
	writeFeatureFlagsReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FeaturesClient) GetFeatureFlag(arg1 string) (string, error) {
	fake.getFeatureFlagMutex.Lock()
	ret, specificReturn := fake.getFeatureFlagReturnsOnCall[len(fake.getFeatureFlagArgsForCall)]
	fake.getFeatureFlagArgsForCall = append(fake.getFeatureFlagArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetFeatureFlagStub
	fakeReturns := fake.getFeatureFlagReturns
	fake.recordInvocation("GetFeatureFlag", []interface{}{arg1})
	fake.getFeatureFlagMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FeaturesClient) GetFeatureFlagCallCount() int {
	fake.getFeatureFlagMutex.RLock()
	defer fake.getFeatureFlagMutex.RUnlock()
	return len(fake.getFeatureFlagArgsForCall)
}

func (fake *FeaturesClient) GetFeatureFlagCalls(stub func(string) (string, error)) {
	fake.getFeatureFlagMutex.Lock()
	defer fake.getFeatureFlagMutex.Unlock()
	fake.GetFeatureFlagStub = stub
}

func (fake *FeaturesClient) GetFeatureFlagArgsForCall(i int) string {
	fake.getFeatureFlagMutex.RLock()
	defer fake.getFeatureFlagMutex.RUnlock()
	argsForCall := fake.getFeatureFlagArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FeaturesClient) GetFeatureFlagReturns(result1 string, result2 error) {
	fake.getFeatureFlagMutex.Lock()
	defer fake.getFeatureFlagMutex.Unlock()
	fake.GetFeatureFlagStub = nil
	fake.getFeatureFlagReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FeaturesClient) GetFeatureFlagReturnsOnCall(i int, result1 string, result2 error) {
	fake.getFeatureFlagMutex.Lock()
	defer fake.getFeatureFlagMutex.Unlock()
	fake.GetFeatureFlagStub = nil
	if fake.getFeatureFlagReturnsOnCall == nil {
		fake.getFeatureFlagReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.getFeatureFlagReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FeaturesClient) GetFeatureFlags() (map[string]string, error) {
	fake.getFeatureFlagsMutex.Lock()
	ret, specificReturn := fake.getFeatureFlagsReturnsOnCall[len(fake.getFeatureFlagsArgsForCall)]
	fake.getFeatureFlagsArgsForCall = append(fake.getFeatureFlagsArgsForCall, struct {
	}{})
	stub := fake.GetFeatureFlagsStub
	fakeReturns := fake.getFeatureFlagsReturns
	fake.recordInvocation("GetFeatureFlags", []interface{}{})
	fake.getFeatureFlagsMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FeaturesClient) GetFeatureFlagsCallCount() int {
	fake.getFeatureFlagsMutex.RLock()
	defer fake.getFeatureFlagsMutex.RUnlock()
	return len(fake.getFeatureFlagsArgsForCall)
}

func (fake *FeaturesClient) GetFeatureFlagsCalls(stub func() (map[string]string, error)) {
	fake.getFeatureFlagsMutex.Lock()
	defer fake.getFeatureFlagsMutex.Unlock()
	fake.GetFeatureFlagsStub = stub
}

func (fake *FeaturesClient) GetFeatureFlagsReturns(result1 map[string]string, result2 error) {
	fake.getFeatureFlagsMutex.Lock()
	defer fake.getFeatureFlagsMutex.Unlock()
	fake.GetFeatureFlagsStub = nil
	fake.getFeatureFlagsReturns = struct {
		result1 map[string]string
		result2 error
	}{result1, result2}
}

func (fake *FeaturesClient) GetFeatureFlagsReturnsOnCall(i int, result1 map[string]string, result2 error) {
	fake.getFeatureFlagsMutex.Lock()
	defer fake.getFeatureFlagsMutex.Unlock()
	fake.GetFeatureFlagsStub = nil
	if fake.getFeatureFlagsReturnsOnCall == nil {
		fake.getFeatureFlagsReturnsOnCall = make(map[int]struct {
			result1 map[string]string
			result2 error
		})
	}
	fake.getFeatureFlagsReturnsOnCall[i] = struct {
		result1 map[string]string
		result2 error
	}{result1, result2}
}

func (fake *FeaturesClient) IsFeatureFlagEnabled(arg1 string) (bool, error) {
	fake.isFeatureFlagEnabledMutex.Lock()
	ret, specificReturn := fake.isFeatureFlagEnabledReturnsOnCall[len(fake.isFeatureFlagEnabledArgsForCall)]
	fake.isFeatureFlagEnabledArgsForCall = append(fake.isFeatureFlagEnabledArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.IsFeatureFlagEnabledStub
	fakeReturns := fake.isFeatureFlagEnabledReturns
	fake.recordInvocation("IsFeatureFlagEnabled", []interface{}{arg1})
	fake.isFeatureFlagEnabledMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FeaturesClient) IsFeatureFlagEnabledCallCount() int {
	fake.isFeatureFlagEnabledMutex.RLock()
	defer fake.isFeatureFlagEnabledMutex.RUnlock()
	return len(fake.isFeatureFlagEnabledArgsForCall)
}

func (fake *FeaturesClient) IsFeatureFlagEnabledCalls(stub func(string) (bool, error)) {
	fake.isFeatureFlagEnabledMutex.Lock()
	defer fake.isFeatureFlagEnabledMutex.Unlock()
	fake.IsFeatureFlagEnabledStub = stub
}

func (fake *FeaturesClient) IsFeatureFlagEnabledArgsForCall(i int) string {
	fake.isFeatureFlagEnabledMutex.RLock()
	defer fake.isFeatureFlagEnabledMutex.RUnlock()
	argsForCall := fake.isFeatureFlagEnabledArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FeaturesClient) IsFeatureFlagEnabledReturns(result1 bool, result2 error) {
	fake.isFeatureFlagEnabledMutex.Lock()
	defer fake.isFeatureFlagEnabledMutex.Unlock()
	fake.IsFeatureFlagEnabledStub = nil
	fake.isFeatureFlagEnabledReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FeaturesClient) IsFeatureFlagEnabledReturnsOnCall(i int, result1 bool, result2 error) {
	fake.isFeatureFlagEnabledMutex.Lock()
	defer fake.isFeatureFlagEnabledMutex.Unlock()
	fake.IsFeatureFlagEnabledStub = nil
	if fake.isFeatureFlagEnabledReturnsOnCall == nil {
		fake.isFeatureFlagEnabledReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.isFeatureFlagEnabledReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FeaturesClient) WriteFeatureFlags(arg1 map[string]string) error {
	fake.writeFeatureFlagsMutex.Lock()
	ret, specificReturn := fake.writeFeatureFlagsReturnsOnCall[len(fake.writeFeatureFlagsArgsForCall)]
	fake.writeFeatureFlagsArgsForCall = append(fake.writeFeatureFlagsArgsForCall, struct {
		arg1 map[string]string
	}{arg1})
	stub := fake.WriteFeatureFlagsStub
	fakeReturns := fake.writeFeatureFlagsReturns
	fake.recordInvocation("WriteFeatureFlags", []interface{}{arg1})
	fake.writeFeatureFlagsMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FeaturesClient) WriteFeatureFlagsCallCount() int {
	fake.writeFeatureFlagsMutex.RLock()
	defer fake.writeFeatureFlagsMutex.RUnlock()
	return len(fake.writeFeatureFlagsArgsForCall)
}

func (fake *FeaturesClient) WriteFeatureFlagsCalls(stub func(map[string]string) error) {
	fake.writeFeatureFlagsMutex.Lock()
	defer fake.writeFeatureFlagsMutex.Unlock()
	fake.WriteFeatureFlagsStub = stub
}

func (fake *FeaturesClient) WriteFeatureFlagsArgsForCall(i int) map[string]string {
	fake.writeFeatureFlagsMutex.RLock()
	defer fake.writeFeatureFlagsMutex.RUnlock()
	argsForCall := fake.writeFeatureFlagsArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FeaturesClient) WriteFeatureFlagsReturns(result1 error) {
	fake.writeFeatureFlagsMutex.Lock()
	defer fake.writeFeatureFlagsMutex.Unlock()
	fake.WriteFeatureFlagsStub = nil
	fake.writeFeatureFlagsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FeaturesClient) WriteFeatureFlagsReturnsOnCall(i int, result1 error) {
	fake.writeFeatureFlagsMutex.Lock()
	defer fake.writeFeatureFlagsMutex.Unlock()
	fake.WriteFeatureFlagsStub = nil
	if fake.writeFeatureFlagsReturnsOnCall == nil {
		fake.writeFeatureFlagsReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.writeFeatureFlagsReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FeaturesClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getFeatureFlagMutex.RLock()
	defer fake.getFeatureFlagMutex.RUnlock()
	fake.getFeatureFlagsMutex.RLock()
	defer fake.getFeatureFlagsMutex.RUnlock()
	fake.isFeatureFlagEnabledMutex.RLock()
	defer fake.isFeatureFlagEnabledMutex.RUnlock()
	fake.writeFeatureFlagsMutex.RLock()
	defer fake.writeFeatureFlagsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FeaturesClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ features.Client = new(FeaturesClient)
