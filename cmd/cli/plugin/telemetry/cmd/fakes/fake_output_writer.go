// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/vmware-tanzu/tanzu-framework/cli/runtime/component"
)

type FakeOutputWriter struct {
	AddRowStub        func(...interface{})
	addRowMutex       sync.RWMutex
	addRowArgsForCall []struct {
		arg1 []interface{}
	}
	RenderStub        func()
	renderMutex       sync.RWMutex
	renderArgsForCall []struct {
	}
	SetKeysStub        func(...string)
	setKeysMutex       sync.RWMutex
	setKeysArgsForCall []struct {
		arg1 []string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeOutputWriter) AddRow(arg1 ...interface{}) {
	fake.addRowMutex.Lock()
	fake.addRowArgsForCall = append(fake.addRowArgsForCall, struct {
		arg1 []interface{}
	}{arg1})
	stub := fake.AddRowStub
	fake.recordInvocation("AddRow", []interface{}{arg1})
	fake.addRowMutex.Unlock()
	if stub != nil {
		fake.AddRowStub(arg1...)
	}
}

func (fake *FakeOutputWriter) AddRowCallCount() int {
	fake.addRowMutex.RLock()
	defer fake.addRowMutex.RUnlock()
	return len(fake.addRowArgsForCall)
}

func (fake *FakeOutputWriter) AddRowCalls(stub func(...interface{})) {
	fake.addRowMutex.Lock()
	defer fake.addRowMutex.Unlock()
	fake.AddRowStub = stub
}

func (fake *FakeOutputWriter) AddRowArgsForCall(i int) []interface{} {
	fake.addRowMutex.RLock()
	defer fake.addRowMutex.RUnlock()
	argsForCall := fake.addRowArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeOutputWriter) Render() {
	fake.renderMutex.Lock()
	fake.renderArgsForCall = append(fake.renderArgsForCall, struct {
	}{})
	stub := fake.RenderStub
	fake.recordInvocation("Render", []interface{}{})
	fake.renderMutex.Unlock()
	if stub != nil {
		fake.RenderStub()
	}
}

func (fake *FakeOutputWriter) RenderCallCount() int {
	fake.renderMutex.RLock()
	defer fake.renderMutex.RUnlock()
	return len(fake.renderArgsForCall)
}

func (fake *FakeOutputWriter) RenderCalls(stub func()) {
	fake.renderMutex.Lock()
	defer fake.renderMutex.Unlock()
	fake.RenderStub = stub
}

func (fake *FakeOutputWriter) SetKeys(arg1 ...string) {
	fake.setKeysMutex.Lock()
	fake.setKeysArgsForCall = append(fake.setKeysArgsForCall, struct {
		arg1 []string
	}{arg1})
	stub := fake.SetKeysStub
	fake.recordInvocation("SetKeys", []interface{}{arg1})
	fake.setKeysMutex.Unlock()
	if stub != nil {
		fake.SetKeysStub(arg1...)
	}
}

func (fake *FakeOutputWriter) SetKeysCallCount() int {
	fake.setKeysMutex.RLock()
	defer fake.setKeysMutex.RUnlock()
	return len(fake.setKeysArgsForCall)
}

func (fake *FakeOutputWriter) SetKeysCalls(stub func(...string)) {
	fake.setKeysMutex.Lock()
	defer fake.setKeysMutex.Unlock()
	fake.SetKeysStub = stub
}

func (fake *FakeOutputWriter) SetKeysArgsForCall(i int) []string {
	fake.setKeysMutex.RLock()
	defer fake.setKeysMutex.RUnlock()
	argsForCall := fake.setKeysArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeOutputWriter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addRowMutex.RLock()
	defer fake.addRowMutex.RUnlock()
	fake.renderMutex.RLock()
	defer fake.renderMutex.RUnlock()
	fake.setKeysMutex.RLock()
	defer fake.setKeysMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeOutputWriter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ component.OutputWriter = new(FakeOutputWriter)
