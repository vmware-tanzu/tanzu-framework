#@ load("@ytt:overlay", "overlay")
#@ load("@ytt:yaml", "yaml")
#@ load("@ytt:data", "data")

apiVersion: cluster.x-k8s.io/v1beta1
kind: ClusterClass
metadata:
  name: #@ "tkg-aws-default-{}".format(data.values.AWS_CLUSTER_CLASS_VERSION)
  namespace: #@ data.values.NAMESPACE
  annotations:
    run.tanzu.vmware.com/resolve-tkr: ""
spec:
  controlPlane:
    ref:
      apiVersion: controlplane.cluster.x-k8s.io/v1beta1
      kind: KubeadmControlPlaneTemplate
      name: #@ "tkg-aws-default-{}-kcp".format(data.values.AWS_CLUSTER_CLASS_VERSION)
      namespace: #@ data.values.NAMESPACE
    machineInfrastructure:
      ref:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta2
        kind: AWSMachineTemplate
        name: #@ "tkg-aws-default-{}-control-plane".format(data.values.AWS_CLUSTER_CLASS_VERSION)
        namespace: #@ data.values.NAMESPACE
  workers:
    machineDeployments:
    - class: tkg-worker
      template:
        bootstrap:
          ref:
            apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
            kind: KubeadmConfigTemplate
            name: #@ "tkg-aws-default-{}-md-config".format(data.values.AWS_CLUSTER_CLASS_VERSION)
            namespace: #@ data.values.NAMESPACE
        infrastructure:
          ref:
            apiVersion: infrastructure.cluster.x-k8s.io/v1beta2
            kind: AWSMachineTemplate
            name: #@ "tkg-aws-default-{}-worker".format(data.values.AWS_CLUSTER_CLASS_VERSION)
            namespace: #@ data.values.NAMESPACE
  infrastructure:
    ref:
      apiVersion: infrastructure.cluster.x-k8s.io/v1beta2
      kind: AWSClusterTemplate
      name: #@ "tkg-aws-default-{}-cluster".format(data.values.AWS_CLUSTER_CLASS_VERSION)
      namespace: #@ data.values.NAMESPACE
  variables:
  - name: region
    required: true
    schema:
      openAPIV3Schema:
        type: string
        #@ if data.values.AWS_REGION:
        default: #@ data.values.AWS_REGION
        #@ end
  - name: sshKeyName
    required: true
    schema:
      openAPIV3Schema:
        type: string
        #@ if data.values.AWS_SSH_KEY_NAME:
        default: #@ data.values.AWS_SSH_KEY_NAME
        #@ end
  - name: identityRef
    required: true
    schema:
      openAPIV3Schema:
        type: object
        properties:
          kind:
            type: string
            default: AWSClusterRoleIdentity
          name:
            type: string
        #! required:
        #! - name
  - name: bastion
    required: false
    schema:
      openAPIV3Schema:
        type: object
        properties:
          enabled:
            type: boolean
        required:
        - enabled
        default:
          enabled: #@ data.values.BASTION_HOST_ENABLED
  - name: loadBalancerSchemeInternal
    required: false
    schema:
      openAPIV3Schema:
        type: boolean
        default: false
  - name: cni
    required: true
    schema:
      openAPIV3Schema:
        type: string
        #@ if data.values.CNI:
        default: #@ data.values.CNI
        #@ else:
        default: ""
        #@ end
  - name: network
    required: true
    schema:
      openAPIV3Schema:
        type: object
        properties:
          vpc:
            type: object
            properties:
              existingID:
                type: string
              cidr:
                type: string
                default: 10.0.0.0/16
                format: cidr
          subnets:
            type: array
            items:
              type: object
              properties:
                az:
                  type: string
                private: &subnet
                  type: object
                  properties:
                    id:
                      type: string
                    cidr:
                      type: string
                      format: cidr
                public: *subnet
          securityGroupOverrides:
            type: object
            properties:
              bastion:
                type: string
              apiServerLB:
                type: string
              lb:
                type: string
              controlplane:
                type: string
              node:
                type: string
        required:
        - vpc
        - subnets
  - name: proxy
    required: false
    schema:
      openAPIV3Schema:
        type: object
        properties:
          httpProxy:
            type: string
          httpsProxy:
            type: string
          noProxy:
            type: array
            items:
              type: string
            default: []
        required:
        - httpProxy
        - httpsProxy
  - name: controlPlane
    required: true
    schema:
      openAPIV3Schema:
        type: object
        properties:
          instanceType:
            type: string
            default: t3.large
          rootVolume:
            type: object
            properties:
              sizeGiB:
                type: integer
                #@ if data.values.AWS_CONTROL_PLANE_OS_DISK_SIZE_GIB:
                default: #@ data.values.AWS_CONTROL_PLANE_OS_DISK_SIZE_GIB
                #@ else:
                default: 80
                #@ end
  - name: worker
    required: true
    schema:
      openAPIV3Schema:
        type: object
        properties:
          instanceType:
            type: string
            default: m5.large
          rootVolume:
            type: object
            properties:
              sizeGiB:
                type: integer
                #@ if data.values.AWS_NODE_OS_DISK_SIZE_GIB:
                default: #@ data.values.AWS_NODE_OS_DISK_SIZE_GIB
                #@ else:
                default: 80
                #@ end
  - name: imageRepository
    required: false
    schema:
      openAPIV3Schema:
        type: object
        properties:
          host:
            type: string
          tlsCertificateValidation:
            type: boolean
            default: true
  - name: trust
    required: false
    schema:
      openAPIV3Schema:
        type: array
        items:
          type: object
          properties:
            name:
              type: string
            data:
              type: string
          required:
          - name
          - data
  - name: auditLogging
    required: false
    schema:
      openAPIV3Schema:
        type: object
        properties:
          enabled:
            type: boolean
            default: false
        required:
        - enabled
        default:
          enabled: false
  - name: nodePoolLabels
    required: false
    schema:
      openAPIV3Schema:
        type: array
        items:
          type: object
          properties:
            key:
              type: string
            value:
              type: string
        default: []
  - name: TKR_DATA
    required: false
    schema:
      openAPIV3Schema:
        type: object
        properties: {}
  patches:
  - name: AWSCT_main
    definitions:
    - selector:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta2
        kind: AWSClusterTemplate
        matchResources:
          infrastructureCluster: true
      jsonPatches:
      - op: replace
        path: /spec/template/spec/region
        valueFrom:
          variable: region
      - op: replace
        path: /spec/template/spec/sshKeyName
        valueFrom:
          variable: sshKeyName
      - op: replace
        path: /spec/template/spec/bastion/enabled
        valueFrom:
          variable: bastion.enabled
      - op: add
        path: /spec/template/spec/network/vpc/cidrBlock
        valueFrom:
          variable: network.vpc.cidr
      - op: replace
        path: /spec/template/spec/network/subnets
        valueFrom:
          template: |
            {{ $suffix := list "a" "b" "c" }}
            {{- range $i, $subnet := .network.subnets }}
            - availabilityZone: {{ if $subnet.az }} {{- $subnet.az }} {{- else if $.region }} {{- $.region }} {{- index $suffix $i }} {{- end }}
              cidrBlock: {{ $subnet.private.cidr | default "\"\"" }}
              id: {{ $subnet.private.id | default "\"\"" }}
            {{- if or (empty $.network.vpc.existingID) (not (empty $subnet.public)) }}
            - availabilityZone: {{ if $subnet.az }} {{- $subnet.az }} {{- else if $.region }} {{- $.region }} {{- index $suffix $i }} {{- end }}
              cidrBlock: {{ $subnet.public.cidr | default "\"\"" }}
              isPublic: true
              id: {{ $subnet.public.id | default "\"\"" }}
            {{- end }}
            {{- end }}

  - name: AWSCT_CNIIngressRules_Calico
    enabledIf: '{{ .cni | eq "calico" }}'
    definitions:
    - selector:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta2
        kind: AWSClusterTemplate
        matchResources:
          infrastructureCluster: true
      jsonPatches:
      - op: add
        path: /spec/template/spec/network/cni/cniIngressRules/-
        value:
          description: bgp (calico)
          fromPort: 179
          protocol: tcp
          toPort: 179
      - op: add
        path: /spec/template/spec/network/cni/cniIngressRules/-
        value:
          description: IP-in-IP (calico)
          fromPort: -1
          protocol: "4"
          toPort: 65535
  - name: AWSCT_CNIIngressRules_Antrea
    enabledIf: '{{ .cni | eq "antrea" }}'
    definitions:
    - selector:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta2
        kind: AWSClusterTemplate
        matchResources:
          infrastructureCluster: true
      jsonPatches:
      - op: add
        path: /spec/template/spec/network/cni/cniIngressRules/-
        value:
          description: antrea1
          fromPort: 10349
          protocol: tcp
          toPort: 10349
      - op: add
        path: /spec/template/spec/network/cni/cniIngressRules/-
        value:
          description: genev
          fromPort: 6081
          protocol: udp
          toPort: 6081

  - name: AWSCT_VPC_ID
    enabledIf: '{{ not (empty .network.vpc.existingID) }}'
    definitions:
    - selector:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta2
        kind: AWSClusterTemplate
        matchResources:
          infrastructureCluster: true
      jsonPatches:
      - op: add
        path: /spec/template/spec/network/vpc/id
        valueFrom:
          variable: network.vpc.existingID

  - name: AWSCT_IdentityRef
    enabledIf: '{{ not (empty .identityRef.name) }}'
    definitions:
    - selector:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta2
        kind: AWSClusterTemplate
        matchResources:
          infrastructureCluster: true
      jsonPatches:
      - op: add
        path: /spec/template/spec/identityRef
        valueFrom:
          template: |
            kind: {{ if .identityRef.kind }} {{- .identityRef.kind }} {{- else -}} AWSClusterRoleIdentity {{- end }}
            name: {{ .identityRef.name }}

  - name: AWSCT_ControlPlaneLoadBalancerScheme
    enabledIf: '{{ .loadBalancerSchemeInternal }}'
    definitions:
    - selector:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta2
        kind: AWSClusterTemplate
        matchResources:
          infrastructureCluster: true
      jsonPatches:
      - op: add
        path: /spec/template/spec/controlPlaneLoadBalancer
        valueFrom:
          template: |
            scheme: internal

  - name: AWSCT_SecurityGroupOverrides
    enabledIf: '{{ any .network.securityGroupOverrides.bastion .network.securityGroupOverrides.controlPlane .network.securityGroupOverrides.apiServerLB .network.securityGroupOverrides.node .network.securityGroupOverrides.lb }}'
    definitions:
    - selector:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta2
        kind: AWSClusterTemplate
        matchResources:
          infrastructureCluster: true
      jsonPatches:
      - op: add
        path: /spec/template/spec/network/securityGroupOverrides
        valueFrom:
          template: |
              {{ if .network.securityGroupOverrides.bastion }}  bastion: {{ .network.securityGroupOverrides.bastion }} {{- end }}
              {{ if .network.securityGroupOverrides.controlPlane }}  controlplane: {{ .network.securityGroupOverrides.controlPlane }} {{- end }}
              {{ if .network.securityGroupOverrides.apiServerLB }}  apiserver-lb:  {{ .network.securityGroupOverrides.apiServerLB }} {{- end }}
              {{ if .network.securityGroupOverrides.node }}  node: {{ .network.securityGroupOverrides.node }} {{- end }}
              {{ if .network.securityGroupOverrides.lb }}  lb: {{ .network.securityGroupOverrides.lb }} {{- end }}

  - name: AWS_KCPT
    definitions:
    - selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
      jsonPatches:
      - op: replace
        path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/imageRepository
        valueFrom:
          template: '{{ (index .TKR_DATA .builtin.controlPlane.version).kubernetesSpec.imageRepository }}'
      - op: replace
        path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/etcd/local/imageRepository
        valueFrom:
          template: '{{ (index .TKR_DATA .builtin.controlPlane.version).kubernetesSpec.imageRepository }}'
      - op: replace
        path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/etcd/local/imageTag
        valueFrom:
          template: '{{ (index .TKR_DATA .builtin.controlPlane.version).kubernetesSpec.etcd.imageTag }}'
      - op: replace
        path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/dns/imageRepository
        valueFrom:
          template: '{{ (index .TKR_DATA .builtin.controlPlane.version).kubernetesSpec.imageRepository }}'
      - op: replace
        path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/dns/imageTag
        valueFrom:
          template: '{{ (index .TKR_DATA .builtin.controlPlane.version).kubernetesSpec.coredns.imageTag }}'

  - name: AWS_MT_controlplane
    definitions:
    - selector:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta2
        kind: AWSMachineTemplate
        matchResources:
          controlPlane: true
      jsonPatches:
      - op: replace
        path: /spec/template/spec/instanceType
        valueFrom:
          variable: controlPlane.instanceType
      - op: replace
        path: /spec/template/spec/sshKeyName
        valueFrom:
          variable: sshKeyName
      - op: replace
        path: /spec/template/spec/rootVolume/size
        valueFrom:
          variable: controlPlane.rootVolume.sizeGiB
      - op: replace
        path: /spec/template/spec/ami/id
        valueFrom:
          template: '{{ (index .TKR_DATA .builtin.controlPlane.version).osImageRef.id }}'
  - name: AWS_MT_worker
    definitions:
    - selector:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta2
        kind: AWSMachineTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - "tkg-worker"
      jsonPatches:
      - op: replace
        path: /spec/template/spec/instanceType
        valueFrom:
          variable: worker.instanceType
      - op: replace
        path: /spec/template/spec/sshKeyName
        valueFrom:
          variable: sshKeyName
      - op: replace
        path: /spec/template/spec/rootVolume/size
        valueFrom:
          variable: worker.rootVolume.sizeGiB
      - op: replace
        path: /spec/template/spec/ami/id
        valueFrom:
          template: '{{ (index .TKR_DATA .builtin.machineDeployment.version).osImageRef.id }}'

  - name: nodeLabels
    definitions:
    - selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
      jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/joinConfiguration/nodeRegistration/kubeletExtraArgs/node-labels
        valueFrom:
          template: |
            {{ $first := true }}
            {{- range $key, $val := (index .TKR_DATA .builtin.controlPlane.version).labels }}
            {{- if $first }}
              {{- $first = false }}
            {{- else -}}
              ,
            {{- end }}
            {{- $key }}={{ $val }}
            {{- end }}
    - selector:
        apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
        kind: KubeadmConfigTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - "tkg-worker"
      jsonPatches:
      - op: add
        path: /spec/template/spec/joinConfiguration/nodeRegistration/kubeletExtraArgs/node-labels
        valueFrom:
          template: |
            {{ $first := true }}
            {{- range $key, $val := (index .TKR_DATA .builtin.machineDeployment.version).labels }}
            {{- if $first }}
              {{- $first = false }}
            {{- else -}}
              ,
            {{- end }}
            {{- $key -}} = {{- $val }}
            {{- end}}
            {{- if .nodePoolLabels -}}
              ,
              {{- $first := true }}
              {{- range .nodePoolLabels }}
                {{- if $first }}
                  {{- $first = false }}
                {{- else -}}
                  ,
                {{- end }}
                {{- .key -}} = {{- .value -}}
              {{ end }}
            {{ end }}
  - name: httpProxy
    enabledIf: '{{ not (empty .proxy) }}'
    definitions:
    - selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
      jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/files/-
        valueFrom:
          template: &containerdProxyConf |
            content: |
              [Service]
              Environment="HTTP_PROXY= {{- .proxy.httpProxy -}} "
              Environment="HTTPS_PROXY= {{- .proxy.httpsProxy -}} "
              Environment="NO_PROXY= {{- list .network.vpc.cidr "169.254.0.0/16" "localhost" "127.0.0.1" ".svc" ".svc.cluster.local" | concat .proxy.noProxy .builtin.cluster.network.services .builtin.cluster.network.pods | uniq | sortAlpha | join "," -}} "
            owner: root:root
            path: /etc/systemd/system/containerd.service.d/http-proxy.conf
            permissions: "0640"
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/files/-
        valueFrom:
          template: &kubeletProxyConf |
            content: |
              [Service]
              Environment="HTTP_PROXY= {{- .proxy.httpProxy -}} "
              Environment="HTTPS_PROXY= {{- .proxy.httpsProxy -}} "
              Environment="NO_PROXY= {{- list .network.vpc.cidr "169.254.0.0/16" "localhost" "127.0.0.1" ".svc" ".svc.cluster.local" | concat .proxy.noProxy .builtin.cluster.network.services .builtin.cluster.network.pods | uniq | sortAlpha | join "," -}} "
            owner: root:root
            path: /usr/lib/systemd/system/kubelet.service.d/http-proxy.conf
            permissions: "0640"
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        value: systemctl daemon-reload
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        value: systemctl stop containerd
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        value: systemctl start containerd
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        valueFrom:
          template: &exportHTTPProxy |
            export HTTP_PROXY= {{- .proxy.httpProxy }}
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        valueFrom:
          template: &exportHTTPSProxy |
            export HTTPS_PROXY= {{- .proxy.httpsProxy }}
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        valueFrom:
          template: &exportNoProxy |
            export NO_PROXY= {{- list .network.vpc.cidr "169.254.0.0/16" "localhost" "127.0.0.1" ".svc" ".svc.cluster.local" | concat .proxy.noProxy .builtin.cluster.network.services .builtin.cluster.network.pods | uniq | sortAlpha | join "," }}
    - selector:
        apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
        kind: KubeadmConfigTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - tkg-worker
      jsonPatches:
      - op: add
        path: /spec/template/spec/files/-
        valueFrom:
          template: *containerdProxyConf
      - op: add
        path: /spec/template/spec/files/-
        valueFrom:
          template: *kubeletProxyConf
      - op: add
        path: /spec/template/spec/preKubeadmCommands/-
        value: systemctl daemon-reload
      - op: add
        path: /spec/template/spec/preKubeadmCommands/-
        value: systemctl restart containerd
      - op: add
        path: /spec/template/spec/preKubeadmCommands/-
        valueFrom:
          template: *exportHTTPProxy
      - op: add
        path: /spec/template/spec/preKubeadmCommands/-
        valueFrom:
          template: *exportHTTPSProxy
      - op: add
        path: /spec/template/spec/preKubeadmCommands/-
        valueFrom:
          template: *exportNoProxy
  - name: httpProxyCACert
    enabledIf: '{{ $hasProxyCert := false }} {{- range .trust }} {{- if .name | eq "proxy" }} {{- $hasProxyCert = true }} {{- end }} {{- end }} {{- $hasProxyCert }}'
    definitions:
    - selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
      jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        value: '! which rehash_ca_certificates.sh 2>/dev/null || rehash_ca_certificates.sh'
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        value: '! which update-ca-certificates 2>/dev/null || (mv /etc/ssl/certs/tkg-custom-ca.pem /usr/local/share/ca-certificates/tkg-custom-ca.crt && update-ca-certificates)'
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        value: '! which update-ca-trust 2>/dev/null || (update-ca-trust force-enable && mv /etc/ssl/certs/tkg-custom-ca.pem /etc/pki/ca-trust/source/anchors/tkg-custom-ca.crt && update-ca-trust extract)'
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        value: systemctl restart containerd
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/files/-
        valueFrom:
          template: |
            path: /etc/ssl/certs/tkg-custom-ca.pem
            {{- $proxy := "" }}
            {{- range .trust }}
              {{- if eq .name "proxy" }}
                {{- $proxy = .data }}
              {{- end }}
            {{- end }}
            content: {{ $proxy }}
            encoding: base64
            permissions: "0444"
    - selector:
        apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
        kind: KubeadmConfigTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - tkg-worker
      jsonPatches:
      - op: add
        path: /spec/template/spec/preKubeadmCommands/-
        value: '! which rehash_ca_certificates.sh 2>/dev/null || rehash_ca_certificates.sh'
      - op: add
        path: /spec/template/spec/preKubeadmCommands/-
        value: '! which update-ca-certificates 2>/dev/null || (mv /etc/ssl/certs/tkg-custom-ca.pem /usr/local/share/ca-certificates/tkg-custom-ca.crt && update-ca-certificates)'
      - op: add
        path: /spec/template/spec/preKubeadmCommands/-
        value: '! which update-ca-trust 2>/dev/null || (update-ca-trust force-enable && mv /etc/ssl/certs/tkg-custom-ca.pem /etc/pki/ca-trust/source/anchors/tkg-custom-ca.crt && update-ca-trust extract)'
      - op: add
        path: /spec/template/spec/preKubeadmCommands/-
        value: systemctl restart containerd
      - op: add
        path: /spec/template/spec/files/-
        valueFrom:
          template: |
            path: /etc/ssl/certs/tkg-custom-ca.pem
            {{- $proxy := "" }}
            {{- range .trust }}
              {{- if eq .name "proxy" }}
                {{- $proxy = .data }}
              {{- end }}
            {{- end }}
            content: {{ $proxy }}
            encoding: base64
            permissions: "0444"
  - name: customizedImageRepo
    enabledIf: '{{ not (empty .imageRepository.host) }}'
    definitions:
    - selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
      jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        valueFrom:
          template: |
            sed -i 's|".*/pause|" {{- or .imageRepository.host (index .TKR_DATA .builtin.controlPlane.version).kubernetesSpec.imageRepository -}} /pause|' /etc/containerd/config.toml
    - selector:
        apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
        kind: KubeadmConfigTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - tkg-worker
      jsonPatches:
      - op: add
        path: /spec/template/spec/preKubeadmCommands/-
        valueFrom:
          template: |
            sed -i 's|".*/pause|" {{- or .imageRepository.host (index .TKR_DATA .builtin.machineDeployment.version).kubernetesSpec.imageRepository -}} /pause|' /etc/containerd/config.toml
  - name: registryCACert
    enabledIf: '{{ not (empty .trust) }}'
    definitions:
    - selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
      jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        valueFrom:
          template: |
            {{- $host := index (or .imageRepository.host (index .TKR_DATA .builtin.controlPlane.version).kubernetesSpec.imageRepository | splitList "/") 0 -}}
            echo '[plugins."io.containerd.grpc.v1.cri".registry.configs." {{- $host -}} ".tls]' >> /etc/containerd/config.toml
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        valueFrom:
          template: |
            {{- $host := index (or .imageRepository.host (index .TKR_DATA .builtin.controlPlane.version).kubernetesSpec.imageRepository | splitList "/") 0 }}
            {{- $val := list "ca_file = \"/etc/containerd/" $host ".crt\"" | join "" }}
            {{- with .imageRepository }}
              {{- if .tlsCertificateValidation | eq false }}
                {{- $val = "insecure_skip_verify = true" }}
              {{- end }}
            {{- end -}}
            {{- define "echo" -}}
              echo '  {{ . -}} ' >> /etc/containerd/config.toml
            {{- end }}
            {{- template "echo" $val -}}
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
        value: systemctl restart containerd
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/files/-
        valueFrom:
          template: |
            path: /etc/containerd/ {{- index (or .imageRepository.host (index .TKR_DATA .builtin.controlPlane.version).kubernetesSpec.imageRepository | splitList "/") 0 -}} .crt
            {{- $proxy := "" }}
            {{- $image := "" }}
            {{- range .trust }}
              {{- if eq .name "proxy" }}
                {{- $proxy = .data }}
              {{- end }}
              {{- if eq .name "imageRepository" }}
                {{- $image = .data }}
              {{- end }}
            {{- end }}
            content: {{or $proxy $image}}
            encoding: base64
            permissions: "0444"
    - selector:
        apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
        kind: KubeadmConfigTemplate
        matchResources:
          machineDeploymentClass:
            names:
            - tkg-worker
      jsonPatches:
      - op: add
        path: /spec/template/spec/preKubeadmCommands/-
        valueFrom:
          template: |
            {{- $host := index (or .imageRepository.host (index .TKR_DATA .builtin.machineDeployment.version).kubernetesSpec.imageRepository | splitList "/") 0 -}}
            echo '[plugins."io.containerd.grpc.v1.cri".registry.configs." {{- $host -}} ".tls]' >> /etc/containerd/config.toml
      - op: add
        path: /spec/template/spec/preKubeadmCommands/-
        valueFrom:
          template: |
            {{- $host := index (or .imageRepository.host (index .TKR_DATA .builtin.machineDeployment.version).kubernetesSpec.imageRepository | splitList "/") 0 }}
            {{- $val := list "ca_file = \"/etc/containerd/" $host ".crt\"" | join "" }}
            {{- with .imageRepository }}
              {{- if .tlsCertificateValidation | eq false }}
                {{- $val = "insecure_skip_verify = true" }}
              {{- end }}
            {{- end -}}
            {{- define "echo" -}}
              echo '  {{ . -}} ' >> /etc/containerd/config.toml
            {{- end }}
            {{- template "echo" $val -}}
      - op: add
        path: /spec/template/spec/preKubeadmCommands/-
        value: systemctl restart containerd
      - op: add
        path: /spec/template/spec/files/-
        valueFrom:
          template: |
            path: /etc/containerd/{{ index (or .imageRepository.host (index .TKR_DATA .builtin.machineDeployment.version).kubernetesSpec.imageRepository | splitList "/") 0 }}.crt
            {{- $proxy := "" }}
            {{- $image := "" }}
            {{- range .trust }}
              {{- if eq .name "proxy" }}
                {{- $proxy = .data }}
              {{- end }}
              {{- if eq .name "imageRepository" }}
                {{- $image = .data }}
              {{- end }}
            {{- end }}
            content: {{or $proxy $image}}
            encoding: base64
            permissions: "0444"
  - name: auditLogging
    enabledIf: '{{ .auditLogging.enabled }}'
    definitions:
    - selector:
        apiVersion: controlplane.cluster.x-k8s.io/v1beta1
        kind: KubeadmControlPlaneTemplate
        matchResources:
          controlPlane: true
      jsonPatches:
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs/audit-log-path
        value: /var/log/kubernetes/audit.log
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs/audit-policy-file
        value: /etc/kubernetes/audit-policy.yaml
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs/audit-log-maxage
        value: "30"
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs/audit-log-maxbackup
        value: "10"
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs/audit-log-maxsize
        value: "100"
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes/-
        value:
          name: audit-policy
          hostPath: /etc/kubernetes/audit-policy.yaml
          mountPath: /etc/kubernetes/audit-policy.yaml
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraVolumes/-
        value:
          name: audit-logs
          hostPath: /var/log/kubernetes
          mountPath: /var/log/kubernetes
      - op: add
        path: /spec/template/spec/kubeadmConfigSpec/files/-
        value:
          path: /etc/kubernetes/audit-policy.yaml
          owner: "root:root"
          permissions: "0600"
          content: |
            ---
            apiVersion: audit.k8s.io/v1beta1
            kind: Policy
            rules:
              #! The following requests were manually identified as high-volume and low-risk,
              #! so drop them.
              - level: None
                users: ["system:serviceaccount:kube-system:kube-proxy"]
                verbs: ["watch"]
                resources:
                  - group: "" #! core
                    resources: ["endpoints", "services", "services/status"]
              - level: None
                userGroups: ["system:nodes"]
                verbs: ["get"]
                resources:
                  - group: "" #! core
                    resources: ["nodes", "nodes/status"]
              - level: None
                users:
                  - system:kube-controller-manager
                  - system:kube-scheduler
                  - system:serviceaccount:kube-system:endpoint-controller
                verbs: ["get", "update"]
                namespaces: ["kube-system"]
                resources:
                  - group: "" #! core
                    resources: ["endpoints"]
              - level: None
                users: ["system:apiserver"]
                verbs: ["get"]
                resources:
                  - group: "" #! core
                    resources: ["namespaces", "namespaces/status", "namespaces/finalize"]
              #! Don't log HPA fetching metrics.
              - level: None
                users:
                  - system:kube-controller-manager
                verbs: ["get", "list"]
                resources:
                  - group: "metrics.k8s.io"
              #! Don't log these read-only URLs.
              - level: None
                nonResourceURLs:
                  - /healthz*
                  - /version
                  - /swagger*
              #! Don't log events requests.
              - level: None
                resources:
                  - group: "" #! core
                    resources: ["events"]
              #! Don't log TMC service account performing read operations because they are high-volume.
              - level: None
                userGroups: ["system:serviceaccounts:vmware-system-tmc"]
                verbs: ["get", "list", "watch"]
              #! Don't log read requests from garbage collector because they are high-volume.
              - level: None
                users: ["system:serviceaccount:kube-system:generic-garbage-collector"]
                verbs: ["get", "list", "watch"]
              #! node and pod status calls from nodes are high-volume and can be large, don't log responses for expected updates from nodes
              - level: Request
                userGroups: ["system:nodes"]
                verbs: ["update","patch"]
                resources:
                  - group: "" #! core
                    resources: ["nodes/status", "pods/status"]
                omitStages:
                  - "RequestReceived"
              #! deletecollection calls can be large, don't log responses for expected namespace deletions
              - level: Request
                users: ["system:serviceaccount:kube-system:namespace-controller"]
                verbs: ["deletecollection"]
                omitStages:
                  - "RequestReceived"
              #! Secrets, ConfigMaps, and TokenReviews can contain sensitive & binary data,
              #! so only log at the Metadata level.
              - level: Metadata
                resources:
                  - group: "" #! core
                    resources: ["secrets", "configmaps"]
                  - group: authentication.k8s.io
                    resources: ["tokenreviews"]
                omitStages:
                  - "RequestReceived"
              #! Get repsonses can be large; skip them.
              - level: Request
                verbs: ["get", "list", "watch"]
                resources:
                  - group: "" #! core
                  - group: "admissionregistration.k8s.io"
                  - group: "apiextensions.k8s.io"
                  - group: "apiregistration.k8s.io"
                  - group: "apps"
                  - group: "authentication.k8s.io"
                  - group: "authorization.k8s.io"
                  - group: "autoscaling"
                  - group: "batch"
                  - group: "certificates.k8s.io"
                  - group: "extensions"
                  - group: "metrics.k8s.io"
                  - group: "networking.k8s.io"
                  - group: "policy"
                  - group: "rbac.authorization.k8s.io"
                  - group: "settings.k8s.io"
                  - group: "storage.k8s.io"
                omitStages:
                  - "RequestReceived"
              #! Default level for known APIs
              - level: RequestResponse
                resources:
                  - group: "" #! core
                  - group: "admissionregistration.k8s.io"
                  - group: "apiextensions.k8s.io"
                  - group: "apiregistration.k8s.io"
                  - group: "apps"
                  - group: "authentication.k8s.io"
                  - group: "authorization.k8s.io"
                  - group: "autoscaling"
                  - group: "batch"
                  - group: "certificates.k8s.io"
                  - group: "extensions"
                  - group: "metrics.k8s.io"
                  - group: "networking.k8s.io"
                  - group: "policy"
                  - group: "rbac.authorization.k8s.io"
                  - group: "settings.k8s.io"
                  - group: "storage.k8s.io"
                omitStages:
                  - "RequestReceived"
              #! Default level for all other requests.
              - level: Metadata
                omitStages:
                  - "RequestReceived"
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta2
kind: AWSClusterTemplate
metadata:
  name: #@ "tkg-aws-default-{}-cluster".format(data.values.AWS_CLUSTER_CLASS_VERSION)
  namespace: #@ data.values.NAMESPACE
spec:
  template:
    spec:
      region: #@ data.values.AWS_REGION
      sshKeyName: #@ data.values.AWS_SSH_KEY_NAME
      bastion:
        enabled: true
      network:
        vpc:
          cidrBlock:
        subnets:
        - availabilityZone: #@ data.values.AWS_NODE_AZ
          cidrBlock: #@ data.values.AWS_PRIVATE_NODE_CIDR
          id: #@ data.values.AWS_PRIVATE_SUBNET_ID
        cni:
          cniIngressRules:
          - description: kapp-controller
            fromPort: 10100
            protocol: tcp
            toPort: 10100
          - description: addons-manager
            fromPort: 9865
            protocol: tcp
            toPort: 9865
---
apiVersion: controlplane.cluster.x-k8s.io/v1beta1
kind: KubeadmControlPlaneTemplate
metadata:
  name: #@ "tkg-aws-default-{}-kcp".format(data.values.AWS_CLUSTER_CLASS_VERSION)
  namespace: #@ data.values.NAMESPACE
spec:
  template:
    spec:
      kubeadmConfigSpec:
        files:
        - path: /tmp/empty.txt
          owner: "root:root"
          permissions: "0600"
          content: |
            default file
        preKubeadmCommands:
        #! Ensure a non-empty preKubeadmCommands array is present to facilitate patching
        - echo "running preKubeadmCommands…"
        useExperimentalRetryJoin: true
        clusterConfiguration:
          apiServer:
            timeoutForControlPlane: "8m0s"
            extraVolumes: []
            extraArgs:
              cloud-provider: aws
              tls-cipher-suites: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384
          controllerManager:
            extraArgs:
              cloud-provider: aws
              tls-cipher-suites: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
          dns:
            imageRepository: dummy.registry.vmware.com
            imageTag: 1.8.4_dummy.5
          etcd:
            local:
              dataDir: /var/lib/etcd
              imageRepository: dummy.registry.vmware.com
              imageTag: 1.8.4_dummy.5
              extraArgs:
                cipher-suites: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
          imageRepository: dummy.registry.vmware.com
          scheduler:
            extraArgs:
              tls-cipher-suites: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
        initConfiguration:
          nodeRegistration:
            criSocket: /var/run/containerd/containerd.sock
            name: '{{ ds.meta_data.local_hostname }}'
            kubeletExtraArgs:
              cloud-provider: aws
              tls-cipher-suites: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
        joinConfiguration:
          nodeRegistration:
            criSocket: /var/run/containerd/containerd.sock
            name: '{{ ds.meta_data.local_hostname }}'
            kubeletExtraArgs:
              cloud-provider: aws
              tls-cipher-suites: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
---
kind: AWSMachineTemplate
apiVersion: infrastructure.cluster.x-k8s.io/v1beta2
metadata:
  name: #@ "tkg-aws-default-{}-control-plane".format(data.values.AWS_CLUSTER_CLASS_VERSION)
  namespace: #@ data.values.NAMESPACE
spec:
  template:
    spec:
      instanceType: #@ data.values.CONTROL_PLANE_MACHINE_TYPE
      iamInstanceProfile: "control-plane.tkg.cloud.vmware.com"
      sshKeyName: #@ data.values.AWS_SSH_KEY_NAME
      ami:
        id: #@ data.values.AWS_AMI_ID
      rootVolume:
        size: 80
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta2
kind: AWSMachineTemplate
metadata:
  name: #@ "tkg-aws-default-{}-worker".format(data.values.AWS_CLUSTER_CLASS_VERSION)
  namespace: #@ data.values.NAMESPACE
spec:
  template:
    spec:
      instanceType: #@ data.values.NODE_MACHINE_TYPE
      iamInstanceProfile: "nodes.tkg.cloud.vmware.com"
      sshKeyName: #@ data.values.AWS_SSH_KEY_NAME
      ami:
        id: #@ data.values.AWS_AMI_ID
      rootVolume:
        size: 80
---
apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
kind: KubeadmConfigTemplate
metadata:
  name: #@ "tkg-aws-default-{}-md-config".format(data.values.AWS_CLUSTER_CLASS_VERSION)
  namespace: #@ data.values.NAMESPACE
spec:
  template:
    spec:
      useExperimentalRetryJoin: true
      joinConfiguration:
        nodeRegistration:
          criSocket: /var/run/containerd/containerd.sock
          name: '{{ ds.meta_data.local_hostname }}'
          kubeletExtraArgs:
            cloud-provider: aws
            tls-cipher-suites: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
      files:
      - path: /tmp/empty.txt
        owner: "root:root"
        permissions: "0600"
        content: |
          default file
      preKubeadmCommands:
      #! Ensure a non-empty preKubeadmCommands array is present to facilitate patching
      - echo "running preKubeadmCommands…"
