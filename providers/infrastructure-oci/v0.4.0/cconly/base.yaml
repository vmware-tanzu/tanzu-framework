#@ load("@ytt:overlay", "overlay")
#@ load("@ytt:yaml", "yaml")
#@ load("@ytt:data", "data")

apiVersion: cluster.x-k8s.io/v1beta1
kind: ClusterClass
metadata:
  name: #@ "tkg-oci-default-{}".format(data.values.OCI_CLUSTER_CLASS_VERSION)
  namespace: #@ data.values.NAMESPACE
spec:
  controlPlane:
    ref:
      apiVersion: controlplane.cluster.x-k8s.io/v1beta1
      kind: KubeadmControlPlaneTemplate
      name: #@ "tkg-oci-default-{}-controlplane".format(data.values.OCI_CLUSTER_CLASS_VERSION)
    machineInfrastructure:
      ref:
        apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
        kind: OCIMachineTemplate
        name: #@ "tkg-oci-default-{}-controlplane-template".format(data.values.OCI_CLUSTER_CLASS_VERSION)
  workers:
    machineDeployments:
      - class: tkg-worker
        template:
          bootstrap:
            ref:
              apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
              kind: KubeadmConfigTemplate
              name: #@ "tkg-oci-default-{}-bootstrap-template".format(data.values.OCI_CLUSTER_CLASS_VERSION)
          infrastructure:
            ref:
              apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
              kind: OCIMachineTemplate
              name: #@ "tkg-oci-default-{}-worker-template".format(data.values.OCI_CLUSTER_CLASS_VERSION)
  infrastructure:
    ref:
      apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
      kind: OCIClusterTemplate
      name: #@ "tkg-oci-default-{}-cluster-template".format(data.values.OCI_CLUSTER_CLASS_VERSION)
  variables:
    - name: clusterRole
      required: true
      schema:
        openAPIV3Schema:
          description: Used by Tanzu Kubernetes Grid to identify if this is a management or workload cluster
          type: string
    - name: sshPublicKeyBase64
      required: false
      schema:
        openAPIV3Schema:
          description: The base64 encoded string of the SSH public key
          type: string
          default: default
    - name: compartmentID
      required: true
      schema:
        openAPIV3Schema:
          description: The OCI Compartment ID to deploy inside of
          type: string
          pattern: "ocid1\\.compartment\\.([\\w-]*)\\.([\\w-]*)\\.([\\w]{60})"
    - name: network
      required: true
      schema:
        openAPIV3Schema:
          type: object
          properties:
            vcnID:
              type: string
              pattern: "ocid1\\.vcn\\.([\\w-]+)\\.([\\w-]+)\\.([\\w]{60})"
            securityGroupIDs:
              type: object
              description: Describe the OCI Network Security Groups to be used by the cluster
              properties:
                controlPlane:
                  description: The ID of the NSG to be used for the Kubernetes Control Plane VMs
                  type: string
                  pattern: &NsgRegex "ocid1\\.networksecuritygroup\\.([\\w-]+)\\.([\\w-]+)\\.([\\w]{60})"
                controlPlaneEndpoint:
                  type: string
                  description: The ID of the NSG to be used for Kubernetes API Server Load Balancer
                  pattern: *NsgRegex
                workers:
                  type: string
                  description: The ID of the NSG to be used for all other worker nodes
                  pattern: *NsgRegex
              required:
                - workers
                - controlPlane
                - controlPlaneEndpoint
            subnetIDs:
              type: object
              properties:
                compute:
                  description: The ID of the subnet to be used for all VMs in the cluster
                  type: string
                  pattern: &SubnetRegex "ocid1\\.subnet\\.([\\w-]+)\\.([\\w-]+)\\.([\\w]{60})"
                controlPlaneEndpoint:
                  description: The ID of the subnet to be used only for the API server Load Balancer
                  type: string
                  pattern: *SubnetRegex
                privateServices:
                  description: The ID of the default subnet to use for Service Type=LoadBalancer
                  type: string
                  pattern: *SubnetRegex
                publicServices:
                  type: string
                  description: The ID of an additional subnet to use for public facing services (not implemented)
                  pattern: *SubnetRegex
              required:
              - compute
              - controlPlaneEndpoint
              - privateServices
          required:
          - vcnID
          - securityGroupIds
          - subnetIds
    - name: imageRepository
      required: false
      schema:
        openAPIV3Schema:
          type: object
          properties:
            host:
              type: string
            tlsCertificateValidation:
              type: boolean
              default: true
    - name: controlPlaneMachineSpec
      required: false
      schema: &MachineSpec
        openAPIV3Schema:
          description: Configurable properties of the VM of the machine
          type: object
          properties:
            shape:
              description: The shape of the VM to be used for all VMs
              type: string
              pattern: "[A-Z]+\\.([\\w-]+)\\.([\\w-]+)(\\.([\\w-]+))?"
              default: VM.Standard.E4.Flex
            oCpus:
              description: The number of CPUs to be used for all VMs
              type: string
              default: "1"
    - name: workerMachineSpec
      required: false
      schema: *MachineSpec
    - name: volumeInTransitEncryptionEnabled
      required: false
      schema:
        openAPIV3Schema:
          type: boolean
          default: true
    - name: cni
      required: true
      schema:
        openAPIV3Schema:
          type: string
          default: antrea
    - name: trust
      required: false
      schema:
        openAPIV3Schema:
          type: object
          properties:
            additionalTrustedCAs:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                  data:
                    type: string
                required:
                  - name
                  - data
    - name: auditLogging
      required: false
      schema:
        openAPIV3Schema:
          type: object
          properties:
            enabled:
              type: boolean
              default: false
          required:
            - enabled
          default:
            enabled: false
    - name: TKR_DATA
      required: false
      schema:
        openAPIV3Schema:
          type: object
          properties: {}
    - name: controlPlaneCertificateRotation
      required: false
      schema:
        openAPIV3Schema:
          type: object
          properties:
            activate:
              type: boolean
              default: true
            daysBefore:
              type: integer
              format: int32
              minimum: 7
              default: 90
          default:
            activate: true
            daysBefore: 90
    - name: etcdExtraArgs
      required: false
      schema:
        openAPIV3Schema:
          type: object
          additionalProperties:
            type: string
          default: { }
    - name: apiServerExtraArgs
      required: false
      schema:
        openAPIV3Schema:
          type: object
          additionalProperties:
            type: string
          default: { }
    - name: kubeSchedulerExtraArgs
      required: false
      schema:
        openAPIV3Schema:
          type: object
          additionalProperties:
            type: string
          default: { }
    - name: kubeControllerManagerExtraArgs
      required: false
      schema:
        openAPIV3Schema:
          type: object
          additionalProperties:
            type: string
          default: { }
    - name: controlPlaneKubeletExtraArgs
      required: false
      schema:
        openAPIV3Schema:
          type: object
          additionalProperties:
            type: string
          default: { }
    - name: workerKubeletExtraArgs
      required: false
      schema:
        openAPIV3Schema:
          type: object
          additionalProperties:
            type: string
          default: { }
    - name: tlsCipherSuites
      required: false
      schema:
        openAPIV3Schema:
          type: string
          default: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
  patches:
    #! JSON Patches for externally managed cluster infrastructure
    #! these patches are only enabled if a non-empty externalVCNId variable is specified
    - name: OracleClusterSpec
      definitions:
        - selector:
            apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
            kind: OCIClusterTemplate
            matchResources:
              infrastructureCluster: true
          jsonPatches:
            - op: add
              path: "/spec/template/spec/networkSpec/vcn/id"
              valueFrom:
                variable: network.vcnID
            - op: add
              path: "/spec/template/spec/compartmentId"
              valueFrom:
                variable: compartmentID
            - op: add
              path: "/spec/template/spec/networkSpec/vcn/networkSecurityGroups"
              valueFrom:
                template: |
                  - id: {{ .network.securityGroupIds.controlPlaneEndpoint }}
                    role: control-plane-endpoint
                    name: control-plane-endpoint
                  - id: {{ .network.securityGroupIds.workers }}
                    role: worker
                    name: worker
                  - id: {{ .network.securityGroupIds.controlPlane }}
                    role: control-plane
                    name: control-plane
            - op: add
              path: "/spec/template/spec/networkSpec/vcn/subnets"
              valueFrom:
                template: |
                  - id: {{ .network.subnetIds.controlPlaneEndpoint }}
                    role: control-plane-endpoint
                    name: control-plane-endpoint
                  - id: {{ .network.subnetIds.compute }}
                    role: worker
                    name: worker
                  - id: {{ .network.subnetIds.compute }}
                    role: control-plane
                    name: control-plane
    - name: OracleSpecificControlPlaneMachineeConfiguration
      definitions:
        - selector:
            apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
            kind: OCIMachineTemplate
            matchResources:
              controlPlane: true
          jsonPatches:
            - &OCPUsPatch
              op: add
              path: /spec/template/spec/shapeConfig/ocpus
              valueFrom:
                variable: controlPlaneMachineSpec.oCpus
            - &PvTransitEncryption
              op: add
              path: "/spec/template/spec/isPvEncryptionInTransitEnabled"
              valueFrom:
                variable: volumeInTransitEncryptionEnabled
            - &ImageID
              op: add
              path: "/spec/template/spec/imageId"
              valueFrom:
                template: '{{ (index .TKR_DATA .builtin.controlPlane.version).osImageRef.id }}'
            - &MachineShape
              op: add
              path: "/spec/template/spec/shape"
              valueFrom:
                variable: controlPlaneMachineSpec.shape
            - &sshPublicKey
              op: add
              path: "/spec/template/spec/metadata/ssh_authorized_keys"
              valueFrom:
                variable: sshPublicKeyBase64
    - name: OracleSpecificWorkerMachineConfiguration
      definitions:
        - selector:
            apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
            kind: OCIMachineTemplate
            matchResources:
              machineDeploymentClass:
                names:
                  - tkg-worker
          jsonPatches:
            - <<: *OCPUsPatch
              valueFrom: #@yaml/map-key-override
                variable: workerMachineSpec.oCpus
            - *PvTransitEncryption
            - <<: *ImageID
              valueFrom: #@yaml/map-key-override
                template: '{{ (index .TKR_DATA .builtin.machineDeployment.version).osImageRef.id }}'
            - <<: *MachineShape
              valueFrom: #@yaml/map-key-override
                variable: workerMachineSpec.shape
            - *sshPublicKey
    - name: apiServerBindPort
      enabledIf: '{{ not (empty .apiServerPort) }}'
      definitions:
        - selector:
            apiVersion: controlplane.cluster.x-k8s.io/v1beta1
            kind: KubeadmControlPlaneTemplate
            matchResources:
              controlPlane: true
          jsonPatches:
            - op: add
              path: /spec/template/spec/kubeadmConfigSpec/initConfiguration/localAPIEndpoint
              valueFrom:
                template: |
                  advertiseAddress: '0.0.0.0'
                  bindPort: {{ .apiServerPort }}
            - op: add
              path: /spec/template/spec/kubeadmConfigSpec/joinConfiguration/controlPlane
              valueFrom:
                template: |
                  localAPIEndpoint:
                    advertiseAddress: '0.0.0.0'
                    bindPort: {{ .apiServerPort }}
    - name: TKROpenContainerImageReplacements
      definitions:
        - selector:
            apiVersion: controlplane.cluster.x-k8s.io/v1beta1
            kind: KubeadmControlPlaneTemplate
            matchResources:
              controlPlane: true
          jsonPatches:
            - op: replace
              path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/imageRepository
              valueFrom:
                template: '{{ (index .TKR_DATA .builtin.controlPlane.version).kubernetesSpec.imageRepository }}'
            - op: replace
              path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/etcd/local/imageRepository
              valueFrom:
                template: '{{ (index .TKR_DATA .builtin.controlPlane.version).kubernetesSpec.imageRepository }}'
            - op: replace
              path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/etcd/local/imageTag
              valueFrom:
                template: '{{ (index .TKR_DATA .builtin.controlPlane.version).kubernetesSpec.etcd.imageTag }}'
            - op: replace
              path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/dns/imageRepository
              valueFrom:
                template: '{{ (index .TKR_DATA .builtin.controlPlane.version).kubernetesSpec.imageRepository }}'
            - op: replace
              path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/dns/imageTag
              valueFrom:
                template: '{{ (index .TKR_DATA .builtin.controlPlane.version).kubernetesSpec.coredns.imageTag }}'
    - name: customizedImageRepo
      enabledIf: '{{ not (empty .imageRepository.host) }}'
      definitions:
        - selector:
            apiVersion: controlplane.cluster.x-k8s.io/v1beta1
            kind: KubeadmControlPlaneTemplate
            matchResources:
              controlPlane: true
          jsonPatches:
            - op: add
              path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
              valueFrom:
                template: |
                  sed -i 's|".*/pause|" {{- or .imageRepository.host (index .TKR_DATA .builtin.controlPlane.version).kubernetesSpec.imageRepository -}} /pause|' /etc/containerd/config.toml
        - selector:
            apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
            kind: KubeadmConfigTemplate
            matchResources:
              machineDeploymentClass:
                names:
                  - tkg-worker
          jsonPatches:
            - op: add
              path: /spec/template/spec/preKubeadmCommands/-
              valueFrom:
                template: |
                  sed -i 's|".*/pause|" {{- or .imageRepository.host (index .TKR_DATA .builtin.machineDeployment.version).kubernetesSpec.imageRepository -}} /pause|' /etc/containerd/config.toml
    - name: kcptCertificateRotation
      enabledIf: '{{ .controlPlaneCertificateRotation.activate }}'
      definitions:
        - selector:
            apiVersion: controlplane.cluster.x-k8s.io/v1beta1
            kind: KubeadmControlPlaneTemplate
            matchResources:
              controlPlane: true
          jsonPatches:
            - op: add
              path: /spec/template/spec/rolloutBefore
              valueFrom:
                template: |
                  certificatesExpiryDays: {{ .controlPlaneCertificateRotation.daysBefore }}
    - name: httpProxy
      enabledIf: '{{ not (empty .proxy) }}'
      definitions:
      - selector:
          apiVersion: controlplane.cluster.x-k8s.io/v1beta1
          kind: KubeadmControlPlaneTemplate
          matchResources:
            controlPlane: true
        jsonPatches:
        - op: add
          path: /spec/template/spec/kubeadmConfigSpec/files/-
          valueFrom:
            template: &containerdProxyConf |
              content: |
                [Service]
                Environment="HTTP_PROXY= {{- .proxy.httpProxy -}} "
                Environment="HTTPS_PROXY= {{- .proxy.httpsProxy -}} "
                Environment="NO_PROXY= {{- list "localhost" "127.0.0.1" ".svc" ".svc.cluster.local" ((list "IPv6" "DualStack" | has .builtin.cluster.network.ipFamily) | ternary  "::1" nil) | concat .proxy.noProxy .builtin.cluster.network.services .builtin.cluster.network.pods | uniq | sortAlpha | join "," -}} "
              owner: root:root
              path: /etc/systemd/system/containerd.service.d/http-proxy.conf
              permissions: "0640"
        - op: add
          path: /spec/template/spec/kubeadmConfigSpec/files/-
          valueFrom:
            template: &kubeletProxyConf |
              content: |
                [Service]
                Environment="HTTP_PROXY= {{- .proxy.httpProxy -}} "
                Environment="HTTPS_PROXY= {{- .proxy.httpsProxy -}} "
                Environment="NO_PROXY= {{- list "localhost" "127.0.0.1" ".svc" ".svc.cluster.local" ((list "IPv6" "DualStack" | has .builtin.cluster.network.ipFamily) | ternary  "::1" nil) | concat .proxy.noProxy .builtin.cluster.network.services .builtin.cluster.network.pods | uniq | sortAlpha | join "," -}} "
              owner: root:root
              path: /usr/lib/systemd/system/kubelet.service.d/http-proxy.conf
              permissions: "0640"
        - op: add
          path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
          value: systemctl daemon-reload
        - op: add
          path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
          value: systemctl stop containerd
        - op: add
          path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
          value: systemctl start containerd
        - op: add
          path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
          valueFrom:
            template: &exportHTTPProxy |
              export HTTP_PROXY= {{- .proxy.httpProxy }}
        - op: add
          path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
          valueFrom:
            template: &exportHTTPSProxy |
              export HTTPS_PROXY= {{- .proxy.httpsProxy }}
        - op: add
          path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
          valueFrom:
            template: &exportNoProxy |
              export NO_PROXY= {{- list "localhost" "127.0.0.1" ".svc" ".svc.cluster.local" ((list "IPv6" "DualStack" | has .builtin.cluster.network.ipFamily) | ternary  "::1" nil) | concat .proxy.noProxy .builtin.cluster.network.services .builtin.cluster.network.pods | uniq | sortAlpha | join "," }}
      - selector:
          apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
          kind: KubeadmConfigTemplate
          matchResources:
            machineDeploymentClass:
              names:
              - tkg-worker
        jsonPatches:
        - op: add
          path: /spec/template/spec/files/-
          valueFrom:
            template: *containerdProxyConf
        - op: add
          path: /spec/template/spec/files/-
          valueFrom:
            template: *kubeletProxyConf
        - op: add
          path: /spec/template/spec/preKubeadmCommands/-
          value: systemctl daemon-reload
        - op: add
          path: /spec/template/spec/preKubeadmCommands/-
          value: systemctl restart containerd
        - op: add
          path: /spec/template/spec/preKubeadmCommands/-
          valueFrom:
            template: *exportHTTPProxy
        - op: add
          path: /spec/template/spec/preKubeadmCommands/-
          valueFrom:
            template: *exportHTTPSProxy
        - op: add
          path: /spec/template/spec/preKubeadmCommands/-
          valueFrom:
            template: *exportNoProxy
    - name: httpProxyCACert
      enabledIf: '{{ $hasProxyCert := false }} {{- range .trust.additionalTrustedCAs }} {{- if .name | eq "proxy" }} {{- $hasProxyCert = true }} {{- end }} {{- end }} {{- $hasProxyCert }}'
      definitions:
      - selector:
          apiVersion: controlplane.cluster.x-k8s.io/v1beta1
          kind: KubeadmControlPlaneTemplate
          matchResources:
            controlPlane: true
        jsonPatches:
        - op: add
          path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
          value: '! which rehash_ca_certificates.sh 2>/dev/null || rehash_ca_certificates.sh'
        - op: add
          path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
          value: '! which update-ca-certificates 2>/dev/null || (mv /etc/ssl/certs/tkg-custom-ca.pem /usr/local/share/ca-certificates/tkg-custom-ca.crt && update-ca-certificates)'
        - op: add
          path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
          value: '! which update-ca-trust 2>/dev/null || (update-ca-trust force-enable && mv /etc/ssl/certs/tkg-custom-ca.pem /etc/pki/ca-trust/source/anchors/tkg-custom-ca.crt && update-ca-trust extract)'
        - op: add
          path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
          value: systemctl restart containerd
        - op: add
          path: /spec/template/spec/kubeadmConfigSpec/files/-
          valueFrom:
            template: |
              path: /etc/ssl/certs/tkg-custom-ca.pem
              {{- $proxy := "" }}
              {{- range .trust.additionalTrustedCAs }}
                {{- if eq .name "proxy" }}
                  {{- $proxy = .data }}
                {{- end }}
              {{- end }}
              content: {{ $proxy }}
              encoding: base64
              permissions: "0444"
      - selector:
          apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
          kind: KubeadmConfigTemplate
          matchResources:
            machineDeploymentClass:
              names:
              - tkg-worker
        jsonPatches:
        - op: add
          path: /spec/template/spec/preKubeadmCommands/-
          value: '! which rehash_ca_certificates.sh 2>/dev/null || rehash_ca_certificates.sh'
        - op: add
          path: /spec/template/spec/preKubeadmCommands/-
          value: '! which update-ca-certificates 2>/dev/null || (mv /etc/ssl/certs/tkg-custom-ca.pem /usr/local/share/ca-certificates/tkg-custom-ca.crt && update-ca-certificates)'
        - op: add
          path: /spec/template/spec/preKubeadmCommands/-
          value: '! which update-ca-trust 2>/dev/null || (update-ca-trust force-enable && mv /etc/ssl/certs/tkg-custom-ca.pem /etc/pki/ca-trust/source/anchors/tkg-custom-ca.crt && update-ca-trust extract)'
        - op: add
          path: /spec/template/spec/preKubeadmCommands/-
          value: systemctl restart containerd
        - op: add
          path: /spec/template/spec/files/-
          valueFrom:
            template: |
              path: /etc/ssl/certs/tkg-custom-ca.pem
              {{- $proxy := "" }}
              {{- range .trust.additionalTrustedCAs }}
                {{- if eq .name "proxy" }}
                  {{- $proxy = .data }}
                {{- end }}
              {{- end }}
              content: {{ $proxy }}
              encoding: base64
              permissions: "0444"
    - name: registryCACert
      enabledIf: '{{ not (empty .trust.additionalTrustedCAs) }}'
      definitions:
      - selector:
          apiVersion: controlplane.cluster.x-k8s.io/v1beta1
          kind: KubeadmControlPlaneTemplate
          matchResources:
            controlPlane: true
        jsonPatches:
        - op: add
          path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
          valueFrom:
            template: |
              {{- $host := index (or .imageRepository.host (index .TKR_DATA .builtin.controlPlane.version).kubernetesSpec.imageRepository | splitList "/") 0 -}}
              echo '[plugins."io.containerd.grpc.v1.cri".registry.configs." {{- $host -}} ".tls]' >> /etc/containerd/config.toml
        - op: add
          path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
          valueFrom:
            template: |
              {{- $host := index (or .imageRepository.host (index .TKR_DATA .builtin.controlPlane.version).kubernetesSpec.imageRepository | splitList "/") 0 }}
              {{- $val := list "ca_file = \"/etc/containerd/" $host ".crt\"" | join "" }}
              {{- with .imageRepository }}
                {{- if .tlsCertificateValidation | eq false }}
                  {{- $val = "insecure_skip_verify = true" }}
                {{- end }}
              {{- end -}}
              {{- define "echo" -}}
                echo '  {{ . -}} ' >> /etc/containerd/config.toml
              {{- end }}
              {{- template "echo" $val -}}
        - op: add
          path: /spec/template/spec/kubeadmConfigSpec/preKubeadmCommands/-
          value: systemctl restart containerd
        - op: add
          path: /spec/template/spec/kubeadmConfigSpec/files/-
          valueFrom:
            template: |
              path: /etc/containerd/ {{- index (or .imageRepository.host (index .TKR_DATA .builtin.controlPlane.version).kubernetesSpec.imageRepository | splitList "/") 0 -}} .crt
              {{- $proxy := "" }}
              {{- $image := "" }}
              {{- range .trust.additionalTrustedCAs }}
                {{- if eq .name "proxy" }}
                  {{- $proxy = .data }}
                {{- end }}
                {{- if eq .name "imageRepository" }}
                  {{- $image = .data }}
                {{- end }}
              {{- end }}
              content: {{or $proxy $image}}
              encoding: base64
              permissions: "0444"
      - selector:
          apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
          kind: KubeadmConfigTemplate
          matchResources:
            machineDeploymentClass:
              names:
              - tkg-worker
        jsonPatches:
        - op: add
          path: /spec/template/spec/preKubeadmCommands/-
          valueFrom:
            template: |
              {{- $host := index (or .imageRepository.host (index .TKR_DATA .builtin.machineDeployment.version).kubernetesSpec.imageRepository | splitList "/") 0 -}}
              echo '[plugins."io.containerd.grpc.v1.cri".registry.configs." {{- $host -}} ".tls]' >> /etc/containerd/config.toml
        - op: add
          path: /spec/template/spec/preKubeadmCommands/-
          valueFrom:
            template: |
              {{- $host := index (or .imageRepository.host (index .TKR_DATA .builtin.machineDeployment.version).kubernetesSpec.imageRepository | splitList "/") 0 }}
              {{- $val := list "ca_file = \"/etc/containerd/" $host ".crt\"" | join "" }}
              {{- with .imageRepository }}
                {{- if .tlsCertificateValidation | eq false }}
                  {{- $val = "insecure_skip_verify = true" }}
                {{- end }}
              {{- end -}}
              {{- define "echo" -}}
                echo '  {{ . -}} ' >> /etc/containerd/config.toml
              {{- end }}
              {{- template "echo" $val -}}
        - op: add
          path: /spec/template/spec/preKubeadmCommands/-
          value: systemctl restart containerd
        - op: add
          path: /spec/template/spec/files/-
          valueFrom:
            template: |
              path: /etc/containerd/{{ index (or .imageRepository.host (index .TKR_DATA .builtin.machineDeployment.version).kubernetesSpec.imageRepository | splitList "/") 0 }}.crt
              {{- $proxy := "" }}
              {{- $image := "" }}
              {{- range .trust.additionalTrustedCAs }}
                {{- if eq .name "proxy" }}
                  {{- $proxy = .data }}
                {{- end }}
                {{- if eq .name "imageRepository" }}
                  {{- $image = .data }}
                {{- end }}
              {{- end }}
              content: {{or $proxy $image}}
              encoding: base64
              permissions: "0444"
    - name: etcdExtraArgs
      definitions:
        - selector:
            apiVersion: controlplane.cluster.x-k8s.io/v1beta1
            kind: KubeadmControlPlaneTemplate
            matchResources:
              controlPlane: true
          jsonPatches:
            - op: add
              path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/etcd/local/extraArgs
              valueFrom:
                template: |
                  {{ $containCipherSuites := false }}
                  {{- range $key, $val := .etcdExtraArgs }}
                  {{- if eq $key "cipher-suites" }}
                    {{- $containCipherSuites = true }}
                  {{- end }}
                  {{ $key -}} : "{{ $val }}"
                  {{- end }}
                  {{- if not $containCipherSuites }}
                  cipher-suites: "{{ .tlsCipherSuites }}"
                  {{- end }}
    - name: apiServerExtraArgs
      definitions:
        - selector:
            apiVersion: controlplane.cluster.x-k8s.io/v1beta1
            kind: KubeadmControlPlaneTemplate
            matchResources:
              controlPlane: true
          jsonPatches:
            - op: add
              path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/apiServer/extraArgs
              valueFrom:
                template: |
                  {{ $containCipherSuites := false }}
                  {{- range $key, $val := .apiServerExtraArgs }}
                  {{- if eq $key "tls-cipher-suites" }}
                    {{- $containCipherSuites = true }}
                  {{- end }}
                  {{ $key -}} : "{{ $val }}"
                  {{- end }}
                  {{- if not $containCipherSuites }}
                  tls-cipher-suites: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384,TLS_RSA_WITH_AES_256_GCM_SHA384
                  {{- end }}
    - name: kubeSchedulerExtraArgs
      definitions:
        - selector:
            apiVersion: controlplane.cluster.x-k8s.io/v1beta1
            kind: KubeadmControlPlaneTemplate
            matchResources:
              controlPlane: true
          jsonPatches:
            - op: add
              path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/scheduler/extraArgs
              valueFrom:
                template: |
                  {{ $containCipherSuites := false }}
                  {{- range $key, $val := .kubeSchedulerExtraArgs }}
                  {{- if eq $key "tls-cipher-suites" }}
                    {{- $containCipherSuites = true }}
                  {{- end }}
                  {{ $key -}} : "{{ $val }}"
                  {{- end }}
                  {{- if not $containCipherSuites }}
                  tls-cipher-suites: "{{ .tlsCipherSuites }}"
                  {{- end }}
    - name: kubeControllerManagerExtraArgs
      definitions:
        - selector:
            apiVersion: controlplane.cluster.x-k8s.io/v1beta1
            kind: KubeadmControlPlaneTemplate
            matchResources:
              controlPlane: true
          jsonPatches:
            - op: add
              path: /spec/template/spec/kubeadmConfigSpec/clusterConfiguration/controllerManager/extraArgs
              valueFrom:
                template: |
                  {{ $containCipherSuites := false }}
                  {{- range $key, $val := .kubeControllerManagerExtraArgs }}
                  {{- if eq $key "tls-cipher-suites" }}
                    {{- $containCipherSuites = true }}
                  {{- end }}
                  {{ $key -}} : "{{ $val }}"
                  {{- end }}
                  {{- if not $containCipherSuites }}
                  tls-cipher-suites: "{{ .tlsCipherSuites }}"
                  {{- end }}
    - name: controlPlaneKubeletExtraArgs
      definitions:
        - selector:
            apiVersion: controlplane.cluster.x-k8s.io/v1beta1
            kind: KubeadmControlPlaneTemplate
            matchResources:
              controlPlane: true
          jsonPatches:
            - op: add
              path: /spec/template/spec/kubeadmConfigSpec/initConfiguration/nodeRegistration/kubeletExtraArgs
              valueFrom:
                template: |
                  {{ $containCipherSuites := false }}
                  {{ $containCloudProvider := false }}
                  {{ $containProviderId := false }}
                  {{- range $key, $val := .controlPlaneKubeletExtraArgs }}
                  {{- if eq $key "tls-cipher-suites" }}
                    {{- $containCipherSuites = true }}
                  {{- end }}
                  {{- if eq $key "cloud-provider" }}
                    {{- $containCloudProvider = true }}
                  {{- end }}
                  {{- if eq $key "provider-id" }}
                    {{- $containProviderId = true }}
                  {{- end }}
                  {{ $key -}} : "{{ $val }}"
                  {{- end }}
                  {{- if not $containCipherSuites }}
                  tls-cipher-suites: "{{ .tlsCipherSuites }}"
                  {{- end }}
                  {{- if not $containCloudProvider }}
                  cloud-provider: external
                  {{- end }}
                  {{- if not $containProviderId }}
                  provider-id: oci://{{"{{"}} ds["id"] {{"}}"}}
                  {{- end }}
            - op: add
              path: /spec/template/spec/kubeadmConfigSpec/joinConfiguration/nodeRegistration/kubeletExtraArgs
              valueFrom:
                template: |
                  {{ $containCipherSuites := false }}
                  {{ $containCloudProvider := false }}
                  {{ $containProviderId := false }}
                  {{- range $key, $val := .controlPlaneKubeletExtraArgs }}
                  {{- if eq $key "tls-cipher-suites" }}
                    {{- $containCipherSuites = true }}
                  {{- end }}
                  {{- if eq $key "cloud-provider" }}
                    {{- $containCloudProvider = true }}
                  {{- end }}
                  {{- if eq $key "provider-id" }}
                    {{- $containProviderId = true }}
                  {{- end }}
                  {{ $key -}} : "{{ $val }}"
                  {{- end }}
                  {{- if not $containCipherSuites }}
                  tls-cipher-suites: "{{ .tlsCipherSuites }}"
                  {{- end }}
                  {{- if not $containCloudProvider }}
                  cloud-provider: external
                  {{- end }}
                  {{- if not $containProviderId }}
                  provider-id: oci://{{"{{"}} ds["id"] {{"}}"}}
                  {{- end }}
    - name: workerKubeletExtraArgs
      definitions:
        - selector:
            apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
            kind: KubeadmConfigTemplate
            matchResources:
              machineDeploymentClass:
                names:
                  - "tkg-worker"
          jsonPatches:
            - op: add
              path: /spec/template/spec/joinConfiguration/nodeRegistration/kubeletExtraArgs
              valueFrom:
                template: |
                  {{ $containCipherSuites := false }}
                  {{ $containCloudProvider := false }}
                  {{ $containProviderId := false }}
                  {{- range $key, $val := .workerKubeletExtraArgs }}
                  {{- if eq $key "tls-cipher-suites" }}
                    {{- $containCipherSuites = true }}
                  {{- end }}
                  {{- if eq $key "cloud-provider" }}
                    {{- $containCloudProvider = true }}
                  {{- end }}
                  {{- if eq $key "provider-id" }}
                    {{- $containProviderId = true }}
                  {{- end }}
                  {{ $key -}} : "{{ $val }}"
                  {{- end }}
                  {{- if not $containCipherSuites }}
                  tls-cipher-suites: "{{ .tlsCipherSuites }}"
                  {{- end }}
                  {{- if not $containCloudProvider }}
                  cloud-provider: external
                  {{- end }}
                  {{- if not $containProviderId }}
                  provider-id: oci://{{"{{"}} ds["id"] {{"}}"}}
                  {{- end }}
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: OCIClusterTemplate
metadata:
  name: #@ "tkg-oci-default-{}-cluster-template".format(data.values.OCI_CLUSTER_CLASS_VERSION)
  namespace: #@ data.values.NAMESPACE
spec:
  template:
    spec:
      networkSpec:
        skipNetworkManagement: true
        vcn:
          subnets:
          networkSecurityGroups:
---
apiVersion: controlplane.cluster.x-k8s.io/v1beta1
kind: KubeadmControlPlaneTemplate
metadata:
  name: #@ "tkg-oci-default-{}-controlplane".format(data.values.OCI_CLUSTER_CLASS_VERSION)
  namespace: #@ data.values.NAMESPACE
spec:
  template:
    spec:
      kubeadmConfigSpec:
        files: []
        preKubeadmCommands:
          #! Ensure a non-empty preKubeadmCommands array is present to facilitate patching
          - echo "running preKubeadmCommands..."
        useExperimentalRetryJoin: true
        clusterConfiguration:
          apiServer:
            timeoutForControlPlane: "8m0s"
            extraVolumes: []
            extraArgs: {}
          controllerManager:
            extraArgs: {}
          dns:
            imageRepository: dummy.registry.vmware.com
            imageTag: 1.8.4_dummy.5
          etcd:
            local:
              dataDir: /var/lib/etcd
              imageRepository: dummy.registry.vmware.com
              imageTag: 1.8.4_dummy.5
              extraArgs: {}
          imageRepository: dummy.registry.vmware.com
          scheduler:
            extraArgs: {}
        initConfiguration:
          nodeRegistration:
            name: '{{ ds["hostname"] }}'
            kubeletExtraArgs: {}
        joinConfiguration:
          nodeRegistration:
            name: '{{ ds["hostname"] }}'
            kubeletExtraArgs: {}
---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: OCIMachineTemplate
metadata:
  name: #@ "tkg-oci-default-{}-controlplane-template".format(data.values.OCI_CLUSTER_CLASS_VERSION)
  namespace: #@ data.values.NAMESPACE
spec:
  template:
    spec:
      #! will be replaced by shape variable defined above
      shape: VM.Standard.E4.Flex
      metadata: {}
      shapeConfig: {}

---
apiVersion: infrastructure.cluster.x-k8s.io/v1beta1
kind: OCIMachineTemplate
metadata:
  name: #@ "tkg-oci-default-{}-worker-template".format(data.values.OCI_CLUSTER_CLASS_VERSION)
  namespace: #@ data.values.NAMESPACE
spec:
  template:
    spec:
      #! will be replaced by shape variable defined above
      shape: VM.Standard.E4.Flex
      metadata: {}
      shapeConfig: {}
---
apiVersion: bootstrap.cluster.x-k8s.io/v1beta1
kind: KubeadmConfigTemplate
metadata:
  name: #@ "tkg-oci-default-{}-bootstrap-template".format(data.values.OCI_CLUSTER_CLASS_VERSION)
  namespace: #@ data.values.NAMESPACE
spec:
  template:
    spec:
      joinConfiguration:
        nodeRegistration:
          kubeletExtraArgs: {}
      preKubeadmCommands: []
      files: []
