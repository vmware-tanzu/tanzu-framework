#@ load("@ytt:overlay", "overlay")
#@ load("@ytt:data", "data")
#@ load("@ytt:json", "json")
#@ load("@ytt:base64", "base64")

#@ load("@ytt:yaml", "yaml")
#@ load("@ytt:struct", "struct")
#@ load("/lib/config_variable_association.star", "config_variable_association", "get_oci_vars", "oci_var_keys")

#@ load("lib/helpers.star", "get_bom_data_for_tkr_name", "kubeadm_image_repo", "get_default_tkg_bom_data")
#@ load("lib/validate.star", "validate_configuration")

#@ validate_configuration("oci")

#@ bomDataForK8sVersion = get_bom_data_for_tkr_name()

#@ bomData = get_default_tkg_bom_data()

#@overlay/match by=overlay.subset({"kind":"Cluster"})
---
apiVersion: cluster.x-k8s.io/v1beta1
kind: Cluster
metadata:
  name: #@ data.values.CLUSTER_NAME
  labels:
    #@overlay/match missing_ok=True
    #@yaml/text-templated-strings
    #@ if data.values.TKG_CLUSTER_ROLE != "workload":
    cluster-role.tkg.tanzu.vmware.com/(@= data.values.TKG_CLUSTER_ROLE @): ""
    #@ end
    tkg.tanzu.vmware.com/cluster-name: #@ data.values.CLUSTER_NAME
    #@overlay/match missing_ok=True
    tanzuKubernetesRelease: #@ data.values.KUBERNETES_RELEASE
spec:
  clusterNetwork:
    #@ if data.values.CLUSTER_API_SERVER_PORT:
    #@overlay/match missing_ok=True
    apiServerPort: #@ data.values.CLUSTER_API_SERVER_PORT
    #@ end
    pods:
      cidrBlocks:
        #@overlay/match by=overlay.index(0)
        - #@ data.values.CLUSTER_CIDR
    services:
      cidrBlocks:
        #@overlay/match by=overlay.index(0)
        - #@ data.values.SERVICE_CIDR
  topology:
    class: #@ data.values.CLUSTER_CLASS
    version: #@ data.values.KUBERNETES_VERSION
    controlPlane:
      replicas: #@ data.values.CONTROL_PLANE_MACHINE_COUNT
      metadata:
        annotations:
          #! VVV TODO(vui) os-name handling
          run.tanzu.vmware.com/resolve-os-image: #@ "oci-region={},os-name=ubuntu".format(data.values.OCI_REGION)
    workers:
      machineDeployments:
        #@overlay/match by=overlay.index(0)
        - class: tkg-worker
          name: md-0
          replicas: #@ data.values.WORKER_MACHINE_COUNT_0
          #@overlay/match missing_ok=True
          failureDomain: "1"
          metadata:
            annotations:
              #! VVV TODO(vui) os-name handling
              run.tanzu.vmware.com/resolve-os-image: #@ "oci-region={},os-name=ubuntu".format(data.values.OCI_REGION)
        #@ if data.values.CLUSTER_PLAN == "prodcc":
        #@overlay/append
        - class: tkg-worker
          name: md-1
          replicas: #@ data.values.WORKER_MACHINE_COUNT_1
          failureDomain: #@ "2"
          metadata:
            annotations:
              #! VVV TODO(vui) os-name handling
              run.tanzu.vmware.com/resolve-os-image: #@ "oci-region={},os-name=ubuntu".format(data.values.OCI_REGION)
        #@overlay/append
        - class: tkg-worker
          name: md-2
          replicas: #@ data.values.WORKER_MACHINE_COUNT_2
          failureDomain: #@ "3"
          metadata:
            annotations:
              #! VVV TODO(vui) os-name handling
              run.tanzu.vmware.com/resolve-os-image: #@ "oci-region={},os-name=ubuntu".format(data.values.OCI_REGION)
      #@ end
    #@overlay/match missing_ok=True
    variables:
      #@ vars = get_oci_vars()
      #@ for configVariable in vars:
      #@  if vars[configVariable] != None and configVariable in oci_var_keys:
      - name: #@ configVariable
        value: #@ vars[configVariable]
      #@  end
      #@ end
