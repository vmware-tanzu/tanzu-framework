#@ load("@ytt:assert", "assert")
#@ load("@ytt:data", "data")
#@ load("@ytt:yaml", "yaml")
#@ load("@ytt:ip", "ip")

#@ load("pinniped_addon_secret.lib.yaml", "getPinnipedDataValuesForMC")

#@ vsphereControlPlaneEndpointAsCidr = ""
#@ if data.values.PROVIDER_TYPE == "vsphere" and data.values.VSPHERE_CONTROL_PLANE_ENDPOINT and not data.values.AVI_CONTROL_PLANE_HA_PROVIDER:
#@   vsphereControlPlaneEndpoint, err = assert.try_to(lambda : ip.parse_addr(data.values.VSPHERE_CONTROL_PLANE_ENDPOINT))
#@   if err == None:
#@     if vsphereControlPlaneEndpoint.is_ipv4():
#@       vsphereControlPlaneEndpointAsCidr = vsphereControlPlaneEndpoint.string() + "/32"
#@     end
#@     if vsphereControlPlaneEndpoint.is_ipv6():
#@       vsphereControlPlaneEndpointAsCidr = vsphereControlPlaneEndpoint.string() + "/128"
#@     end
#@   end
#@ end

#@ def pinniped_configs_exist():
#@   return data.values.IDENTITY_MANAGEMENT_TYPE == "oidc" or data.values.IDENTITY_MANAGEMENT_TYPE == "ldap"
#@ end

#@ def is_management_cluster():
#@   return data.values.TKG_CLUSTER_ROLE == "management"
#@ end

#@ def split_comma_values(value):
#@  return value.split(",") if value else []
#@ end

#@ def antrea_config_customized():
#@   return (data.values.NSXT_POD_ROUTING_ENABLED or
#@           not data.values.ANTREA_PROXY or
#@           not data.values.ANTREA_ENDPOINTSLICE or
#@           not data.values.ANTREA_POLICY or
#@           not data.values.ANTREA_TRACEFLOW or
#@           not data.values.ANTREA_NODEPORTLOCAL or
#@           data.values.ANTREA_NETWORKPOLICY_STATS or
#@           not data.values.ANTREA_EGRESS or
#@           data.values.ANTREA_IPAM or
#@           data.values.ANTREA_FLOWEXPORTER or
#@           data.values.ANTREA_SERVICE_EXTERNALIP or
#@           data.values.ANTREA_MULTICLUSTER or
#@           data.values.ANTREA_SECONDARY_NETWORK or
#@           data.values.ANTREA_TRAFFIC_CONTROL or
#@           data.values.ANTREA_TOPOLOGY_AWARE_HINTS or
#@           data.values.ANTREA_MULTICAST or
#@           data.values.ANTREA_NO_SNAT or
#@           data.values.ANTREA_DISABLE_UDP_TUNNEL_OFFLOAD or
#@           data.values.ANTREA_TRAFFIC_ENCAP_MODE != "encap" or
#@           data.values.ANTREA_EGRESS_EXCEPT_CIDRS != "" or
#@           not data.values.ANTREA_NODEPORTLOCAL_ENABLED or
#@           data.values.ANTREA_NODEPORTLOCAL_PORTRANGE != "61000-62000" or
#@           data.values.ANTREA_PROXY_ALL or
#@           data.values.ANTREA_PROXY_NODEPORT_ADDRS != "" or
#@           data.values.ANTREA_PROXY_SKIP_SERVICES != "" or
#@           data.values.ANTREA_PROXY_LOAD_BALANCER_IPS or
#@           data.values.ANTREA_FLOWEXPORTER_COLLECTOR_ADDRESS != "flow-aggregator.flow-aggregator.svc:4739:tls" or
#@           data.values.ANTREA_FLOWEXPORTER_POLL_INTERVAL != "5s" or
#@           data.values.ANTREA_FLOWEXPORTER_ACTIVE_TIMEOUT != "30s" or
#@           data.values.ANTREA_FLOWEXPORTER_IDLE_TIMEOUT != "15s" or
#@           data.values.ANTREA_KUBE_APISERVER_OVERRIDE != None or
#@           data.values.ANTREA_TRANSPORT_INTERFACE != None or
#@           data.values.ANTREA_TRANSPORT_INTERFACE_CIDRS != "" or
#@           data.values.ANTREA_MULTICAST_INTERFACES != "" or
#@           data.values.ANTREA_MULTICAST_IGMPQUERY_INTERVAL != "125s" or
#@           data.values.ANTREA_TUNNEL_TYPE != "geneve" or
#@           data.values.ANTREA_TUNNEL_PORT != 0 or
#@           data.values.ANTREA_TUNNEL_CSUM or
#@           data.values.ANTREA_TRAFFIC_ENCRYPTION_MODE != "none" or
#@           data.values.ANTREA_WIREGUARD_PORT != 51820 or
#@           data.values.ANTREA_ENABLE_USAGE_REPORTING or
#@           data.values.ANTREA_ENABLE_BRIDGING_MODE or
#@           data.values.ANTREA_DISABLE_TXCHECKSUM_OFFLOAD or
#@           data.values.ANTREA_DNS_SERVER_OVERRIDE != "" or
#@           data.values.ANTREA_MULTICLUSTER_ENABLE or
#@           data.values.ANTREA_MULTICLUSTER_NAMESPACE != "")
#@ end

#@ def vspherecpi_configs_exist():
#@   return data.values.PROVIDER_TYPE == "vsphere" and (data.values.TKG_IP_FAMILY or data.values.VSPHERE_REGION or data.values.VSPHERE_ZONE or data.values.NSXT_MANAGER_HOST or
#@               not data.values.AVI_CONTROL_PLANE_HA_PROVIDER or (data.values.TKG_HTTP_PROXY != "" or
#@               data.values.TKG_HTTPS_PROXY != "" or
#@               data.values.TKG_NO_PROXY != ""))
#@ end

#@ def vspherecsi_configs_exist():
#@   return data.values.PROVIDER_TYPE == "vsphere" and ((not data.values.VSPHERE_INSECURE or
#@           data.values.USE_TOPOLOGY_CATEGORIES) or (data.values.TKG_HTTP_PROXY != "" or
#@           data.values.TKG_HTTPS_PROXY != "" or
#@           data.values.TKG_NO_PROXY != ""))
#@ end

#@ def azurediskcsi_configs_exist():
#@   return data.values.PROVIDER_TYPE == "azure" and (data.values.TKG_HTTP_PROXY != "" or
#@                                                  data.values.TKG_HTTPS_PROXY != "" or
#@                                                  data.values.TKG_NO_PROXY != "")
#@ end

#@ def storage_class_customized():
#@   return not data.values.ENABLE_DEFAULT_STORAGE_CLASS or data.values.VSPHERE_STORAGE_POLICY_ID != ""
#@ end

#@ def azurefilecsi_configs_exist():
#@   return data.values.PROVIDER_TYPE == "azure" and (data.values.TKG_HTTP_PROXY != "" or
#@                                                  data.values.TKG_HTTPS_PROXY != "" or
#@                                                  data.values.TKG_NO_PROXY != "")
#@ end

#@ def awsebscsi_configs_exist():
#@   return data.values.PROVIDER_TYPE == "aws" and (data.values.TKG_HTTP_PROXY != "" or
#@                                                  data.values.TKG_HTTPS_PROXY != "" or
#@                                                  data.values.TKG_NO_PROXY != "")
#@ end

#@ def should_create_clusterbootstrap():
#@   return data.values.CNI != "antrea" or antrea_config_customized() or vspherecsi_configs_exist() or vspherecpi_configs_exist() or awsebscsi_configs_exist() or storage_class_customized() or azurediskcsi_configs_exist() or azurefilecsi_configs_exist()  or pinniped_configs_exist()
#@ end

#@ def kubevipcpiconfig_exist():
#@   return data.values.PROVIDER_TYPE == "vsphere" and data.values.TKG_CLUSTER_ROLE == "workload" and data.values.KUBEVIP_LOADBALANCER_ENABLE and (data.values.KUBEVIP_LOADBALANCER_CIDRS != "" or data.values.KUBEVIP_LOADBALANCER_IP_RANGES != "")
#@ end

#@ if is_management_cluster():
---
#! In order to maintain a consistent UX, the pinniped secret for a management cluster will always be created.  This is
#! to ensure that a user can provide the --dry-run flag to "tanzu management-cluster create" whether they are
#! configuring or disabling Pinniped.
#! If data.values.IDENTITY_MANAGEMENT_TYPE is provided with values "ldap" or "oidc" then a secret with
#! user provided configuration will be generated. If another unsupported value or no value is provided, then a default
#! generic secret will be created which will result in pinniped being disabled.
#! This secret will never be generated for workload clusters so that the default Secret from the ClusterBootstrapTemplate
#! may always be used (and that Secret contains identity_management_type "none" to disable Pinniped).
#! For workload clusters, the tanzu-auth-controller-manager's v3_cascade_controller will
#! watch that default Secret or every cluster and will edit its contents to keep it up to date with the management cluster's
#! pinniped-info configmap. The pinniped-info configmap contains the relevant Pinniped settings for workload clusters,
#! created by the Pinniped package on the management cluster and updated by the Pinniped package's post-deploy-job on
#! the management cluster. Note that when Pinniped was not configured on the management cluster, then the pinniped-info
#! configmap will not exist, in which case the controller will edit the default Secret to give it the appropriate values
#! to disable Pinniped on all the workload clusters too.
apiVersion: v1
kind: Secret
metadata:
  #! This is the same name which is the default used by the ClusterBootstrap below.
  #! If this Secret is generated, then the cluster will use it instead of creating
  #! a default version of this Secret.
  name: #@ "{}-pinniped-package".format(data.values.CLUSTER_NAME)
  namespace: #@ data.values.NAMESPACE
  labels:
    tkg.tanzu.vmware.com/addon-name: pinniped
    tkg.tanzu.vmware.com/cluster-name: #@ data.values.CLUSTER_NAME
    clusterctl.cluster.x-k8s.io/move: ""
  annotations:
    tkg.tanzu.vmware.com/addon-type: "authentication/pinniped"
type: clusterbootstrap-secret
stringData:
  values.yaml: #@ yaml.encode(getPinnipedDataValuesForMC())
#@ end
#@ if antrea_config_customized():
---
apiVersion: cni.tanzu.vmware.com/v1alpha1
kind: AntreaConfig
metadata:
  name: #@ data.values.CLUSTER_NAME
  namespace: #@ data.values.NAMESPACE
spec:
  antrea:
    config:
      egress:
        exceptCIDRs: #@ split_comma_values(data.values.ANTREA_EGRESS_EXCEPT_CIDRS)
      nodePortLocal:
        enabled: #@ data.values.ANTREA_NODEPORTLOCAL_ENABLED
        portRange: #@ data.values.ANTREA_NODEPORTLOCAL_PORTRANGE
      antreaProxy:
        proxyAll: #@ data.values.ANTREA_PROXY_ALL
        nodePortAddresses: #@ split_comma_values(data.values.ANTREA_PROXY_NODEPORT_ADDRS)
        skipServices: #@ split_comma_values(data.values.ANTREA_PROXY_SKIP_SERVICES)
        proxyLoadBalancerIPs: #@ data.values.ANTREA_PROXY_LOAD_BALANCER_IPS
      flowExporter:
        collectorAddress: #@ data.values.ANTREA_FLOWEXPORTER_COLLECTOR_ADDRESS
        pollInterval: #@ data.values.ANTREA_FLOWEXPORTER_POLL_INTERVAL
        activeFlowTimeout: #@ data.values.ANTREA_FLOWEXPORTER_ACTIVE_TIMEOUT
        idleFlowTimeout: #@ data.values.ANTREA_FLOWEXPORTER_IDLE_TIMEOUT
      kubeAPIServerOverride: #@ data.values.ANTREA_KUBE_APISERVER_OVERRIDE
      transportInterface: #@ data.values.ANTREA_TRANSPORT_INTERFACE
      transportInterfaceCIDRs: #@ split_comma_values(data.values.ANTREA_TRANSPORT_INTERFACE_CIDRS)
      multicastInterfaces: #@ split_comma_values(data.values.ANTREA_MULTICAST_INTERFACES)
      tunnelType: #@ data.values.ANTREA_TUNNEL_TYPE
      tunnelPort: #@ data.values.ANTREA_TUNNEL_PORT
      tunnelCsum: #@ data.values.ANTREA_TUNNEL_CSUM
      trafficEncryptionMode: #@ data.values.ANTREA_TRAFFIC_ENCRYPTION_MODE
      enableUsageReporting: #@ data.values.ANTREA_ENABLE_USAGE_REPORTING
      wireGuard:
        port: #@ data.values.ANTREA_WIREGUARD_PORT
      serviceCIDR: #@ data.values.SERVICE_CIDR
      #@ if data.values.NSXT_POD_ROUTING_ENABLED:
      trafficEncapMode: "noEncap"
      noSNAT: true
      #@ else:
      trafficEncapMode: #@ data.values.ANTREA_TRAFFIC_ENCAP_MODE
      noSNAT: #@ data.values.ANTREA_NO_SNAT
      #@ end
      disableUdpTunnelOffload: #@ data.values.ANTREA_DISABLE_UDP_TUNNEL_OFFLOAD
      enableBridgingMode: #@data.values.ANTREA_ENABLE_BRIDGING_MODE
      disableTXChecksumOffload: #@ data.values.ANTREA_DISABLE_TXCHECKSUM_OFFLOAD
      dnsServerOverride: #@ data.values.ANTREA_DNS_SERVER_OVERRIDE
      multicast:
        igmpQueryInterval: #@ data.values.ANTREA_MULTICAST_IGMPQUERY_INTERVAL
      multicluster:
        enable: #@ data.values.ANTREA_MULTICLUSTER_ENABLE
        namespace: #@ data.values.ANTREA_MULTICLUSTER_NAMESPACE
      featureGates:
        #@ if data.values.NSXT_POD_ROUTING_ENABLED:
        AntreaProxy: true
        #@ else:
        AntreaProxy: #@ data.values.ANTREA_PROXY
        #@ end
        EndpointSlice: #@ data.values.ANTREA_ENDPOINTSLICE
        AntreaTraceflow: #@ data.values.ANTREA_TRACEFLOW
        NodePortLocal: #@ data.values.ANTREA_NODEPORTLOCAL
        AntreaPolicy: #@ data.values.ANTREA_POLICY
        FlowExporter: #@ data.values.ANTREA_FLOWEXPORTER
        NetworkPolicyStats: #@ data.values.ANTREA_NETWORKPOLICY_STATS
        Egress: #@ data.values.ANTREA_EGRESS
        AntreaIPAM: #@ data.values.ANTREA_IPAM
        ServiceExternalIP: #@ data.values.ANTREA_SERVICE_EXTERNALIP
        Multicast: #@ data.values.ANTREA_MULTICAST
        Multicluster: #@ data.values.ANTREA_MULTICLUSTER
        SecondaryNetwork: #@ data.values.ANTREA_SECONDARY_NETWORK
        TrafficControl: #@ data.values.ANTREA_TRAFFIC_CONTROL
        TopologyAwareHints: #@ data.values.ANTREA_TOPOLOGY_AWARE_HINTS

#@ end
---
#@ if data.values.CNI == "calico":
apiVersion: cni.tanzu.vmware.com/v1alpha1
kind: CalicoConfig
metadata:
  name: #@ data.values.CLUSTER_NAME
  namespace: #@ data.values.NAMESPACE
spec:
  calico:
    config:
      vethMTU: 0
      #@ if/end data.values.PROVIDER_TYPE != "docker":
      skipCNIBinaries: true
#@ end
---
#@ if vspherecpi_configs_exist() and not data.values.IS_WINDOWS_WORKLOAD_CLUSTER:
#@ if data.values.NSXT_USERNAME or data.values.NSXT_PASSWORD:
---
apiVersion: v1
kind: Secret
metadata:
  name: #@ data.values.CLUSTER_NAME + "-nsxt-credential"
  namespace: #@ data.values.NAMESPACE
stringData:
  username: #@ data.values.NSXT_USERNAME
  password: #@ data.values.NSXT_PASSWORD
#@ end
---
apiVersion: cpi.tanzu.vmware.com/v1alpha1
kind: VSphereCPIConfig
metadata:
  name: #@ data.values.CLUSTER_NAME
  namespace: #@ data.values.NAMESPACE
spec:
  vsphereCPI:
    mode: vsphereCPI
    #@ if data.values.VSPHERE_REGION:
    region: #@ data.values.VSPHERE_REGION
    #@ end
    #@ if data.values.VSPHERE_ZONE:
    zone: #@ data.values.VSPHERE_ZONE
    #@ end
    #@ if data.values.TKG_IP_FAMILY:
    ipFamily: #@ data.values.TKG_IP_FAMILY
    #@ end
    #@ if not data.values.AVI_CONTROL_PLANE_HA_PROVIDER:
    vmNetwork:
      excludeInternalSubnetCidr: #@ vsphereControlPlaneEndpointAsCidr
      excludeExternalSubnetCidr: #@ vsphereControlPlaneEndpointAsCidr
    #@ end
    tlsCipherSuites: TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256,TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384,TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305,TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
    #@ if data.values.NSXT_USERNAME or data.values.NSXT_PASSWORD:
    nsxt:
      podRoutingEnabled: #@ data.values.NSXT_POD_ROUTING_ENABLED
      route:
        routerPath: #@ data.values.NSXT_ROUTER_PATH
      credentialLocalObjRef:
        kind: Secret
        name: #@ data.values.CLUSTER_NAME + "-nsxt-credential"
      apiHost: #@ data.values.NSXT_MANAGER_HOST
      insecure: #@ bool(data.values.NSXT_ALLOW_UNVERIFIED_SSL)
      remoteAuth: #@ bool(data.values.NSXT_REMOTE_AUTH)
      vmcAccessToken: #@ data.values.NSXT_VMC_ACCESS_TOKEN
      vmcAuthHost: #@ data.values.NSXT_VMC_AUTH_HOST
      clientCertKeyData: #@ data.values.NSXT_CLIENT_CERT_KEY_DATA
      clientCertData: #@ data.values.NSXT_CLIENT_CERT_DATA
      rootCAData: #@ data.values.NSXT_ROOT_CA_DATA_B64
    #@ end
    #@ if data.values.TKG_HTTP_PROXY:
    proxy:
      http_proxy: #@ data.values.TKG_HTTP_PROXY
      https_proxy: #@ data.values.TKG_HTTPS_PROXY
      no_proxy: #@ data.values.TKG_NO_PROXY
    #@ end
#@ end
---
#@ if vspherecsi_configs_exist() and data.values.PROVIDER_TYPE == "vsphere" and not data.values.IS_WINDOWS_WORKLOAD_CLUSTER:
apiVersion: csi.tanzu.vmware.com/v1alpha1
kind: VSphereCSIConfig
metadata:
  name: #@ data.values.CLUSTER_NAME
  namespace: #@ data.values.NAMESPACE
spec:
  vsphereCSI:
    mode: vsphereCSI
    config:
      #@ if data.values.VSPHERE_INSECURE:
      insecureFlag: #@ data.values.VSPHERE_INSECURE
      #@ else:
      tlsThumbprint: #@ data.values.VSPHERE_TLS_THUMBPRINT
      #@ end
      datacenter: #@ data.values.VSPHERE_DATACENTER
      zone: #@ data.values.VSPHERE_ZONE
      region: #@ data.values.VSPHERE_REGION
      useTopologyCategories: #@ data.values.USE_TOPOLOGY_CATEGORIES
      httpProxy: #@ data.values.TKG_HTTP_PROXY
      httpsProxy: #@ data.values.TKG_HTTPS_PROXY
      noProxy: #@ data.values.TKG_NO_PROXY
#@ end

#@ def vsphere_storage_class():
infraProvider: vsphere
#@ if data.values.VSPHERE_STORAGE_POLICY_ID != "":
VSPHERE_STORAGE_POLICY_ID: #@ data.values.VSPHERE_STORAGE_POLICY_ID
#@ end
#@ end

#@ def no_storage_class():
infraProvider: ""
#@ end

---
#@ if azurediskcsi_configs_exist():
apiVersion: csi.tanzu.vmware.com/v1alpha1
kind: AzureDiskCSIConfig
metadata:
  name: #@ data.values.CLUSTER_NAME
  namespace: #@ data.values.NAMESPACE
spec:
  azureDiskCSIDriver:
    namespace: kube-system
    #@ if data.values.CLUSTER_PLAN == "prod" or data.values.CLUSTER_PLAN == "prodcc":
    deploymentReplicas: 3
    #@ else:
    deploymentReplicas: 1
    #@ end
    httpProxy: #@ data.values.TKG_HTTP_PROXY
    httpsProxy: #@ data.values.TKG_HTTPS_PROXY
    noProxy: #@ data.values.TKG_NO_PROXY
#@ end
---
#@ if azurefilecsi_configs_exist():
apiVersion: csi.tanzu.vmware.com/v1alpha1
kind: AzureFileCSIConfig
metadata:
  name: #@ data.values.CLUSTER_NAME
  namespace: #@ data.values.NAMESPACE
spec:
  azureFileCSIDriver:
    namespace: kube-system
    #@ if data.values.CLUSTER_PLAN == "prod" or data.values.CLUSTER_PLAN == "prodcc":
    deploymentReplicas: 3
    #@ else:
    deploymentReplicas: 1
    #@ end
    httpProxy: #@ data.values.TKG_HTTP_PROXY
    httpsProxy: #@ data.values.TKG_HTTPS_PROXY
    noProxy: #@ data.values.TKG_NO_PROXY
#@ end
---
#@ if awsebscsi_configs_exist():
apiVersion: csi.tanzu.vmware.com/v1alpha1
kind: AwsEbsCSIConfig
metadata:
  name: #@ data.values.CLUSTER_NAME
  namespace: #@ data.values.NAMESPACE
spec:
  awsEBSCSIDriver:
    namespace: kube-system
    #@ if data.values.CLUSTER_PLAN == "prod" or data.values.CLUSTER_PLAN == "prodcc":
    deploymentReplicas: 3
    #@ else:
    deploymentReplicas: 1
    #@ end
    httpProxy: #@ data.values.TKG_HTTP_PROXY
    httpsProxy: #@ data.values.TKG_HTTPS_PROXY
    noProxy: #@ data.values.TKG_NO_PROXY
#@ end

---
#@ if kubevipcpiconfig_exist() and not data.values.IS_WINDOWS_WORKLOAD_CLUSTER:
apiVersion: cpi.tanzu.vmware.com/v1alpha1
kind: KubevipCPIConfig
metadata:
  name: #@ data.values.CLUSTER_NAME
  namespace: #@ data.values.NAMESPACE
spec:
  #@ if data.values.KUBEVIP_LOADBALANCER_CIDRS != "":
  loadbalancerCIDRs: #@ data.values.KUBEVIP_LOADBALANCER_CIDRS
  #@ end
  #@ if data.values.KUBEVIP_LOADBALANCER_IP_RANGES != "":
  loadbalancerIPRanges: #@ data.values.KUBEVIP_LOADBALANCER_IP_RANGES
  #@ end
#@ end

---
#@ if should_create_clusterbootstrap():
apiVersion: run.tanzu.vmware.com/v1alpha3
kind: ClusterBootstrap
metadata:
  name: #@ data.values.CLUSTER_NAME
  namespace: #@ data.values.NAMESPACE
  annotations:
    tkg.tanzu.vmware.com/add-missing-fields-from-tkr: #@ data.values.KUBERNETES_RELEASE
    #@ if/end data.values.CNI == "none":
    tkg.tanzu.vmware.com/unmanaged-cni: ""
spec:
  #@ if data.values.CNI == "antrea" and antrea_config_customized():
  cni:
    refName: antrea*
    valuesFrom:
      providerRef:
        apiGroup: cni.tanzu.vmware.com
        kind: AntreaConfig
        name: #@ data.values.CLUSTER_NAME
  #@ elif data.values.CNI == "calico":
  cni:
    refName: calico*
    valuesFrom:
      providerRef:
        apiGroup: cni.tanzu.vmware.com
        kind: CalicoConfig
        name: #@ data.values.CLUSTER_NAME
  #@ end
  #@ if vspherecpi_configs_exist() and not data.values.IS_WINDOWS_WORKLOAD_CLUSTER:
  cpi:
    refName: vsphere-cpi*
    valuesFrom:
      providerRef:
        apiGroup: cpi.tanzu.vmware.com
        kind: VSphereCPIConfig
        name: #@ data.values.CLUSTER_NAME
  #@ end
  #@ if vspherecsi_configs_exist() and not data.values.IS_WINDOWS_WORKLOAD_CLUSTER:
  csi:
    refName: vsphere-csi*
    valuesFrom:
      providerRef:
        apiGroup: csi.tanzu.vmware.com
        kind: VSphereCSIConfig
        name: #@ data.values.CLUSTER_NAME
  #@ end
  #@ if awsebscsi_configs_exist() and not data.values.IS_WINDOWS_WORKLOAD_CLUSTER:
  csi:
    refName: aws-ebs-csi*
    valuesFrom:
      providerRef:
        apiGroup: csi.tanzu.vmware.com
        kind: AwsEbsCSIConfig
        name: #@ data.values.CLUSTER_NAME
  #@ end
  #@ if azurediskcsi_configs_exist() and not data.values.IS_WINDOWS_WORKLOAD_CLUSTER:
  csi:
    refName: azuredisk-csi*
    valuesFrom:
      providerRef:
        apiGroup: csi.tanzu.vmware.com
        kind: AzureDiskCSIConfig
        name: #@ data.values.CLUSTER_NAME
  #@ end
  kapp:
    refName: kapp-controller*
  additionalPackages:
    - refName: metrics-server*
    - refName: secretgen-controller*
    - refName: pinniped*
    #@ if/end data.values.IS_WINDOWS_WORKLOAD_CLUSTER:
    - refName: tkg-windows*
    #@ if storage_class_customized():
    - refName: tkg-storageclass*
      valuesFrom:
        #@ if not data.values.ENABLE_DEFAULT_STORAGE_CLASS:
        inline: #@ no_storage_class()
        #@ elif data.values.VSPHERE_STORAGE_POLICY_ID != "":
        inline: #@ vsphere_storage_class()
        #@ end
    #@ end
    #@ if azurefilecsi_configs_exist() and not data.values.IS_WINDOWS_WORKLOAD_CLUSTER:
    - refName: azurefile-csi*
      valuesFrom:
        providerRef:
          apiGroup: csi.tanzu.vmware.com
          kind: AzureFileCSIConfig
          name: #@ data.values.CLUSTER_NAME
    #@ end
    #@ if kubevipcpiconfig_exist() and not data.values.IS_WINDOWS_WORKLOAD_CLUSTER:
    - refName: kube-vip-cloud-provider*
      valuesFrom:
        providerRef:
          apiGroup: cpi.tanzu.vmware.com
          kind: KubevipCPIConfig
          name: #@ data.values.CLUSTER_NAME
    #@ end
#@ end
